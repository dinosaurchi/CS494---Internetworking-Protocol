Michael Hadjiosif
IS 672
Lab 2

SSL Lab Questions Questions:


1. Frame 106:
	Source: Client
	# of SSL Records: 1
        SSL Record Types: Client Hello
   Frame 108:
	Source: Server
	# of SSL Records: 1
        SSL Record Types: Server Hello
   Frame 111:
	Source: Server
	# of SSL Records: 2
        SSL Record Types: Certificate, Server Hello Done
   Frame 112:
	Source: Client
	# of SSL Records: 3
        SSL Record Types: Client Key Exchange, Change Cipher Spec, Encrypted Handshake Message
   Frame 113:
	Source: Server
	# of SSL Records: 2
        SSL Record Types: Change Cipher Spec, Encrypted Handshake Message
   Frame 114:
	Source: Client
	# of SSL Records: 1
        SSL Record Types: Encrypted Application Data
   Frame 122:
	Source: Server
	# of SSL Records: 1
        SSL Record Types: Encrypted Application Data
   Frame 123:
	Source: Server
	# of SSL Records: Unknown (this frame is only segment of a full PDU, so SSL layer info is not available from this frame.)
        SSL Record Types: Unknown (this frame is only segment of a full PDU, so SSL layer info is not available from this frame.)

   
   TIMING DIAGRAM:

   Client                                Server
   ------------------------------------------->
                client hello
   <-------------------------------------------
                server hello
   <-------------------------------------------
                certificate
   <-------------------------------------------
              server hello done
   ------------------------------------------->
             client key exchange
   ------------------------------------------->
             change cipher spec
   ------------------------------------------->
          encrypted handshake message
   <-------------------------------------------
             change cipher spec
   <-------------------------------------------
          encrypted handshake message
   ------------------------------------------->
          encrypted application data
   <-------------------------------------------
          encrypted application data


2. Field Name: Content Type      Field Length: 1 byte
   Field Name: Version           Field Length: 2 bytes
   Field Name: Length            Field Length: 2 bytes

3. NOTE: I am using the ssl-ethereal-trace-1 trace file, and the first ClientHello record (Frame # 106), does not have an explicit field named "Content Type". It also shows the SSL version as version 2, while all subsequent packets show SSL version 3. ClientHello records later on in the trace (e.g. Frame 163) do have a field named "Content Type", and show SSL version 3. I know I'm displaying the trace correctly, because the screenshot in the wireshark lab .pdf file shows the same problem with the first frame. While the lab says to use the first ClientHello record if the trace has multiple ones, I'm going to use the second ClientHello record in the trace, from frame # 163, to answer these questions.

     Content Type: Handshake (22)

4. ClientHello record (from Frame # 163) does contain a field called random_bytes, which serves as a nonce. The hex value = 1b:78:1c:6c:64:4b:84:fe:4e:fa:7b:e6:ef:21:ef:c9:8e:35:03:55:e9:06:95:00:1e:79:03:1c.

5. (ClientHello record from Frame # 163) Yes. Public Key Algorithm: TLS_RSA; Symmetric Key Algorithm: RC4_128; Hash Algorithm: MD5.

6. (ServerHello record from Frame # 108) Yes. Public Key Algorithm: TLS_RSA; Symmetric Key Algorithm: RC4_128; Hash Algorithm: MD5.

7. (ServerHello record from Frame # 108) Yes. 28 bytes. Nonces are used during key exchange to help prevent replay attacks.

8. (ServerHello record from Frame # 108) Yes. The session ID indentifies the unique SSL session with which a specific SSL connection is to be associated. Multiple connections can use the same SSL session.

9. (ServerHello record from Frame # 108) The certificate is in a different record (the record containing the certificate associated with this ServerHello record is in frame # 111). The certificate in frame # 111 does fit within a single frame.

10. (Client Key Exchange record from Frame # 112) Wireshark does not show an obvious pre-master secret in this packet. However, since the selected key exchange algorithm for this exchange was RSA (this was shown in ther Server Hello record in Frame # 108), a pre-master secret must be generated by the client and transmitted to the server. I am assuming that while Wireshark isn't showing a field named "pre-master secret" (or something similar), the pre-master secret is contained within the Client Key Exchange record. The overall length for the entire record is 132 bytes, however there is a second length field under the "Handshake Protocol: Client Key Exchange" subheader within the SSL record. Since that length is smaller than the overall record length, and since there is nothing else under that subheader except "Handshake Type: Client Key Exchange", I'm making the assumption that the Length field under that subheader is the length of the pre-master secret. Based on that assumption, I'm going to say that the length of the pre-master secret is the length specified by that field, which is 128 bytes. Regarding encryption of the pre-master secret, while again I can't tell based on what Wireshark shows me, I do know that when the key exchange algorithm is RSA, the pre-master secret is encrypted using the public RSA key of the server. Since we know RSA is the exchange algorithm used here, I'm assuming that the pre-master secret is encrypted using that method. The pre-master secret is used to allow both the client and server to calculate a shared master secret to generate an encryption key without acually having to transmit that shared master secret to each other.

11. (Change Cipher Spec from Frame # 112) The change cipher spec record triggers an update of the SSL session state, which in turn causes the cipher suite being used to be updated. The length of this Change Cipher Spec record is 6 bytes.

12. (Encrypted Handshake Record from Frame # 112) The encrypted handshake record is the "finished message", which is constructed by taking both the SHA hash and MD5 hash of all the handshake messages sent up until this message, and then concatinating each of those hashes with a unique sender code, the master secret, and some padding values and then taking the SHA hash and MD5 hash of those concatinated values. Those two resulting hashes are finally concatinated together to create the final "finished message". The "finished message" is then encrypted using the algorithms, keys, and secrets that were just negotiated during this SSL connection. The "finished message" serves to verfiy that both the client and server both correctly completed the protcol and now share the correct values to communicate securely.

13. The server does also send a change cipher spec and encrypted handshake record to the client. The change cipher spec record is the same in both cases, however the encrypted handshake record differs only in that the value of the actual payload message is different (the structure and headers are the same). The difference in payload is due to the fact that the unqiue sender code is part of the value that is hashed to become the message payload. Since the server and client have different sender codes, the resulting message payloads are different.

14. The application data is being encrypted using symmetric encryption based on the shared master secret negotiated during the SSL connection setup. The encrypted application records do include a MAC, but it is encrypted along with the message data, so it is not readable or recognizeable by Wireshark.

15. I found it interesting that the very first ClientHello record sent in frame # 106 is SSL version 2, while every other record is SSL version 3. I'm not sure why that would happen.


16. http://userpages.umbc.edu/~mhadj1/is672/28821/Labs/Lab2/wireshark_SSL_screenshot.jpg