import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;

import javax.imageio.ImageIO;

import Entity.MyImageInfo;
import Entity.SearchResult;
import Entity.User;
import Packet.DownloadRequestPacket;
import Packet.DownloadResultPacket;
import Packet.EnteringPacket;
import Packet.MessagePacket;
import Packet.Packet;
import Packet.SearchPacket;
import Packet.SearchResultPacket;
import Packet.UploadPacket;
import database.DatabaseConnect;
import database.ImageInfoDatabase;
import database.UserDatabase;
import support.SpecialCharacters;
import support.SupportFunction;

public class Server {
	private static final int PORT = 9002;
	private static final String IMAGE_STORAGE_DIR = "/Users/macpro/Google Drive/APCS/Subjects/CS/CS 494 - Internetworking Protocols/Lab/Project 1/Java/ImageDatabase";
	private static ImageInfoDatabase imageDatabase = null;
	private static UserDatabase userDatabase = null;
	private static ArrayList<String> isOnlineList = null;

    public static void main(String[] args) throws Exception {
        System.out.println("The chat server is running.");
        
        DatabaseConnect db = new DatabaseConnect();
        imageDatabase = new ImageInfoDatabase(db);
        userDatabase = new UserDatabase(db);
        
        isOnlineList = new ArrayList<>();
        
        ServerSocket listener = new ServerSocket(PORT);

        try {
            while (true) {
                new Handler(listener.accept()).start();
            }
        } finally {
            listener.close();
        }
    }

    private static class Handler extends Thread {   
		private User user = null;
        private Socket socket;
        private ObjectInputStream inStream = null;
        private ObjectOutputStream outStream = null;

        public Handler(Socket socket) {
            this.socket = socket;
        }
        
        public void run() {
            try {            	
                // Create character streams for the socket.
            	
            	outStream = new ObjectOutputStream(socket.getOutputStream());
            	inStream = new ObjectInputStream(new BufferedInputStream(socket.getInputStream()));
            	           	
            	System.out.println("Entering...");
            	while (true) {
            		Packet responsePacket = (Packet) inStream.readObject();
            		if (responsePacket.getPacketType().equals(EnteringPacket.PACKET_TYPE)){
            			EnteringPacket enteringMessagePacket = (EnteringPacket) responsePacket;
            			user = new User();
            			if (user.setUserName(enteringMessagePacket.getUserName()) &&
            					user.setPassword(enteringMessagePacket.getPassword())){
            				String enteringType = enteringMessagePacket.getEnteringType();
            				if (enteringType != null) {
            					if (enteringType.equals(SpecialCharacters.LOGIN)) {
            						int idx = isOnlineList.indexOf(user.getUserName());
            						if (idx > -1) {
            							System.out.println("ERROR: User has been online");
            							MessagePacket message = new MessagePacket();
            							message.setMessage(SpecialCharacters.HAS_BEEN_ONLINE);
            							outStream.writeObject(message);
            							continue;
            						}
            						isOnlineList.add(user.getUserName());
            						break;
            					}
            					else if (enteringType.equals(SpecialCharacters.SIGNUP) && !users.contains(user)) {
            						user.setOnline(true);
            						users.add(user);
            						System.out.println("Registered: " + user.getUserName());
            						break;
            					}

            					System.out.println("ERROR: Wrong input");
            					MessagePacket message = new MessagePacket();
            					message.setMessage(SpecialCharacters.WRONG_INPUT);
            					outStream.writeObject(message);
            				}

            			}
            		}
            	}
            	
            	System.out.println("LOGIN SUCCESSFUL");
            	MessagePacket message = new MessagePacket();
            	message.setMessage(SpecialCharacters.SUCCESS);
            	outStream.writeObject(message);
            	
            	System.out.println("Finished Entering \n");
            	
            	System.out.println("Functioning...");
            	
            	while (true) {
	            	Packet responsePacket = (Packet) inStream.readObject();
	            	switch (responsePacket.getPacketType()) {
	            	
					case SearchPacket.PACKET_TYPE: {
						SearchPacket searchPacket = (SearchPacket) responsePacket;
						String searchContent = searchPacket.getContent();
						String filter = searchPacket.getFilter();
						if (searchContent != null && filter != null){
							ArrayList<SearchResult> results = imageDatabase.retrieveInfo(searchContent, filter);
							SearchResultPacket resultPacket = new SearchResultPacket(results);
							outStream.writeObject(resultPacket);
							System.out.println("Search results were sent back to " + user.getUserName());
						}
						else {
							message = new MessagePacket();
			            	message.setMessage(SpecialCharacters.WRONG_SEARCH_INPUT);
			            	outStream.writeObject(message);
			            	System.out.println("ERROR: Wrong search input");
						}
						break;
					}	
					case UploadPacket.PACKET_TYPE: {
						UploadPacket uploadPacket = (UploadPacket) responsePacket;
						BufferedImage uploadImage = uploadPacket.getUploadImage();
						MyImageInfo info = uploadPacket.getUploadImageInfo();					
						
						int id = imageDatabase.put(info);
						if (id > 0){
							info.setImageId(id);
							String storePath = SupportFunction.storeImage(IMAGE_STORAGE_DIR, info.getImageId().toString(), info.getType(), uploadImage);
							info.setImageOwnerUsername(user.getUserName());
							info.setImageLink(storePath);
							info.setHeight(uploadImage.getHeight());
							info.setWidth(uploadImage.getWidth());
							
							message = new MessagePacket();
			            	message.setMessage(SpecialCharacters.UPLOAD_SUCCESSFUL);
			            	outStream.writeObject(message);
			            	System.out.println("Upload successful from " + user.getUserName());
						}
						else {
							message = new MessagePacket();
			            	message.setMessage(SpecialCharacters.WRONG_UPLOAD_INPUT);
			            	outStream.writeObject(message);
			            	System.out.println("ERROR: Upload fail from " + user.getUserName());
						}
						break;
					}
					case DownloadRequestPacket.PACKET_TYPE: {
						DownloadRequestPacket downloadRequestPacket = (DownloadRequestPacket) responsePacket;
						String imageId = downloadRequestPacket.getRequestedImageId();
						MyImageInfo imageInfo = imageDatabase.retrieveInfo(imageId);
						if (imageInfo != null) {
							DownloadResultPacket result = new DownloadResultPacket();
							result.setDownloadImageInfo(imageInfo);
							result.setDownloadImage(imageInfo.getImageLink());
							outStream.writeObject(result);
							System.out.println("Download image was sent to " + user.getUserName());
						}
						else {
							message = new MessagePacket();
			            	message.setMessage(SpecialCharacters.WRONG_IMAGE_DOWNLOAD);
			            	outStream.writeObject(message);
			            	System.out.println("ERROR: Not found image from " + user.getUserName());
						}
						break;
					}
					default:
						break;
					}
            	}
            	
                	
            } catch (IOException e) {
                System.out.println(e);
            } catch (ClassNotFoundException e) {
				e.printStackTrace();
			} finally {
				if (user != null)
					user.setOnline(false);
				
                try {
                    socket.close();
                } catch (IOException e) {
                }
            }
        }
    }
    
    
}
