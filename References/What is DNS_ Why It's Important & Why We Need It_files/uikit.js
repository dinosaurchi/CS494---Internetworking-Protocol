/*!
Chosen, a Select Box Enhancer for jQuery and Prototype
by Patrick Filler for Harvest, http://getharvest.com

Version 1.4.2
Full source at https://github.com/harvesthq/chosen
Copyright (c) 2011-2015 Harvest http://getharvest.com

MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
This file is generated by `grunt build`, do not edit it by hand.
*/
(function() {
    var $, AbstractChosen, Chosen, SelectParser, _ref, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
            if (__hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    };
    SelectParser = function() {
        function SelectParser() {
            this.options_index = 0;
            this.parsed = [];
        }
        SelectParser.prototype.add_node = function(child) {
            if (child.nodeName.toUpperCase() === "OPTGROUP") {
                return this.add_group(child);
            } else {
                return this.add_option(child);
            }
        };
        SelectParser.prototype.add_group = function(group) {
            var group_position, option, _i, _len, _ref, _results;
            group_position = this.parsed.length;
            this.parsed.push({
                array_index: group_position,
                group: true,
                label: this.escapeExpression(group.label),
                title: group.title ? group.title : void 0,
                children: 0,
                disabled: group.disabled,
                classes: group.className
            });
            _ref = group.childNodes;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                option = _ref[_i];
                _results.push(this.add_option(option, group_position, group.disabled));
            }
            return _results;
        };
        SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
            if (option.nodeName.toUpperCase() === "OPTION") {
                if (option.text !== "") {
                    if (group_position != null) {
                        this.parsed[group_position].children += 1;
                    }
                    this.parsed.push({
                        array_index: this.parsed.length,
                        options_index: this.options_index,
                        value: option.value,
                        text: option.text,
                        html: option.innerHTML,
                        title: option.title ? option.title : void 0,
                        selected: option.selected,
                        disabled: group_disabled === true ? group_disabled : option.disabled,
                        group_array_index: group_position,
                        group_label: group_position != null ? this.parsed[group_position].label : null,
                        classes: option.className,
                        style: option.style.cssText
                    });
                } else {
                    this.parsed.push({
                        array_index: this.parsed.length,
                        options_index: this.options_index,
                        empty: true
                    });
                }
                return this.options_index += 1;
            }
        };
        SelectParser.prototype.escapeExpression = function(text) {
            var map, unsafe_chars;
            if (text == null || text === false) {
                return "";
            }
            if (!/[\&\<\>\"\'\`]/.test(text)) {
                return text;
            }
            map = {
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#x27;",
                "`": "&#x60;"
            };
            unsafe_chars = /&(?!\w+;)|[\<\>\"\'\`]/g;
            return text.replace(unsafe_chars, function(chr) {
                return map[chr] || "&amp;";
            });
        };
        return SelectParser;
    }();
    SelectParser.select_to_array = function(select) {
        var child, parser, _i, _len, _ref;
        parser = new SelectParser();
        _ref = select.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            parser.add_node(child);
        }
        return parser.parsed;
    };
    AbstractChosen = function() {
        function AbstractChosen(form_field, options) {
            this.form_field = form_field;
            this.options = options != null ? options : {};
            if (!AbstractChosen.browser_is_supported()) {
                return;
            }
            this.is_multiple = this.form_field.multiple;
            this.set_default_text();
            this.set_default_values();
            this.setup();
            this.set_up_html();
            this.register_observers();
            this.on_ready();
        }
        AbstractChosen.prototype.set_default_values = function() {
            var _this = this;
            this.click_test_action = function(evt) {
                return _this.test_active_click(evt);
            };
            this.activate_action = function(evt) {
                return _this.activate_field(evt);
            };
            this.active_field = false;
            this.mouse_on_container = false;
            this.results_showing = false;
            this.result_highlighted = null;
            this.allow_single_deselect = this.options.allow_single_deselect != null && this.form_field.options[0] != null && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
            this.disable_search_threshold = this.options.disable_search_threshold || 0;
            this.disable_search = this.options.disable_search || false;
            this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;
            this.group_search = this.options.group_search != null ? this.options.group_search : true;
            this.search_contains = this.options.search_contains || false;
            this.single_backstroke_delete = this.options.single_backstroke_delete != null ? this.options.single_backstroke_delete : true;
            this.max_selected_options = this.options.max_selected_options || Infinity;
            this.inherit_select_classes = this.options.inherit_select_classes || false;
            this.display_selected_options = this.options.display_selected_options != null ? this.options.display_selected_options : true;
            this.display_disabled_options = this.options.display_disabled_options != null ? this.options.display_disabled_options : true;
            return this.include_group_label_in_selected = this.options.include_group_label_in_selected || false;
        };
        AbstractChosen.prototype.set_default_text = function() {
            if (this.form_field.getAttribute("data-placeholder")) {
                this.default_text = this.form_field.getAttribute("data-placeholder");
            } else if (this.is_multiple) {
                this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;
            } else {
                this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;
            }
            return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text;
        };
        AbstractChosen.prototype.choice_label = function(item) {
            if (this.include_group_label_in_selected && item.group_label != null) {
                return "<b class='group-name'>" + item.group_label + "</b>" + item.html;
            } else {
                return item.html;
            }
        };
        AbstractChosen.prototype.mouse_enter = function() {
            return this.mouse_on_container = true;
        };
        AbstractChosen.prototype.mouse_leave = function() {
            return this.mouse_on_container = false;
        };
        AbstractChosen.prototype.input_focus = function(evt) {
            var _this = this;
            if (this.is_multiple) {
                if (!this.active_field) {
                    return setTimeout(function() {
                        return _this.container_mousedown();
                    }, 50);
                }
            } else {
                if (!this.active_field) {
                    return this.activate_field();
                }
            }
        };
        AbstractChosen.prototype.input_blur = function(evt) {
            var _this = this;
            if (!this.mouse_on_container) {
                this.active_field = false;
                return setTimeout(function() {
                    return _this.blur_test();
                }, 100);
            }
        };
        AbstractChosen.prototype.results_option_build = function(options) {
            var content, data, _i, _len, _ref;
            content = "";
            _ref = this.results_data;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                data = _ref[_i];
                if (data.group) {
                    content += this.result_add_group(data);
                } else {
                    content += this.result_add_option(data);
                }
                if (options != null ? options.first : void 0) {
                    if (data.selected && this.is_multiple) {
                        this.choice_build(data);
                    } else if (data.selected && !this.is_multiple) {
                        this.single_set_selected_text(this.choice_label(data));
                    }
                }
            }
            return content;
        };
        AbstractChosen.prototype.result_add_option = function(option) {
            var classes, option_el;
            if (!option.search_match) {
                return "";
            }
            if (!this.include_option_in_results(option)) {
                return "";
            }
            classes = [];
            if (!option.disabled && !(option.selected && this.is_multiple)) {
                classes.push("active-result");
            }
            if (option.disabled && !(option.selected && this.is_multiple)) {
                classes.push("disabled-result");
            }
            if (option.selected) {
                classes.push("result-selected");
            }
            if (option.group_array_index != null) {
                classes.push("group-option");
            }
            if (option.classes !== "") {
                classes.push(option.classes);
            }
            option_el = document.createElement("li");
            option_el.className = classes.join(" ");
            option_el.style.cssText = option.style;
            option_el.setAttribute("data-option-array-index", option.array_index);
            option_el.innerHTML = option.search_text;
            if (option.title) {
                option_el.title = option.title;
            }
            return this.outerHTML(option_el);
        };
        AbstractChosen.prototype.result_add_group = function(group) {
            var classes, group_el;
            if (!(group.search_match || group.group_match)) {
                return "";
            }
            if (!(group.active_options > 0)) {
                return "";
            }
            classes = [];
            classes.push("group-result");
            if (group.classes) {
                classes.push(group.classes);
            }
            group_el = document.createElement("li");
            group_el.className = classes.join(" ");
            group_el.innerHTML = group.search_text;
            if (group.title) {
                group_el.title = group.title;
            }
            return this.outerHTML(group_el);
        };
        AbstractChosen.prototype.results_update_field = function() {
            this.set_default_text();
            if (!this.is_multiple) {
                this.results_reset_cleanup();
            }
            this.result_clear_highlight();
            this.results_build();
            if (this.results_showing) {
                return this.winnow_results();
            }
        };
        AbstractChosen.prototype.reset_single_select_options = function() {
            var result, _i, _len, _ref, _results;
            _ref = this.results_data;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                result = _ref[_i];
                if (result.selected) {
                    _results.push(result.selected = false);
                } else {
                    _results.push(void 0);
                }
            }
            return _results;
        };
        AbstractChosen.prototype.results_toggle = function() {
            if (this.results_showing) {
                return this.results_hide();
            } else {
                return this.results_show();
            }
        };
        AbstractChosen.prototype.results_search = function(evt) {
            if (this.results_showing) {
                return this.winnow_results();
            } else {
                return this.results_show();
            }
        };
        AbstractChosen.prototype.winnow_results = function() {
            var escapedSearchText, option, regex, results, results_group, searchText, startpos, text, zregex, _i, _len, _ref;
            this.no_results_clear();
            results = 0;
            searchText = this.get_search_text();
            escapedSearchText = searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
            zregex = new RegExp(escapedSearchText, "i");
            regex = this.get_search_regex(escapedSearchText);
            _ref = this.results_data;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                option = _ref[_i];
                option.search_match = false;
                results_group = null;
                if (this.include_option_in_results(option)) {
                    if (option.group) {
                        option.group_match = false;
                        option.active_options = 0;
                    }
                    if (option.group_array_index != null && this.results_data[option.group_array_index]) {
                        results_group = this.results_data[option.group_array_index];
                        if (results_group.active_options === 0 && results_group.search_match) {
                            results += 1;
                        }
                        results_group.active_options += 1;
                    }
                    option.search_text = option.group ? option.label : option.html;
                    if (!(option.group && !this.group_search)) {
                        option.search_match = this.search_string_match(option.search_text, regex);
                        if (option.search_match && !option.group) {
                            results += 1;
                        }
                        if (option.search_match) {
                            if (searchText.length) {
                                startpos = option.search_text.search(zregex);
                                text = option.search_text.substr(0, startpos + searchText.length) + "</em>" + option.search_text.substr(startpos + searchText.length);
                                option.search_text = text.substr(0, startpos) + "<em>" + text.substr(startpos);
                            }
                            if (results_group != null) {
                                results_group.group_match = true;
                            }
                        } else if (option.group_array_index != null && this.results_data[option.group_array_index].search_match) {
                            option.search_match = true;
                        }
                    }
                }
            }
            this.result_clear_highlight();
            if (results < 1 && searchText.length) {
                this.update_results_content("");
                return this.no_results(searchText);
            } else {
                this.update_results_content(this.results_option_build());
                return this.winnow_results_set_highlight();
            }
        };
        AbstractChosen.prototype.get_search_regex = function(escaped_search_string) {
            var regex_anchor;
            regex_anchor = this.search_contains ? "" : "^";
            return new RegExp(regex_anchor + escaped_search_string, "i");
        };
        AbstractChosen.prototype.search_string_match = function(search_string, regex) {
            var part, parts, _i, _len;
            if (regex.test(search_string)) {
                return true;
            } else if (this.enable_split_word_search && (search_string.indexOf(" ") >= 0 || search_string.indexOf("[") === 0)) {
                parts = search_string.replace(/\[|\]/g, "").split(" ");
                if (parts.length) {
                    for (_i = 0, _len = parts.length; _i < _len; _i++) {
                        part = parts[_i];
                        if (regex.test(part)) {
                            return true;
                        }
                    }
                }
            }
        };
        AbstractChosen.prototype.choices_count = function() {
            var option, _i, _len, _ref;
            if (this.selected_option_count != null) {
                return this.selected_option_count;
            }
            this.selected_option_count = 0;
            _ref = this.form_field.options;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                option = _ref[_i];
                if (option.selected) {
                    this.selected_option_count += 1;
                }
            }
            return this.selected_option_count;
        };
        AbstractChosen.prototype.choices_click = function(evt) {
            evt.preventDefault();
            if (!(this.results_showing || this.is_disabled)) {
                return this.results_show();
            }
        };
        AbstractChosen.prototype.keyup_checker = function(evt) {
            var stroke, _ref;
            stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
            this.search_field_scale();
            switch (stroke) {
              case 8:
                if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {
                    return this.keydown_backstroke();
                } else if (!this.pending_backstroke) {
                    this.result_clear_highlight();
                    return this.results_search();
                }
                break;

              case 13:
                evt.preventDefault();
                if (this.results_showing) {
                    return this.result_select(evt);
                }
                break;

              case 27:
                if (this.results_showing) {
                    this.results_hide();
                }
                return true;

              case 9:
              case 38:
              case 40:
              case 16:
              case 91:
              case 17:
                break;

              default:
                return this.results_search();
            }
        };
        AbstractChosen.prototype.clipboard_event_checker = function(evt) {
            var _this = this;
            return setTimeout(function() {
                return _this.results_search();
            }, 50);
        };
        AbstractChosen.prototype.container_width = function() {
            if (this.options.width != null) {
                return this.options.width;
            } else {
                return "" + this.form_field.offsetWidth + "px";
            }
        };
        AbstractChosen.prototype.include_option_in_results = function(option) {
            if (this.is_multiple && (!this.display_selected_options && option.selected)) {
                return false;
            }
            if (!this.display_disabled_options && option.disabled) {
                return false;
            }
            if (option.empty) {
                return false;
            }
            return true;
        };
        AbstractChosen.prototype.search_results_touchstart = function(evt) {
            this.touch_started = true;
            return this.search_results_mouseover(evt);
        };
        AbstractChosen.prototype.search_results_touchmove = function(evt) {
            this.touch_started = false;
            return this.search_results_mouseout(evt);
        };
        AbstractChosen.prototype.search_results_touchend = function(evt) {
            if (this.touch_started) {
                return this.search_results_mouseup(evt);
            }
        };
        AbstractChosen.prototype.outerHTML = function(element) {
            var tmp;
            if (element.outerHTML) {
                return element.outerHTML;
            }
            tmp = document.createElement("div");
            tmp.appendChild(element);
            return tmp.innerHTML;
        };
        AbstractChosen.browser_is_supported = function() {
            if (window.navigator.appName === "Microsoft Internet Explorer") {
                return document.documentMode >= 8;
            }
            if (/iP(od|hone)/i.test(window.navigator.userAgent)) {
                return false;
            }
            if (/Android/i.test(window.navigator.userAgent)) {
                if (/Mobile/i.test(window.navigator.userAgent)) {
                    return false;
                }
            }
            return true;
        };
        AbstractChosen.default_multiple_text = "Select Some Options";
        AbstractChosen.default_single_text = "Select an Option";
        AbstractChosen.default_no_result_text = "No results match";
        return AbstractChosen;
    }();
    $ = jQuery;
    $.fn.extend({
        chosen: function(options) {
            if (!AbstractChosen.browser_is_supported()) {
                return this;
            }
            return this.each(function(input_field) {
                var $this, chosen;
                $this = $(this);
                chosen = $this.data("chosen");
                if (options === "destroy" && chosen instanceof Chosen) {
                    chosen.destroy();
                } else if (!(chosen instanceof Chosen)) {
                    $this.data("chosen", new Chosen(this, options));
                }
            });
        }
    });
    Chosen = function(_super) {
        __extends(Chosen, _super);
        function Chosen() {
            _ref = Chosen.__super__.constructor.apply(this, arguments);
            return _ref;
        }
        Chosen.prototype.setup = function() {
            this.form_field_jq = $(this.form_field);
            this.current_selectedIndex = this.form_field.selectedIndex;
            return this.is_rtl = this.form_field_jq.hasClass("chosen-rtl");
        };
        Chosen.prototype.set_up_html = function() {
            var container_classes, container_props;
            container_classes = [ "chosen-container" ];
            container_classes.push("chosen-container-" + (this.is_multiple ? "multi" : "single"));
            if (this.inherit_select_classes && this.form_field.className) {
                container_classes.push(this.form_field.className);
            }
            if (this.is_rtl) {
                container_classes.push("chosen-rtl");
            }
            container_props = {
                "class": container_classes.join(" "),
                style: "width: " + this.container_width() + ";",
                title: this.form_field.title
            };
            if (this.form_field.id.length) {
                container_props.id = this.form_field.id.replace(/[^\w]/g, "_") + "_chosen";
            }
            this.container = $("<div />", container_props);
            if (this.is_multiple) {
                this.container.html('<ul class="chosen-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><ul class="chosen-results"></ul></div>');
            } else {
                this.container.html('<a class="chosen-single chosen-default" tabindex="-1"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><ul class="chosen-results"></ul></div>');
            }
            this.form_field_jq.hide().after(this.container);
            this.dropdown = this.container.find("div.chosen-drop").first();
            this.search_field = this.container.find("input").first();
            this.search_results = this.container.find("ul.chosen-results").first();
            this.search_field_scale();
            this.search_no_results = this.container.find("li.no-results").first();
            if (this.is_multiple) {
                this.search_choices = this.container.find("ul.chosen-choices").first();
                this.search_container = this.container.find("li.search-field").first();
            } else {
                this.search_container = this.container.find("div.chosen-search").first();
                this.selected_item = this.container.find(".chosen-single").first();
            }
            this.results_build();
            this.set_tab_index();
            return this.set_label_behavior();
        };
        Chosen.prototype.on_ready = function() {
            return this.form_field_jq.trigger("chosen:ready", {
                chosen: this
            });
        };
        Chosen.prototype.register_observers = function() {
            var _this = this;
            this.container.bind("touchstart.chosen", function(evt) {
                _this.container_mousedown(evt);
                return evt.preventDefault();
            });
            this.container.bind("touchend.chosen", function(evt) {
                _this.container_mouseup(evt);
                return evt.preventDefault();
            });
            this.container.bind("mousedown.chosen", function(evt) {
                _this.container_mousedown(evt);
            });
            this.container.bind("mouseup.chosen", function(evt) {
                _this.container_mouseup(evt);
            });
            this.container.bind("mouseenter.chosen", function(evt) {
                _this.mouse_enter(evt);
            });
            this.container.bind("mouseleave.chosen", function(evt) {
                _this.mouse_leave(evt);
            });
            this.search_results.bind("mouseup.chosen", function(evt) {
                _this.search_results_mouseup(evt);
            });
            this.search_results.bind("mouseover.chosen", function(evt) {
                _this.search_results_mouseover(evt);
            });
            this.search_results.bind("mouseout.chosen", function(evt) {
                _this.search_results_mouseout(evt);
            });
            this.search_results.bind("mousewheel.chosen DOMMouseScroll.chosen", function(evt) {
                _this.search_results_mousewheel(evt);
            });
            this.search_results.bind("touchstart.chosen", function(evt) {
                _this.search_results_touchstart(evt);
            });
            this.search_results.bind("touchmove.chosen", function(evt) {
                _this.search_results_touchmove(evt);
            });
            this.search_results.bind("touchend.chosen", function(evt) {
                _this.search_results_touchend(evt);
            });
            this.form_field_jq.bind("chosen:updated.chosen", function(evt) {
                _this.results_update_field(evt);
            });
            this.form_field_jq.bind("chosen:activate.chosen", function(evt) {
                _this.activate_field(evt);
            });
            this.form_field_jq.bind("chosen:open.chosen", function(evt) {
                _this.container_mousedown(evt);
            });
            this.form_field_jq.bind("chosen:close.chosen", function(evt) {
                _this.input_blur(evt);
            });
            this.search_field.bind("blur.chosen", function(evt) {
                _this.input_blur(evt);
            });
            this.search_field.bind("keyup.chosen", function(evt) {
                _this.keyup_checker(evt);
            });
            this.search_field.bind("keydown.chosen", function(evt) {
                _this.keydown_checker(evt);
            });
            this.search_field.bind("focus.chosen", function(evt) {
                _this.input_focus(evt);
            });
            this.search_field.bind("cut.chosen", function(evt) {
                _this.clipboard_event_checker(evt);
            });
            this.search_field.bind("paste.chosen", function(evt) {
                _this.clipboard_event_checker(evt);
            });
            if (this.is_multiple) {
                return this.search_choices.bind("click.chosen", function(evt) {
                    _this.choices_click(evt);
                });
            } else {
                return this.container.bind("click.chosen", function(evt) {
                    evt.preventDefault();
                });
            }
        };
        Chosen.prototype.destroy = function() {
            $(this.container[0].ownerDocument).unbind("click.chosen", this.click_test_action);
            if (this.search_field[0].tabIndex) {
                this.form_field_jq[0].tabIndex = this.search_field[0].tabIndex;
            }
            this.container.remove();
            this.form_field_jq.removeData("chosen");
            return this.form_field_jq.show();
        };
        Chosen.prototype.search_field_disabled = function() {
            this.is_disabled = this.form_field_jq[0].disabled;
            if (this.is_disabled) {
                this.container.addClass("chosen-disabled");
                this.search_field[0].disabled = true;
                if (!this.is_multiple) {
                    this.selected_item.unbind("focus.chosen", this.activate_action);
                }
                return this.close_field();
            } else {
                this.container.removeClass("chosen-disabled");
                this.search_field[0].disabled = false;
                if (!this.is_multiple) {
                    return this.selected_item.bind("focus.chosen", this.activate_action);
                }
            }
        };
        Chosen.prototype.container_mousedown = function(evt) {
            if (!this.is_disabled) {
                if (evt && evt.type === "mousedown" && !this.results_showing) {
                    evt.preventDefault();
                }
                if (!(evt != null && $(evt.target).hasClass("search-choice-close"))) {
                    if (!this.active_field) {
                        if (this.is_multiple) {
                            this.search_field.val("");
                        }
                        $(this.container[0].ownerDocument).bind("click.chosen", this.click_test_action);
                        this.results_show();
                    } else if (!this.is_multiple && evt && ($(evt.target)[0] === this.selected_item[0] || $(evt.target).parents("a.chosen-single").length)) {
                        evt.preventDefault();
                        this.results_toggle();
                    }
                    return this.activate_field();
                }
            }
        };
        Chosen.prototype.container_mouseup = function(evt) {
            if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
                return this.results_reset(evt);
            }
        };
        Chosen.prototype.search_results_mousewheel = function(evt) {
            var delta;
            if (evt.originalEvent) {
                delta = evt.originalEvent.deltaY || -evt.originalEvent.wheelDelta || evt.originalEvent.detail;
            }
            if (delta != null) {
                evt.preventDefault();
                if (evt.type === "DOMMouseScroll") {
                    delta = delta * 40;
                }
                return this.search_results.scrollTop(delta + this.search_results.scrollTop());
            }
        };
        Chosen.prototype.blur_test = function(evt) {
            if (!this.active_field && this.container.hasClass("chosen-container-active")) {
                return this.close_field();
            }
        };
        Chosen.prototype.close_field = function() {
            $(this.container[0].ownerDocument).unbind("click.chosen", this.click_test_action);
            this.active_field = false;
            this.results_hide();
            this.container.removeClass("chosen-container-active");
            this.clear_backstroke();
            this.show_search_field_default();
            return this.search_field_scale();
        };
        Chosen.prototype.activate_field = function() {
            this.container.addClass("chosen-container-active");
            this.active_field = true;
            this.search_field.val(this.search_field.val());
            return this.search_field.focus();
        };
        Chosen.prototype.test_active_click = function(evt) {
            var active_container;
            active_container = $(evt.target).closest(".chosen-container");
            if (active_container.length && this.container[0] === active_container[0]) {
                return this.active_field = true;
            } else {
                return this.close_field();
            }
        };
        Chosen.prototype.results_build = function() {
            this.parsing = true;
            this.selected_option_count = null;
            this.results_data = SelectParser.select_to_array(this.form_field);
            if (this.is_multiple) {
                this.search_choices.find("li.search-choice").remove();
            } else if (!this.is_multiple) {
                this.single_set_selected_text();
                if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
                    this.search_field[0].readOnly = true;
                    this.container.addClass("chosen-container-single-nosearch");
                } else {
                    this.search_field[0].readOnly = false;
                    this.container.removeClass("chosen-container-single-nosearch");
                }
            }
            this.update_results_content(this.results_option_build({
                first: true
            }));
            this.search_field_disabled();
            this.show_search_field_default();
            this.search_field_scale();
            return this.parsing = false;
        };
        Chosen.prototype.result_do_highlight = function(el) {
            var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
            if (el.length) {
                this.result_clear_highlight();
                this.result_highlight = el;
                this.result_highlight.addClass("highlighted");
                maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
                visible_top = this.search_results.scrollTop();
                visible_bottom = maxHeight + visible_top;
                high_top = this.result_highlight.position().top + this.search_results.scrollTop();
                high_bottom = high_top + this.result_highlight.outerHeight();
                if (high_bottom >= visible_bottom) {
                    return this.search_results.scrollTop(high_bottom - maxHeight > 0 ? high_bottom - maxHeight : 0);
                } else if (high_top < visible_top) {
                    return this.search_results.scrollTop(high_top);
                }
            }
        };
        Chosen.prototype.result_clear_highlight = function() {
            if (this.result_highlight) {
                this.result_highlight.removeClass("highlighted");
            }
            return this.result_highlight = null;
        };
        Chosen.prototype.results_show = function() {
            if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
                this.form_field_jq.trigger("chosen:maxselected", {
                    chosen: this
                });
                return false;
            }
            this.container.addClass("chosen-with-drop");
            this.results_showing = true;
            this.search_field.focus();
            this.search_field.val(this.search_field.val());
            this.winnow_results();
            return this.form_field_jq.trigger("chosen:showing_dropdown", {
                chosen: this
            });
        };
        Chosen.prototype.update_results_content = function(content) {
            return this.search_results.html(content);
        };
        Chosen.prototype.results_hide = function() {
            if (this.results_showing) {
                this.result_clear_highlight();
                this.container.removeClass("chosen-with-drop");
                this.form_field_jq.trigger("chosen:hiding_dropdown", {
                    chosen: this
                });
            }
            return this.results_showing = false;
        };
        Chosen.prototype.set_tab_index = function(el) {
            var ti;
            if (this.form_field.tabIndex) {
                ti = this.form_field.tabIndex;
                this.form_field.tabIndex = -1;
                return this.search_field[0].tabIndex = ti;
            }
        };
        Chosen.prototype.set_label_behavior = function() {
            var _this = this;
            this.form_field_label = this.form_field_jq.parents("label");
            if (!this.form_field_label.length && this.form_field.id.length) {
                this.form_field_label = $("label[for='" + this.form_field.id + "']");
            }
            if (this.form_field_label.length > 0) {
                return this.form_field_label.bind("click.chosen", function(evt) {
                    if (_this.is_multiple) {
                        return _this.container_mousedown(evt);
                    } else {
                        return _this.activate_field();
                    }
                });
            }
        };
        Chosen.prototype.show_search_field_default = function() {
            if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
                this.search_field.val(this.default_text);
                return this.search_field.addClass("default");
            } else {
                this.search_field.val("");
                return this.search_field.removeClass("default");
            }
        };
        Chosen.prototype.search_results_mouseup = function(evt) {
            var target;
            target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
            if (target.length) {
                this.result_highlight = target;
                this.result_select(evt);
                return this.search_field.focus();
            }
        };
        Chosen.prototype.search_results_mouseover = function(evt) {
            var target;
            target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
            if (target) {
                return this.result_do_highlight(target);
            }
        };
        Chosen.prototype.search_results_mouseout = function(evt) {
            if ($(evt.target).hasClass("active-result" || $(evt.target).parents(".active-result").first())) {
                return this.result_clear_highlight();
            }
        };
        Chosen.prototype.choice_build = function(item) {
            var choice, close_link, _this = this;
            choice = $("<li />", {
                "class": "search-choice"
            }).html("<span>" + this.choice_label(item) + "</span>");
            if (item.disabled) {
                choice.addClass("search-choice-disabled");
            } else {
                close_link = $("<a />", {
                    "class": "search-choice-close",
                    "data-option-array-index": item.array_index
                });
                close_link.bind("click.chosen", function(evt) {
                    return _this.choice_destroy_link_click(evt);
                });
                choice.append(close_link);
            }
            return this.search_container.before(choice);
        };
        Chosen.prototype.choice_destroy_link_click = function(evt) {
            evt.preventDefault();
            evt.stopPropagation();
            if (!this.is_disabled) {
                return this.choice_destroy($(evt.target));
            }
        };
        Chosen.prototype.choice_destroy = function(link) {
            if (this.result_deselect(link[0].getAttribute("data-option-array-index"))) {
                this.show_search_field_default();
                if (this.is_multiple && this.choices_count() > 0 && this.search_field.val().length < 1) {
                    this.results_hide();
                }
                link.parents("li").first().remove();
                return this.search_field_scale();
            }
        };
        Chosen.prototype.results_reset = function() {
            this.reset_single_select_options();
            this.form_field.options[0].selected = true;
            this.single_set_selected_text();
            this.show_search_field_default();
            this.results_reset_cleanup();
            this.form_field_jq.trigger("change");
            if (this.active_field) {
                return this.results_hide();
            }
        };
        Chosen.prototype.results_reset_cleanup = function() {
            this.current_selectedIndex = this.form_field.selectedIndex;
            return this.selected_item.find("abbr").remove();
        };
        Chosen.prototype.result_select = function(evt) {
            var high, item;
            if (this.result_highlight) {
                high = this.result_highlight;
                this.result_clear_highlight();
                if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
                    this.form_field_jq.trigger("chosen:maxselected", {
                        chosen: this
                    });
                    return false;
                }
                if (this.is_multiple) {
                    high.removeClass("active-result");
                } else {
                    this.reset_single_select_options();
                }
                high.addClass("result-selected");
                item = this.results_data[high[0].getAttribute("data-option-array-index")];
                item.selected = true;
                this.form_field.options[item.options_index].selected = true;
                this.selected_option_count = null;
                if (this.is_multiple) {
                    this.choice_build(item);
                } else {
                    this.single_set_selected_text(this.choice_label(item));
                }
                if (!((evt.metaKey || evt.ctrlKey) && this.is_multiple)) {
                    this.results_hide();
                }
                this.search_field.val("");
                if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {
                    this.form_field_jq.trigger("change", {
                        selected: this.form_field.options[item.options_index].value
                    });
                }
                this.current_selectedIndex = this.form_field.selectedIndex;
                evt.preventDefault();
                return this.search_field_scale();
            }
        };
        Chosen.prototype.single_set_selected_text = function(text) {
            if (text == null) {
                text = this.default_text;
            }
            if (text === this.default_text) {
                this.selected_item.addClass("chosen-default");
            } else {
                this.single_deselect_control_build();
                this.selected_item.removeClass("chosen-default");
            }
            return this.selected_item.find("span").html(text);
        };
        Chosen.prototype.result_deselect = function(pos) {
            var result_data;
            result_data = this.results_data[pos];
            if (!this.form_field.options[result_data.options_index].disabled) {
                result_data.selected = false;
                this.form_field.options[result_data.options_index].selected = false;
                this.selected_option_count = null;
                this.result_clear_highlight();
                if (this.results_showing) {
                    this.winnow_results();
                }
                this.form_field_jq.trigger("change", {
                    deselected: this.form_field.options[result_data.options_index].value
                });
                this.search_field_scale();
                return true;
            } else {
                return false;
            }
        };
        Chosen.prototype.single_deselect_control_build = function() {
            if (!this.allow_single_deselect) {
                return;
            }
            if (!this.selected_item.find("abbr").length) {
                this.selected_item.find("span").first().after('<abbr class="search-choice-close"></abbr>');
            }
            return this.selected_item.addClass("chosen-single-with-deselect");
        };
        Chosen.prototype.get_search_text = function() {
            return $("<div/>").text($.trim(this.search_field.val())).html();
        };
        Chosen.prototype.winnow_results_set_highlight = function() {
            var do_high, selected_results;
            selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
            do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
            if (do_high != null) {
                return this.result_do_highlight(do_high);
            }
        };
        Chosen.prototype.no_results = function(terms) {
            var no_results_html;
            no_results_html = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>');
            no_results_html.find("span").first().html(terms);
            this.search_results.append(no_results_html);
            return this.form_field_jq.trigger("chosen:no_results", {
                chosen: this
            });
        };
        Chosen.prototype.no_results_clear = function() {
            return this.search_results.find(".no-results").remove();
        };
        Chosen.prototype.keydown_arrow = function() {
            var next_sib;
            if (this.results_showing && this.result_highlight) {
                next_sib = this.result_highlight.nextAll("li.active-result").first();
                if (next_sib) {
                    return this.result_do_highlight(next_sib);
                }
            } else {
                return this.results_show();
            }
        };
        Chosen.prototype.keyup_arrow = function() {
            var prev_sibs;
            if (!this.results_showing && !this.is_multiple) {
                return this.results_show();
            } else if (this.result_highlight) {
                prev_sibs = this.result_highlight.prevAll("li.active-result");
                if (prev_sibs.length) {
                    return this.result_do_highlight(prev_sibs.first());
                } else {
                    if (this.choices_count() > 0) {
                        this.results_hide();
                    }
                    return this.result_clear_highlight();
                }
            }
        };
        Chosen.prototype.keydown_backstroke = function() {
            var next_available_destroy;
            if (this.pending_backstroke) {
                this.choice_destroy(this.pending_backstroke.find("a").first());
                return this.clear_backstroke();
            } else {
                next_available_destroy = this.search_container.siblings("li.search-choice").last();
                if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
                    this.pending_backstroke = next_available_destroy;
                    if (this.single_backstroke_delete) {
                        return this.keydown_backstroke();
                    } else {
                        return this.pending_backstroke.addClass("search-choice-focus");
                    }
                }
            }
        };
        Chosen.prototype.clear_backstroke = function() {
            if (this.pending_backstroke) {
                this.pending_backstroke.removeClass("search-choice-focus");
            }
            return this.pending_backstroke = null;
        };
        Chosen.prototype.keydown_checker = function(evt) {
            var stroke, _ref1;
            stroke = (_ref1 = evt.which) != null ? _ref1 : evt.keyCode;
            this.search_field_scale();
            if (stroke !== 8 && this.pending_backstroke) {
                this.clear_backstroke();
            }
            switch (stroke) {
              case 8:
                this.backstroke_length = this.search_field.val().length;
                break;

              case 9:
                if (this.results_showing && !this.is_multiple) {
                    this.result_select(evt);
                }
                this.mouse_on_container = false;
                break;

              case 13:
                if (this.results_showing) {
                    evt.preventDefault();
                }
                break;

              case 32:
                if (this.disable_search) {
                    evt.preventDefault();
                }
                break;

              case 38:
                evt.preventDefault();
                this.keyup_arrow();
                break;

              case 40:
                evt.preventDefault();
                this.keydown_arrow();
                break;
            }
        };
        Chosen.prototype.search_field_scale = function() {
            var div, f_width, h, style, style_block, styles, w, _i, _len;
            if (this.is_multiple) {
                h = 0;
                w = 0;
                style_block = "position:absolute; left: -1000px; top: -1000px; display:none;";
                styles = [ "font-size", "font-style", "font-weight", "font-family", "line-height", "text-transform", "letter-spacing" ];
                for (_i = 0, _len = styles.length; _i < _len; _i++) {
                    style = styles[_i];
                    style_block += style + ":" + this.search_field.css(style) + ";";
                }
                div = $("<div />", {
                    style: style_block
                });
                div.text(this.search_field.val());
                $("body").append(div);
                w = div.width() + 25;
                div.remove();
                f_width = this.container.outerWidth();
                if (w > f_width - 10) {
                    w = f_width - 10;
                }
                return this.search_field.css({
                    width: w + "px"
                });
            }
        };
        return Chosen;
    }(AbstractChosen);
}).call(this);

(function(core) {
    if (typeof define == "function" && define.amd) {
        // AMD
        define("uikit", function() {
            var uikit = window.UIkit || core(window, window.jQuery, window.document);
            uikit.load = function(res, req, onload, config) {
                var resources = res.split(","), load = [], i, base = (config.config && config.config.uikit && config.config.uikit.base ? config.config.uikit.base : "").replace(/\/+$/g, "");
                if (!base) {
                    throw new Error("Please define base path to UIkit in the requirejs config.");
                }
                for (i = 0; i < resources.length; i += 1) {
                    var resource = resources[i].replace(/\./g, "/");
                    load.push(base + "/components/" + resource);
                }
                req(load, function() {
                    onload(uikit);
                });
            };
            return uikit;
        });
    }
    if (!window.jQuery) {
        throw new Error("UIkit requires jQuery");
    }
    if (window && window.jQuery) {
        core(window, window.jQuery, window.document);
    }
})(function(global, $, doc) {
    "use strict";
    var UI = {}, _UI = global.UIkit ? Object.create(global.UIkit) : undefined;
    UI.version = "2.21.0";
    UI.noConflict = function() {
        // restore UIkit version
        if (_UI) {
            global.UIkit = _UI;
            $.UIkit = _UI;
            $.fn.uk = _UI.fn;
        }
        return UI;
    };
    UI.prefix = function(str) {
        return str;
    };
    // cache jQuery
    UI.$ = $;
    UI.$doc = UI.$(document);
    UI.$win = UI.$(window);
    UI.$html = UI.$("html");
    UI.support = {};
    UI.support.transition = function() {
        var transitionEnd = function() {
            var element = doc.body || doc.documentElement, transEndEventNames = {
                WebkitTransition: "webkitTransitionEnd",
                MozTransition: "transitionend",
                OTransition: "oTransitionEnd otransitionend",
                transition: "transitionend"
            }, name;
            for (name in transEndEventNames) {
                if (element.style[name] !== undefined) return transEndEventNames[name];
            }
        }();
        return transitionEnd && {
            end: transitionEnd
        };
    }();
    UI.support.animation = function() {
        var animationEnd = function() {
            var element = doc.body || doc.documentElement, animEndEventNames = {
                WebkitAnimation: "webkitAnimationEnd",
                MozAnimation: "animationend",
                OAnimation: "oAnimationEnd oanimationend",
                animation: "animationend"
            }, name;
            for (name in animEndEventNames) {
                if (element.style[name] !== undefined) return animEndEventNames[name];
            }
        }();
        return animationEnd && {
            end: animationEnd
        };
    }();
    // requestAnimationFrame polyfill
    // https://gist.github.com/paulirish/1579671
    (function() {
        var lastTime = 0;
        global.requestAnimationFrame = global.requestAnimationFrame || global.webkitRequestAnimationFrame || function(callback, element) {
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
            var id = global.setTimeout(function() {
                callback(currTime + timeToCall);
            }, timeToCall);
            lastTime = currTime + timeToCall;
            return id;
        };
        if (!global.cancelAnimationFrame) {
            global.cancelAnimationFrame = function(id) {
                clearTimeout(id);
            };
        }
    })();
    UI.support.touch = "ontouchstart" in document || global.DocumentTouch && document instanceof global.DocumentTouch || global.navigator.msPointerEnabled && global.navigator.msMaxTouchPoints > 0 || //IE 10
    global.navigator.pointerEnabled && global.navigator.maxTouchPoints > 0 || //IE >=11
    false;
    UI.support.mutationobserver = global.MutationObserver || global.WebKitMutationObserver || null;
    UI.Utils = {};
    UI.Utils.isFullscreen = function() {
        return document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement || document.fullscreenElement || false;
    };
    UI.Utils.str2json = function(str, notevil) {
        try {
            if (notevil) {
                return JSON.parse(str.replace(/([\$\w]+)\s*:/g, function(_, $1) {
                    return '"' + $1 + '":';
                }).replace(/'([^']+)'/g, function(_, $1) {
                    return '"' + $1 + '"';
                }));
            } else {
                return new Function("", "var json = " + str + "; return JSON.parse(JSON.stringify(json));")();
            }
        } catch (e) {
            return false;
        }
    };
    UI.Utils.debounce = function(func, wait, immediate) {
        var timeout;
        return function() {
            var context = this, args = arguments;
            var later = function() {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
        };
    };
    UI.Utils.removeCssRules = function(selectorRegEx) {
        var idx, idxs, stylesheet, _i, _j, _k, _len, _len1, _len2, _ref;
        if (!selectorRegEx) return;
        setTimeout(function() {
            try {
                _ref = document.styleSheets;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    stylesheet = _ref[_i];
                    idxs = [];
                    stylesheet.cssRules = stylesheet.cssRules;
                    for (idx = _j = 0, _len1 = stylesheet.cssRules.length; _j < _len1; idx = ++_j) {
                        if (stylesheet.cssRules[idx].type === CSSRule.STYLE_RULE && selectorRegEx.test(stylesheet.cssRules[idx].selectorText)) {
                            idxs.unshift(idx);
                        }
                    }
                    for (_k = 0, _len2 = idxs.length; _k < _len2; _k++) {
                        stylesheet.deleteRule(idxs[_k]);
                    }
                }
            } catch (_error) {}
        }, 0);
    };
    UI.Utils.isInView = function(element, options) {
        var $element = $(element);
        if (!$element.is(":visible")) {
            return false;
        }
        var window_left = UI.$win.scrollLeft(), window_top = UI.$win.scrollTop(), offset = $element.offset(), left = offset.left, top = offset.top;
        options = $.extend({
            topoffset: 0,
            leftoffset: 0
        }, options);
        if (top + $element.height() >= window_top && top - options.topoffset <= window_top + UI.$win.height() && left + $element.width() >= window_left && left - options.leftoffset <= window_left + UI.$win.width()) {
            return true;
        } else {
            return false;
        }
    };
    UI.Utils.checkDisplay = function(context, initanimation) {
        var elements = UI.$("[data-uk-margin], [data-uk-grid-match], [data-uk-grid-margin], [data-uk-check-display]", context || document), animated;
        if (context && !elements.length) {
            elements = $(context);
        }
        elements.trigger("display.uk.check");
        // fix firefox / IE animations
        if (initanimation) {
            if (typeof initanimation != "string") {
                initanimation = '[class*="uk-animation-"]';
            }
            elements.find(initanimation).each(function() {
                var ele = UI.$(this), cls = ele.attr("class"), anim = cls.match(/uk\-animation\-(.+)/);
                ele.removeClass(anim[0]).width();
                ele.addClass(anim[0]);
            });
        }
        return elements;
    };
    UI.Utils.options = function(string) {
        if ($.isPlainObject(string)) return string;
        var start = string ? string.indexOf("{") : -1, options = {};
        if (start != -1) {
            try {
                options = UI.Utils.str2json(string.substr(start));
            } catch (e) {}
        }
        return options;
    };
    UI.Utils.animate = function(element, cls) {
        var d = $.Deferred();
        element = UI.$(element);
        cls = cls;
        element.css("display", "none").addClass(cls).one(UI.support.animation.end, function() {
            element.removeClass(cls);
            d.resolve();
        }).width();
        element.css("display", "");
        return d.promise();
    };
    UI.Utils.uid = function(prefix) {
        return (prefix || "id") + new Date().getTime() + "RAND" + Math.ceil(Math.random() * 1e5);
    };
    UI.Utils.template = function(str, data) {
        var tokens = str.replace(/\n/g, "\\n").replace(/\{\{\{\s*(.+?)\s*\}\}\}/g, "{{!$1}}").split(/(\{\{\s*(.+?)\s*\}\})/g), i = 0, toc, cmd, prop, val, fn, output = [], openblocks = 0;
        while (i < tokens.length) {
            toc = tokens[i];
            if (toc.match(/\{\{\s*(.+?)\s*\}\}/)) {
                i = i + 1;
                toc = tokens[i];
                cmd = toc[0];
                prop = toc.substring(toc.match(/^(\^|\#|\!|\~|\:)/) ? 1 : 0);
                switch (cmd) {
                  case "~":
                    output.push("for(var $i=0;$i<" + prop + ".length;$i++) { var $item = " + prop + "[$i];");
                    openblocks++;
                    break;

                  case ":":
                    output.push("for(var $key in " + prop + ") { var $val = " + prop + "[$key];");
                    openblocks++;
                    break;

                  case "#":
                    output.push("if(" + prop + ") {");
                    openblocks++;
                    break;

                  case "^":
                    output.push("if(!" + prop + ") {");
                    openblocks++;
                    break;

                  case "/":
                    output.push("}");
                    openblocks--;
                    break;

                  case "!":
                    output.push("__ret.push(" + prop + ");");
                    break;

                  default:
                    output.push("__ret.push(escape(" + prop + "));");
                    break;
                }
            } else {
                output.push("__ret.push('" + toc.replace(/\'/g, "\\'") + "');");
            }
            i = i + 1;
        }
        fn = new Function("$data", [ "var __ret = [];", "try {", "with($data){", !openblocks ? output.join("") : '__ret = ["Not all blocks are closed correctly."]', "};", "}catch(e){__ret = [e.message];}", 'return __ret.join("").replace(/\\n\\n/g, "\\n");', "function escape(html) { return String(html).replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');}" ].join("\n"));
        return data ? fn(data) : fn;
    };
    UI.Utils.events = {};
    UI.Utils.events.click = UI.support.touch ? "tap" : "click";
    global.UIkit = UI;
    // deprecated
    UI.fn = function(command, options) {
        var args = arguments, cmd = command.match(/^([a-z\-]+)(?:\.([a-z]+))?/i), component = cmd[1], method = cmd[2];
        if (!UI[component]) {
            $.error("UIkit component [" + component + "] does not exist.");
            return this;
        }
        return this.each(function() {
            var $this = $(this), data = $this.data(component);
            if (!data) $this.data(component, data = UI[component](this, method ? undefined : options));
            if (method) data[method].apply(data, Array.prototype.slice.call(args, 1));
        });
    };
    $.UIkit = UI;
    $.fn.uk = UI.fn;
    UI.langdirection = UI.$html.attr("dir") == "rtl" ? "right" : "left";
    UI.components = {};
    UI.component = function(name, def) {
        var fn = function(element, options) {
            var $this = this;
            this.UIkit = UI;
            this.element = element ? UI.$(element) : null;
            this.options = $.extend(true, {}, this.defaults, options);
            this.plugins = {};
            if (this.element) {
                this.element.data(name, this);
            }
            this.init();
            (this.options.plugins.length ? this.options.plugins : Object.keys(fn.plugins)).forEach(function(plugin) {
                if (fn.plugins[plugin].init) {
                    fn.plugins[plugin].init($this);
                    $this.plugins[plugin] = true;
                }
            });
            this.trigger("init.uk.component", [ name, this ]);
            return this;
        };
        fn.plugins = {};
        $.extend(true, fn.prototype, {
            defaults: {
                plugins: []
            },
            boot: function() {},
            init: function() {},
            on: function(a1, a2, a3) {
                return UI.$(this.element || this).on(a1, a2, a3);
            },
            one: function(a1, a2, a3) {
                return UI.$(this.element || this).one(a1, a2, a3);
            },
            off: function(evt) {
                return UI.$(this.element || this).off(evt);
            },
            trigger: function(evt, params) {
                return UI.$(this.element || this).trigger(evt, params);
            },
            find: function(selector) {
                return UI.$(this.element ? this.element : []).find(selector);
            },
            proxy: function(obj, methods) {
                var $this = this;
                methods.split(" ").forEach(function(method) {
                    if (!$this[method]) $this[method] = function() {
                        return obj[method].apply(obj, arguments);
                    };
                });
            },
            mixin: function(obj, methods) {
                var $this = this;
                methods.split(" ").forEach(function(method) {
                    if (!$this[method]) $this[method] = obj[method].bind($this);
                });
            },
            option: function() {
                if (arguments.length == 1) {
                    return this.options[arguments[0]] || undefined;
                } else if (arguments.length == 2) {
                    this.options[arguments[0]] = arguments[1];
                }
            }
        }, def);
        this.components[name] = fn;
        this[name] = function() {
            var element, options;
            if (arguments.length) {
                switch (arguments.length) {
                  case 1:
                    if (typeof arguments[0] === "string" || arguments[0].nodeType || arguments[0] instanceof jQuery) {
                        element = $(arguments[0]);
                    } else {
                        options = arguments[0];
                    }
                    break;

                  case 2:
                    element = $(arguments[0]);
                    options = arguments[1];
                    break;
                }
            }
            if (element && element.data(name)) {
                return element.data(name);
            }
            return new UI.components[name](element, options);
        };
        if (UI.domready) {
            UI.component.boot(name);
        }
        return fn;
    };
    UI.plugin = function(component, name, def) {
        this.components[component].plugins[name] = def;
    };
    UI.component.boot = function(name) {
        if (UI.components[name].prototype && UI.components[name].prototype.boot && !UI.components[name].booted) {
            UI.components[name].prototype.boot.apply(UI, []);
            UI.components[name].booted = true;
        }
    };
    UI.component.bootComponents = function() {
        for (var component in UI.components) {
            UI.component.boot(component);
        }
    };
    // DOM mutation save ready helper function
    UI.domObservers = [];
    UI.domready = false;
    UI.ready = function(fn) {
        UI.domObservers.push(fn);
        if (UI.domready) {
            fn(document);
        }
    };
    UI.on = function(a1, a2, a3) {
        if (a1 && a1.indexOf("ready.uk.dom") > -1 && UI.domready) {
            a2.apply(UI.$doc);
        }
        return UI.$doc.on(a1, a2, a3);
    };
    UI.one = function(a1, a2, a3) {
        if (a1 && a1.indexOf("ready.uk.dom") > -1 && UI.domready) {
            a2.apply(UI.$doc);
            return UI.$doc;
        }
        return UI.$doc.one(a1, a2, a3);
    };
    UI.trigger = function(evt, params) {
        return UI.$doc.trigger(evt, params);
    };
    UI.domObserve = function(selector, fn) {
        if (!UI.support.mutationobserver) return;
        fn = fn || function() {};
        UI.$(selector).each(function() {
            var element = this, $element = UI.$(element);
            if ($element.data("observer")) {
                return;
            }
            try {
                var observer = new UI.support.mutationobserver(UI.Utils.debounce(function(mutations) {
                    fn.apply(element, []);
                    $element.trigger("changed.uk.dom");
                }, 50));
                // pass in the target node, as well as the observer options
                observer.observe(element, {
                    childList: true,
                    subtree: true
                });
                $element.data("observer", observer);
            } catch (e) {}
        });
    };
    UI.init = function(root) {
        root = root || document;
        UI.domObservers.forEach(function(fn) {
            fn(root);
        });
    };
    UI.on("domready.uk.dom", function() {
        UI.init();
        if (UI.domready) UI.Utils.checkDisplay();
    });
    $(function() {
        UI.$body = UI.$("body");
        UI.ready(function(context) {
            UI.domObserve("[data-uk-observe]");
        });
        UI.on("changed.uk.dom", function(e) {
            UI.init(e.target);
            UI.Utils.checkDisplay(e.target);
        });
        UI.trigger("beforeready.uk.dom");
        UI.component.bootComponents();
        // custom scroll observer
        setInterval(function() {
            var memory = {
                x: window.pageXOffset,
                y: window.pageYOffset
            }, dir;
            var fn = function() {
                if (memory.x != window.pageXOffset || memory.y != window.pageYOffset) {
                    dir = {
                        x: 0,
                        y: 0
                    };
                    if (window.pageXOffset != memory.x) dir.x = window.pageXOffset > memory.x ? 1 : -1;
                    if (window.pageYOffset != memory.y) dir.y = window.pageYOffset > memory.y ? 1 : -1;
                    memory = {
                        dir: dir,
                        x: window.pageXOffset,
                        y: window.pageYOffset
                    };
                    UI.$doc.trigger("scrolling.uk.document", [ memory ]);
                }
            };
            if (UI.support.touch) {
                UI.$html.on("touchmove touchend MSPointerMove MSPointerUp pointermove pointerup", fn);
            }
            if (memory.x || memory.y) fn();
            return fn;
        }(), 15);
        // run component init functions on dom
        UI.trigger("domready.uk.dom");
        if (UI.support.touch) {
            // remove css hover rules for touch devices
            // UI.Utils.removeCssRules(/\.uk-(?!navbar).*:hover/);
            // viewport unit fix for uk-height-viewport - should be fixed in iOS 8
            if (navigator.userAgent.match(/(iPad|iPhone|iPod)/g)) {
                UI.$win.on("load orientationchange resize", UI.Utils.debounce(function() {
                    var fn = function() {
                        $(".uk-height-viewport").css("height", window.innerHeight);
                        return fn;
                    };
                    return fn();
                }(), 100));
            }
        }
        UI.trigger("afterready.uk.dom");
        // mark that domready is left behind
        UI.domready = true;
    });
    // add touch identifier class
    UI.$html.addClass(UI.support.touch ? "uk-touch" : "uk-notouch");
    // add uk-hover class on tap to support overlays on touch devices
    if (UI.support.touch) {
        var hoverset = false, exclude, hovercls = "uk-hover", selector = ".uk-overlay, .uk-overlay-hover, .uk-overlay-toggle, .uk-animation-hover, .uk-has-hover";
        UI.$html.on("touchstart MSPointerDown pointerdown", selector, function() {
            if (hoverset) $("." + hovercls).removeClass(hovercls);
            hoverset = $(this).addClass(hovercls);
        }).on("touchend MSPointerUp pointerup", function(e) {
            exclude = $(e.target).parents(selector);
            if (hoverset) {
                hoverset.not(exclude).removeClass(hovercls);
            }
        });
    }
    return UI;
});

(function($) {
    if ($.fn.swipeLeft) {
        return;
    }
    var touch = {}, touchTimeout, tapTimeout, swipeTimeout, longTapTimeout, longTapDelay = 750, gesture;
    function swipeDirection(x1, x2, y1, y2) {
        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? x1 - x2 > 0 ? "Left" : "Right" : y1 - y2 > 0 ? "Up" : "Down";
    }
    function longTap() {
        longTapTimeout = null;
        if (touch.last) {
            touch.el.trigger("longTap");
            touch = {};
        }
    }
    function cancelLongTap() {
        if (longTapTimeout) clearTimeout(longTapTimeout);
        longTapTimeout = null;
    }
    function cancelAll() {
        if (touchTimeout) clearTimeout(touchTimeout);
        if (tapTimeout) clearTimeout(tapTimeout);
        if (swipeTimeout) clearTimeout(swipeTimeout);
        if (longTapTimeout) clearTimeout(longTapTimeout);
        touchTimeout = tapTimeout = swipeTimeout = longTapTimeout = null;
        touch = {};
    }
    function isPrimaryTouch(event) {
        return event.pointerType == event.MSPOINTER_TYPE_TOUCH && event.isPrimary;
    }
    $(function() {
        var now, delta, deltaX = 0, deltaY = 0, firstTouch;
        if ("MSGesture" in window) {
            gesture = new MSGesture();
            gesture.target = document.body;
        }
        $(document).on("MSGestureEnd gestureend", function(e) {
            var swipeDirectionFromVelocity = e.originalEvent.velocityX > 1 ? "Right" : e.originalEvent.velocityX < -1 ? "Left" : e.originalEvent.velocityY > 1 ? "Down" : e.originalEvent.velocityY < -1 ? "Up" : null;
            if (swipeDirectionFromVelocity) {
                touch.el.trigger("swipe");
                touch.el.trigger("swipe" + swipeDirectionFromVelocity);
            }
        }).on("touchstart MSPointerDown pointerdown", function(e) {
            if (e.type == "MSPointerDown" && !isPrimaryTouch(e.originalEvent)) return;
            firstTouch = e.type == "MSPointerDown" || e.type == "pointerdown" ? e : e.originalEvent.touches[0];
            now = Date.now();
            delta = now - (touch.last || now);
            touch.el = $("tagName" in firstTouch.target ? firstTouch.target : firstTouch.target.parentNode);
            if (touchTimeout) clearTimeout(touchTimeout);
            touch.x1 = firstTouch.pageX;
            touch.y1 = firstTouch.pageY;
            if (delta > 0 && delta <= 250) touch.isDoubleTap = true;
            touch.last = now;
            longTapTimeout = setTimeout(longTap, longTapDelay);
            // adds the current touch contact for IE gesture recognition
            if (gesture && (e.type == "MSPointerDown" || e.type == "pointerdown" || e.type == "touchstart")) {
                gesture.addPointer(e.originalEvent.pointerId);
            }
        }).on("touchmove MSPointerMove pointermove", function(e) {
            if (e.type == "MSPointerMove" && !isPrimaryTouch(e.originalEvent)) return;
            firstTouch = e.type == "MSPointerMove" || e.type == "pointermove" ? e : e.originalEvent.touches[0];
            cancelLongTap();
            touch.x2 = firstTouch.pageX;
            touch.y2 = firstTouch.pageY;
            deltaX += Math.abs(touch.x1 - touch.x2);
            deltaY += Math.abs(touch.y1 - touch.y2);
        }).on("touchend MSPointerUp pointerup", function(e) {
            if (e.type == "MSPointerUp" && !isPrimaryTouch(e.originalEvent)) return;
            cancelLongTap();
            // swipe
            if (touch.x2 && Math.abs(touch.x1 - touch.x2) > 30 || touch.y2 && Math.abs(touch.y1 - touch.y2) > 30) {
                swipeTimeout = setTimeout(function() {
                    touch.el.trigger("swipe");
                    touch.el.trigger("swipe" + swipeDirection(touch.x1, touch.x2, touch.y1, touch.y2));
                    touch = {};
                }, 0);
            } else if ("last" in touch) {
                // don't fire tap when delta position changed by more than 30 pixels,
                // for instance when moving to a point and back to origin
                if (isNaN(deltaX) || deltaX < 30 && deltaY < 30) {
                    // delay by one tick so we can cancel the 'tap' event if 'scroll' fires
                    // ('tap' fires before 'scroll')
                    tapTimeout = setTimeout(function() {
                        // trigger universal 'tap' with the option to cancelTouch()
                        // (cancelTouch cancels processing of single vs double taps for faster 'tap' response)
                        var event = $.Event("tap");
                        event.cancelTouch = cancelAll;
                        touch.el.trigger(event);
                        // trigger double tap immediately
                        if (touch.isDoubleTap) {
                            touch.el.trigger("doubleTap");
                            touch = {};
                        } else {
                            touchTimeout = setTimeout(function() {
                                touchTimeout = null;
                                touch.el.trigger("singleTap");
                                touch = {};
                            }, 250);
                        }
                    }, 0);
                } else {
                    touch = {};
                }
                deltaX = deltaY = 0;
            }
        }).on("touchcancel MSPointerCancel", cancelAll);
        // scrolling the window indicates intention of the user
        // to scroll, not tap or swipe, so cancel all ongoing events
        $(window).on("scroll", cancelAll);
    });
    [ "swipe", "swipeLeft", "swipeRight", "swipeUp", "swipeDown", "doubleTap", "tap", "singleTap", "longTap" ].forEach(function(eventName) {
        $.fn[eventName] = function(callback) {
            return $(this).on(eventName, callback);
        };
    });
})(jQuery);

(function(UI) {
    "use strict";
    var stacks = [];
    UI.component("stackMargin", {
        defaults: {
            cls: "uk-margin-small-top"
        },
        boot: function() {
            // init code
            UI.ready(function(context) {
                UI.$("[data-uk-margin]", context).each(function() {
                    var ele = UI.$(this), obj;
                    if (!ele.data("stackMargin")) {
                        obj = UI.stackMargin(ele, UI.Utils.options(ele.attr("data-uk-margin")));
                    }
                });
            });
        },
        init: function() {
            var $this = this;
            this.columns = this.element.children();
            if (!this.columns.length) return;
            UI.$win.on("resize orientationchange", function() {
                var fn = function() {
                    $this.process();
                };
                UI.$(function() {
                    fn();
                    UI.$win.on("load", fn);
                });
                return UI.Utils.debounce(fn, 20);
            }());
            UI.$html.on("changed.uk.dom", function(e) {
                $this.columns = $this.element.children();
                $this.process();
            });
            this.on("display.uk.check", function(e) {
                $this.columns = $this.element.children();
                if (this.element.is(":visible")) this.process();
            }.bind(this));
            stacks.push(this);
        },
        process: function() {
            var $this = this;
            UI.Utils.stackMargin(this.columns, this.options);
            return this;
        },
        revert: function() {
            this.columns.removeClass(this.options.cls);
            return this;
        }
    });
    // responsive element e.g. iframes
    (function() {
        var elements = [], check = function(ele) {
            if (!ele.is(":visible")) return;
            var width = ele.parent().width(), iwidth = ele.data("width"), ratio = width / iwidth, height = Math.floor(ratio * ele.data("height"));
            ele.css({
                height: width < iwidth ? height : ele.data("height")
            });
        };
        UI.component("responsiveElement", {
            defaults: {},
            boot: function() {
                // init code
                UI.ready(function(context) {
                    UI.$("iframe.uk-responsive-width, [data-uk-responsive]", context).each(function() {
                        var ele = UI.$(this), obj;
                        if (!ele.data("responsiveIframe")) {
                            obj = UI.responsiveElement(ele, {});
                        }
                    });
                });
            },
            init: function() {
                var ele = this.element;
                if (ele.attr("width") && ele.attr("height")) {
                    ele.data({
                        width: ele.attr("width"),
                        height: ele.attr("height")
                    }).on("display.uk.check", function() {
                        check(ele);
                    });
                    check(ele);
                    elements.push(ele);
                }
            }
        });
        UI.$win.on("resize load", UI.Utils.debounce(function() {
            elements.forEach(function(ele) {
                check(ele);
            });
        }, 15));
    })();
    // helper
    UI.Utils.stackMargin = function(elements, options) {
        options = UI.$.extend({
            cls: "uk-margin-small-top"
        }, options);
        options.cls = options.cls;
        elements = UI.$(elements).removeClass(options.cls);
        var skip = false, firstvisible = elements.filter(":visible:first"), offset = firstvisible.length ? firstvisible.position().top + firstvisible.outerHeight() - 1 : false;
        // (-1): weird firefox bug when parent container is display:flex
        if (offset === false) return;
        elements.each(function() {
            var column = UI.$(this);
            if (column.is(":visible")) {
                if (skip) {
                    column.addClass(options.cls);
                } else {
                    if (column.position().top >= offset) {
                        skip = column.addClass(options.cls);
                    }
                }
            }
        });
    };
    UI.Utils.matchHeights = function(elements, options) {
        elements = UI.$(elements).css("min-height", "");
        options = UI.$.extend({
            row: true
        }, options);
        var matchHeights = function(group) {
            if (group.length < 2) return;
            var max = 0;
            group.each(function() {
                max = Math.max(max, UI.$(this).outerHeight());
            }).each(function() {
                var element = UI.$(this), height = max - (element.css("box-sizing") == "border-box" ? 0 : element.outerHeight() - element.height());
                element.css("min-height", height + "px");
            });
        };
        if (options.row) {
            elements.first().width();
            // force redraw
            setTimeout(function() {
                var lastoffset = false, group = [];
                elements.each(function() {
                    var ele = UI.$(this), offset = ele.offset().top;
                    if (offset != lastoffset && group.length) {
                        matchHeights(UI.$(group));
                        group = [];
                        offset = ele.offset().top;
                    }
                    group.push(ele);
                    lastoffset = offset;
                });
                if (group.length) {
                    matchHeights(UI.$(group));
                }
            }, 0);
        } else {
            matchHeights(elements);
        }
    };
})(UIkit);

(function(UI) {
    "use strict";
    UI.component("smoothScroll", {
        boot: function() {
            // init code
            UI.$html.on("click.smooth-scroll.uikit", "[data-uk-smooth-scroll]", function(e) {
                var ele = UI.$(this);
                if (!ele.data("smoothScroll")) {
                    var obj = UI.smoothScroll(ele, UI.Utils.options(ele.attr("data-uk-smooth-scroll")));
                    ele.trigger("click");
                }
                return false;
            });
        },
        init: function() {
            var $this = this;
            this.on("click", function(e) {
                e.preventDefault();
                scrollToElement(UI.$(this.hash).length ? UI.$(this.hash) : UI.$("body"), $this.options);
            });
        }
    });
    function scrollToElement(ele, options) {
        options = UI.$.extend({
            duration: 1e3,
            transition: "easeOutExpo",
            offset: 0,
            complete: function() {}
        }, options);
        // get / set parameters
        var target = ele.offset().top - options.offset, docheight = UI.$doc.height(), winheight = window.innerHeight;
        if (target + winheight > docheight) {
            target = docheight - winheight;
        }
        // animate to target, fire callback when done
        UI.$("html,body").stop().animate({
            scrollTop: target
        }, options.duration, options.transition).promise().done(options.complete);
    }
    UI.Utils.scrollToElement = scrollToElement;
    if (!UI.$.easing.easeOutExpo) {
        UI.$.easing.easeOutExpo = function(x, t, b, c, d) {
            return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
        };
    }
})(UIkit);

(function(UI) {
    "use strict";
    var $win = UI.$win, $doc = UI.$doc, scrollspies = [], checkScrollSpy = function() {
        for (var i = 0; i < scrollspies.length; i++) {
            window.requestAnimationFrame.apply(window, [ scrollspies[i].check ]);
        }
    };
    UI.component("scrollspy", {
        defaults: {
            target: false,
            cls: "uk-scrollspy-inview",
            initcls: "uk-scrollspy-init-inview",
            topoffset: 0,
            leftoffset: 0,
            repeat: false,
            delay: 0
        },
        boot: function() {
            // listen to scroll and resize
            $doc.on("scrolling.uk.document", checkScrollSpy);
            $win.on("load resize orientationchange", UI.Utils.debounce(checkScrollSpy, 50));
            // init code
            UI.ready(function(context) {
                UI.$("[data-uk-scrollspy]", context).each(function() {
                    var element = UI.$(this);
                    if (!element.data("scrollspy")) {
                        var obj = UI.scrollspy(element, UI.Utils.options(element.attr("data-uk-scrollspy")));
                    }
                });
            });
        },
        init: function() {
            var $this = this, inviewstate, initinview, togglecls = this.options.cls.split(/,/), fn = function() {
                var elements = $this.options.target ? $this.element.find($this.options.target) : $this.element, delayIdx = elements.length === 1 ? 1 : 0, toggleclsIdx = 0;
                elements.each(function(idx) {
                    var element = UI.$(this), inviewstate = element.data("inviewstate"), inview = UI.Utils.isInView(element, $this.options), toggle = element.data("ukScrollspyCls") || togglecls[toggleclsIdx].trim();
                    if (inview && !inviewstate && !element.data("scrollspy-idle")) {
                        if (!initinview) {
                            element.addClass($this.options.initcls);
                            $this.offset = element.offset();
                            initinview = true;
                            element.trigger("init.uk.scrollspy");
                        }
                        element.data("scrollspy-idle", setTimeout(function() {
                            element.addClass("uk-scrollspy-inview").toggleClass(toggle).width();
                            element.trigger("inview.uk.scrollspy");
                            element.data("scrollspy-idle", false);
                            element.data("inviewstate", true);
                        }, $this.options.delay * delayIdx));
                        delayIdx++;
                    }
                    if (!inview && inviewstate && $this.options.repeat) {
                        if (element.data("scrollspy-idle")) {
                            clearTimeout(element.data("scrollspy-idle"));
                        }
                        element.removeClass("uk-scrollspy-inview").toggleClass(toggle);
                        element.data("inviewstate", false);
                        element.trigger("outview.uk.scrollspy");
                    }
                    toggleclsIdx = togglecls[toggleclsIdx + 1] ? toggleclsIdx + 1 : 0;
                });
            };
            fn();
            this.check = fn;
            scrollspies.push(this);
        }
    });
    var scrollspynavs = [], checkScrollSpyNavs = function() {
        for (var i = 0; i < scrollspynavs.length; i++) {
            window.requestAnimationFrame.apply(window, [ scrollspynavs[i].check ]);
        }
    };
    UI.component("scrollspynav", {
        defaults: {
            cls: "uk-active",
            closest: false,
            topoffset: 0,
            leftoffset: 0,
            smoothscroll: false
        },
        boot: function() {
            // listen to scroll and resize
            $doc.on("scrolling.uk.document", checkScrollSpyNavs);
            $win.on("resize orientationchange", UI.Utils.debounce(checkScrollSpyNavs, 50));
            // init code
            UI.ready(function(context) {
                UI.$("[data-uk-scrollspy-nav]", context).each(function() {
                    var element = UI.$(this);
                    if (!element.data("scrollspynav")) {
                        var obj = UI.scrollspynav(element, UI.Utils.options(element.attr("data-uk-scrollspy-nav")));
                    }
                });
            });
        },
        init: function() {
            var ids = [], links = this.find("a[href^='#']").each(function() {
                ids.push(UI.$(this).attr("href"));
            }), targets = UI.$(ids.join(",")), clsActive = this.options.cls, clsClosest = this.options.closest || this.options.closest;
            var $this = this, inviews, fn = function() {
                inviews = [];
                for (var i = 0; i < targets.length; i++) {
                    if (UI.Utils.isInView(targets.eq(i), $this.options)) {
                        inviews.push(targets.eq(i));
                    }
                }
                if (inviews.length) {
                    var navitems, scrollTop = $win.scrollTop(), target = function() {
                        for (var i = 0; i < inviews.length; i++) {
                            if (inviews[i].offset().top >= scrollTop) {
                                return inviews[i];
                            }
                        }
                    }();
                    if (!target) return;
                    if ($this.options.closest) {
                        links.closest(clsClosest).removeClass(clsActive);
                        navitems = links.filter("a[href='#" + target.attr("id") + "']").closest(clsClosest).addClass(clsActive);
                    } else {
                        navitems = links.removeClass(clsActive).filter("a[href='#" + target.attr("id") + "']").addClass(clsActive);
                    }
                    $this.element.trigger("inview.uk.scrollspynav", [ target, navitems ]);
                }
            };
            if (this.options.smoothscroll && UI.smoothScroll) {
                links.each(function() {
                    UI.smoothScroll(this, $this.options.smoothscroll);
                });
            }
            fn();
            this.element.data("scrollspynav", this);
            this.check = fn;
            scrollspynavs.push(this);
        }
    });
})(UIkit);

(function(UI) {
    "use strict";
    var toggles = [];
    UI.component("toggle", {
        defaults: {
            target: false,
            cls: "uk-hidden",
            animation: false,
            duration: 200
        },
        boot: function() {
            // init code
            UI.ready(function(context) {
                UI.$("[data-uk-toggle]", context).each(function() {
                    var ele = UI.$(this);
                    if (!ele.data("toggle")) {
                        var obj = UI.toggle(ele, UI.Utils.options(ele.attr("data-uk-toggle")));
                    }
                });
                setTimeout(function() {
                    toggles.forEach(function(toggle) {
                        toggle.getToggles();
                    });
                }, 0);
            });
        },
        init: function() {
            var $this = this;
            this.aria = this.options.cls.indexOf("uk-hidden") !== -1;
            this.getToggles();
            this.on("click", function(e) {
                if ($this.element.is('a[href="#"]')) e.preventDefault();
                $this.toggle();
            });
            toggles.push(this);
        },
        toggle: function() {
            if (!this.totoggle.length) return;
            if (this.options.animation && UI.support.animation) {
                var $this = this, animations = this.options.animation.split(",");
                if (animations.length == 1) {
                    animations[1] = animations[0];
                }
                animations[0] = animations[0].trim();
                animations[1] = animations[1].trim();
                this.totoggle.css("animation-duration", this.options.duration + "ms");
                if (this.totoggle.hasClass(this.options.cls)) {
                    this.totoggle.toggleClass(this.options.cls);
                    this.totoggle.each(function() {
                        UI.Utils.animate(this, animations[0]).then(function() {
                            UI.$(this).css("animation-duration", "");
                            UI.Utils.checkDisplay(this);
                        });
                    });
                } else {
                    this.totoggle.each(function() {
                        UI.Utils.animate(this, animations[1] + " uk-animation-reverse").then(function() {
                            UI.$(this).toggleClass($this.options.cls).css("animation-duration", "");
                            UI.Utils.checkDisplay(this);
                        }.bind(this));
                    });
                }
            } else {
                this.totoggle.toggleClass(this.options.cls);
                UI.Utils.checkDisplay(this.totoggle);
            }
            this.updateAria();
        },
        getToggles: function() {
            this.totoggle = this.options.target ? UI.$(this.options.target) : [];
            this.updateAria();
        },
        updateAria: function() {
            if (this.aria && this.totoggle.length) {
                this.totoggle.each(function() {
                    UI.$(this).attr("aria-hidden", UI.$(this).hasClass("uk-hidden"));
                });
            }
        }
    });
})(UIkit);

(function(UI) {
    "use strict";
    UI.component("alert", {
        defaults: {
            fade: true,
            duration: 200,
            trigger: ".uk-alert-close"
        },
        boot: function() {
            // init code
            UI.$html.on("click.alert.uikit", "[data-uk-alert]", function(e) {
                var ele = UI.$(this);
                if (!ele.data("alert")) {
                    var alert = UI.alert(ele, UI.Utils.options(ele.attr("data-uk-alert")));
                    if (UI.$(e.target).is(alert.options.trigger)) {
                        e.preventDefault();
                        alert.close();
                    }
                }
            });
        },
        init: function() {
            var $this = this;
            this.on("click", this.options.trigger, function(e) {
                e.preventDefault();
                $this.close();
            });
        },
        close: function() {
            var element = this.trigger("close.uk.alert"), removeElement = function() {
                this.trigger("closed.uk.alert").remove();
            }.bind(this);
            if (this.options.fade) {
                element.css("overflow", "hidden").css("max-height", element.height()).animate({
                    height: 0,
                    opacity: 0,
                    "padding-top": 0,
                    "padding-bottom": 0,
                    "margin-top": 0,
                    "margin-bottom": 0
                }, this.options.duration, removeElement);
            } else {
                removeElement();
            }
        }
    });
})(UIkit);

(function(UI) {
    "use strict";
    UI.component("buttonRadio", {
        defaults: {
            target: ".uk-button"
        },
        boot: function() {
            // init code
            UI.$html.on("click.buttonradio.uikit", "[data-uk-button-radio]", function(e) {
                var ele = UI.$(this);
                if (!ele.data("buttonRadio")) {
                    var obj = UI.buttonRadio(ele, UI.Utils.options(ele.attr("data-uk-button-radio"))), target = UI.$(e.target);
                    if (target.is(obj.options.target)) {
                        target.trigger("click");
                    }
                }
            });
        },
        init: function() {
            var $this = this;
            // Init ARIA
            this.find($this.options.target).attr("aria-checked", "false").filter(".uk-active").attr("aria-checked", "true");
            this.on("click", this.options.target, function(e) {
                var ele = UI.$(this);
                if (ele.is('a[href="#"]')) e.preventDefault();
                $this.find($this.options.target).not(ele).removeClass("uk-active").blur();
                ele.addClass("uk-active");
                // Update ARIA
                $this.find($this.options.target).not(ele).attr("aria-checked", "false");
                ele.attr("aria-checked", "true");
                $this.trigger("change.uk.button", [ ele ]);
            });
        },
        getSelected: function() {
            return this.find(".uk-active");
        }
    });
    UI.component("buttonCheckbox", {
        defaults: {
            target: ".uk-button"
        },
        boot: function() {
            UI.$html.on("click.buttoncheckbox.uikit", "[data-uk-button-checkbox]", function(e) {
                var ele = UI.$(this);
                if (!ele.data("buttonCheckbox")) {
                    var obj = UI.buttonCheckbox(ele, UI.Utils.options(ele.attr("data-uk-button-checkbox"))), target = UI.$(e.target);
                    if (target.is(obj.options.target)) {
                        target.trigger("click");
                    }
                }
            });
        },
        init: function() {
            var $this = this;
            // Init ARIA
            this.find($this.options.target).attr("aria-checked", "false").filter(".uk-active").attr("aria-checked", "true");
            this.on("click", this.options.target, function(e) {
                var ele = UI.$(this);
                if (ele.is('a[href="#"]')) e.preventDefault();
                ele.toggleClass("uk-active").blur();
                // Update ARIA
                ele.attr("aria-checked", ele.hasClass("uk-active"));
                $this.trigger("change.uk.button", [ ele ]);
            });
        },
        getSelected: function() {
            return this.find(".uk-active");
        }
    });
    UI.component("button", {
        defaults: {},
        boot: function() {
            UI.$html.on("click.button.uikit", "[data-uk-button]", function(e) {
                var ele = UI.$(this);
                if (!ele.data("button")) {
                    var obj = UI.button(ele, UI.Utils.options(ele.attr("data-uk-button")));
                    ele.trigger("click");
                }
            });
        },
        init: function() {
            var $this = this;
            // Init ARIA
            this.element.attr("aria-pressed", this.element.hasClass("uk-active"));
            this.on("click", function(e) {
                if ($this.element.is('a[href="#"]')) e.preventDefault();
                $this.toggle();
                $this.trigger("change.uk.button", [ $this.element.blur().hasClass("uk-active") ]);
            });
        },
        toggle: function() {
            this.element.toggleClass("uk-active");
            // Update ARIA
            this.element.attr("aria-pressed", this.element.hasClass("uk-active"));
        }
    });
})(UIkit);

(function(UI) {
    "use strict";
    var active = false, hoverIdle;
    UI.component("dropdown", {
        defaults: {
            mode: "hover",
            remaintime: 800,
            justify: false,
            boundary: UI.$win,
            delay: 0,
            hoverDelayIdle: 250
        },
        remainIdle: false,
        boot: function() {
            var triggerevent = UI.support.touch ? "click" : "mouseenter";
            // init code
            UI.$html.on(triggerevent + ".dropdown.uikit", "[data-uk-dropdown]", function(e) {
                var ele = UI.$(this);
                if (!ele.data("dropdown")) {
                    var dropdown = UI.dropdown(ele, UI.Utils.options(ele.attr("data-uk-dropdown")));
                    if (triggerevent == "click" || triggerevent == "mouseenter" && dropdown.options.mode == "hover") {
                        dropdown.element.trigger(triggerevent);
                    }
                    if (dropdown.element.find(".uk-dropdown").length) {
                        e.preventDefault();
                    }
                }
            });
        },
        init: function() {
            var $this = this;
            this.dropdown = this.find(".uk-dropdown");
            this.centered = this.dropdown.hasClass("uk-dropdown-center");
            this.justified = this.options.justify ? UI.$(this.options.justify) : false;
            this.boundary = UI.$(this.options.boundary);
            this.flipped = this.dropdown.hasClass("uk-dropdown-flip");
            if (!this.boundary.length) {
                this.boundary = UI.$win;
            }
            // Init ARIA
            this.element.attr("aria-haspopup", "true");
            this.element.attr("aria-expanded", this.element.hasClass("uk-open"));
            if (this.options.mode == "click" || UI.support.touch) {
                this.on("click.uikit.dropdown", function(e) {
                    var $target = UI.$(e.target);
                    if (!$target.parents(".uk-dropdown").length) {
                        if ($target.is("a[href='#']") || $target.parent().is("a[href='#']") || $this.dropdown.length && !$this.dropdown.is(":visible")) {
                            e.preventDefault();
                        }
                        $target.blur();
                    }
                    if (!$this.element.hasClass("uk-open")) {
                        $this.show();
                    } else {
                        if ($target.is("a:not(.js-uk-prevent)") || $target.is(".uk-dropdown-close") || !$this.dropdown.find(e.target).length) {
                            $this.hide();
                        }
                    }
                });
            } else {
                this.on("mouseenter", function(e) {
                    if ($this.remainIdle) {
                        clearTimeout($this.remainIdle);
                    }
                    if (hoverIdle) {
                        clearTimeout(hoverIdle);
                    }
                    if (active && active == $this) {
                        return;
                    }
                    // pseudo manuAim
                    if (active && active != $this) {
                        hoverIdle = setTimeout(function() {
                            hoverIdle = setTimeout($this.show.bind($this), $this.options.delay);
                        }, $this.options.hoverDelayIdle);
                    } else {
                        hoverIdle = setTimeout($this.show.bind($this), $this.options.delay);
                    }
                }).on("mouseleave", function() {
                    if (hoverIdle) {
                        clearTimeout(hoverIdle);
                    }
                    $this.remainIdle = setTimeout(function() {
                        if (active && active == $this) $this.hide();
                    }, $this.options.remaintime);
                }).on("click", function(e) {
                    var $target = UI.$(e.target);
                    if ($this.remainIdle) {
                        clearTimeout($this.remainIdle);
                    }
                    if ($target.is("a[href='#']") || $target.parent().is("a[href='#']")) {
                        e.preventDefault();
                    }
                    $this.show();
                });
            }
        },
        show: function() {
            UI.$html.off("click.outer.dropdown");
            if (active && active != this) {
                active.hide();
            }
            if (hoverIdle) {
                clearTimeout(hoverIdle);
            }
            this.checkDimensions();
            this.element.addClass("uk-open");
            // Update ARIA
            this.element.attr("aria-expanded", "true");
            this.trigger("show.uk.dropdown", [ this ]);
            UI.Utils.checkDisplay(this.dropdown, true);
            active = this;
            this.registerOuterClick();
        },
        hide: function() {
            this.element.removeClass("uk-open");
            if (this.remainIdle) {
                clearTimeout(this.remainIdle);
            }
            this.remainIdle = false;
            // Update ARIA
            this.element.attr("aria-expanded", "false");
            this.trigger("hide.uk.dropdown", [ this ]);
            if (active == this) active = false;
        },
        registerOuterClick: function() {
            var $this = this;
            UI.$html.off("click.outer.dropdown");
            setTimeout(function() {
                UI.$html.on("click.outer.dropdown", function(e) {
                    if (hoverIdle) {
                        clearTimeout(hoverIdle);
                    }
                    var $target = UI.$(e.target);
                    if (active == $this && ($target.is("a:not(.js-uk-prevent)") || $target.is(".uk-dropdown-close") || !$this.dropdown.find(e.target).length)) {
                        $this.hide();
                        UI.$html.off("click.outer.dropdown");
                    }
                });
            }, 10);
        },
        checkDimensions: function() {
            if (!this.dropdown.length) return;
            if (this.justified && this.justified.length) {
                this.dropdown.css("min-width", "");
            }
            var $this = this, dropdown = this.dropdown.css("margin-" + UI.langdirection, ""), offset = dropdown.show().offset(), width = dropdown.outerWidth(), boundarywidth = this.boundary.width(), boundaryoffset = this.boundary.offset() ? this.boundary.offset().left : 0;
            // centered dropdown
            if (this.centered) {
                dropdown.css("margin-" + UI.langdirection, (parseFloat(width) / 2 - dropdown.parent().width() / 2) * -1);
                offset = dropdown.offset();
                // reset dropdown
                if (width + offset.left > boundarywidth || offset.left < 0) {
                    dropdown.css("margin-" + UI.langdirection, "");
                    offset = dropdown.offset();
                }
            }
            // justify dropdown
            if (this.justified && this.justified.length) {
                var jwidth = this.justified.outerWidth();
                dropdown.css("min-width", jwidth);
                if (UI.langdirection == "right") {
                    var right1 = boundarywidth - (this.justified.offset().left + jwidth), right2 = boundarywidth - (dropdown.offset().left + dropdown.outerWidth());
                    dropdown.css("margin-right", right1 - right2);
                } else {
                    dropdown.css("margin-left", this.justified.offset().left - offset.left);
                }
                offset = dropdown.offset();
            }
            if (width + (offset.left - boundaryoffset) > boundarywidth) {
                dropdown.addClass("uk-dropdown-flip");
                offset = dropdown.offset();
            }
            if (offset.left - boundaryoffset < 0) {
                dropdown.addClass("uk-dropdown-stack");
                if (dropdown.hasClass("uk-dropdown-flip")) {
                    if (!this.flipped) {
                        dropdown.removeClass("uk-dropdown-flip");
                        offset = dropdown.offset();
                        dropdown.addClass("uk-dropdown-flip");
                    }
                    setTimeout(function() {
                        if (dropdown.offset().left - boundaryoffset < 0 || !$this.flipped && dropdown.outerWidth() + (offset.left - boundaryoffset) < boundarywidth) {
                            dropdown.removeClass("uk-dropdown-flip");
                        }
                    }, 0);
                }
                this.trigger("stack.uk.dropdown", [ this ]);
            }
            dropdown.css("display", "");
        }
    });
})(UIkit);

(function(UI) {
    "use strict";
    var grids = [];
    UI.component("gridMatchHeight", {
        defaults: {
            target: false,
            row: true,
            ignorestacked: false
        },
        boot: function() {
            // init code
            UI.ready(function(context) {
                UI.$("[data-uk-grid-match]", context).each(function() {
                    var grid = UI.$(this), obj;
                    if (!grid.data("gridMatchHeight")) {
                        obj = UI.gridMatchHeight(grid, UI.Utils.options(grid.attr("data-uk-grid-match")));
                    }
                });
            });
        },
        init: function() {
            var $this = this;
            this.columns = this.element.children();
            this.elements = this.options.target ? this.find(this.options.target) : this.columns;
            if (!this.columns.length) return;
            UI.$win.on("load resize orientationchange", function() {
                var fn = function() {
                    $this.match();
                };
                UI.$(function() {
                    fn();
                });
                return UI.Utils.debounce(fn, 50);
            }());
            UI.$html.on("changed.uk.dom", function(e) {
                $this.columns = $this.element.children();
                $this.elements = $this.options.target ? $this.find($this.options.target) : $this.columns;
                $this.match();
            });
            this.on("display.uk.check", function(e) {
                if (this.element.is(":visible")) this.match();
            }.bind(this));
            grids.push(this);
        },
        match: function() {
            var firstvisible = this.columns.filter(":visible:first");
            if (!firstvisible.length) return;
            var stacked = Math.ceil(100 * parseFloat(firstvisible.css("width")) / parseFloat(firstvisible.parent().css("width"))) >= 100;
            if (stacked && !this.options.ignorestacked) {
                this.revert();
            } else {
                UI.Utils.matchHeights(this.elements, this.options);
            }
            return this;
        },
        revert: function() {
            this.elements.css("min-height", "");
            return this;
        }
    });
    UI.component("gridMargin", {
        defaults: {
            cls: "uk-grid-margin"
        },
        boot: function() {
            // init code
            UI.ready(function(context) {
                UI.$("[data-uk-grid-margin]", context).each(function() {
                    var grid = UI.$(this), obj;
                    if (!grid.data("gridMargin")) {
                        obj = UI.gridMargin(grid, UI.Utils.options(grid.attr("data-uk-grid-margin")));
                    }
                });
            });
        },
        init: function() {
            var stackMargin = UI.stackMargin(this.element, this.options);
        }
    });
})(UIkit);

(function(UI) {
    "use strict";
    var active = false, activeCount = 0, $html = UI.$html, body;
    UI.component("modal", {
        defaults: {
            keyboard: true,
            bgclose: true,
            minScrollHeight: 150,
            center: false,
            modal: true
        },
        scrollable: false,
        transition: false,
        init: function() {
            if (!body) body = UI.$("body");
            if (!this.element.length) return;
            var $this = this;
            this.paddingdir = "padding-" + (UI.langdirection == "left" ? "right" : "left");
            this.dialog = this.find(".uk-modal-dialog");
            this.active = false;
            // Update ARIA
            this.element.attr("aria-hidden", this.element.hasClass("uk-open"));
            this.on("click", ".uk-modal-close", function(e) {
                e.preventDefault();
                $this.hide();
            }).on("click", function(e) {
                var target = UI.$(e.target);
                if (target[0] == $this.element[0] && $this.options.bgclose) {
                    $this.hide();
                }
            });
        },
        toggle: function() {
            return this[this.isActive() ? "hide" : "show"]();
        },
        show: function() {
            if (!this.element.length) return;
            var $this = this;
            if (this.isActive()) return;
            if (this.options.modal && active) {
                active.hide(true);
            }
            this.element.removeClass("uk-open").show();
            this.resize();
            if (this.options.modal) {
                active = this;
            }
            this.active = true;
            activeCount++;
            this.element.addClass("uk-open");
            $html.addClass("uk-modal-page").height();
            // force browser engine redraw
            // Update ARIA
            this.element.attr("aria-hidden", "false");
            this.element.trigger("show.uk.modal");
            UI.Utils.checkDisplay(this.dialog, true);
            return this;
        },
        hide: function(force) {
            if (!force && UI.support.transition) {
                var $this = this;
                this.one(UI.support.transition.end, function() {
                    $this._hide();
                }).removeClass("uk-open");
            } else {
                this._hide();
            }
            return this;
        },
        resize: function() {
            var bodywidth = body.width();
            this.scrollbarwidth = window.innerWidth - bodywidth;
            body.css(this.paddingdir, this.scrollbarwidth);
            this.element.css("overflow-y", this.scrollbarwidth ? "scroll" : "auto");
            if (!this.updateScrollable() && this.options.center) {
                var dh = this.dialog.outerHeight(), pad = parseInt(this.dialog.css("margin-top"), 10) + parseInt(this.dialog.css("margin-bottom"), 10);
                if (dh + pad < window.innerHeight) {
                    this.dialog.css({
                        top: window.innerHeight / 2 - dh / 2 - pad
                    });
                } else {
                    this.dialog.css({
                        top: ""
                    });
                }
            }
        },
        updateScrollable: function() {
            // has scrollable?
            var scrollable = this.dialog.find(".uk-overflow-container:visible:first");
            if (scrollable.length) {
                scrollable.css("height", 0);
                var offset = Math.abs(parseInt(this.dialog.css("margin-top"), 10)), dh = this.dialog.outerHeight(), wh = window.innerHeight, h = wh - 2 * (offset < 20 ? 20 : offset) - dh;
                scrollable.css("height", h < this.options.minScrollHeight ? "" : h);
                return true;
            }
            return false;
        },
        _hide: function() {
            this.active = false;
            activeCount--;
            this.element.hide().removeClass("uk-open");
            // Update ARIA
            this.element.attr("aria-hidden", "true");
            if (!activeCount) {
                $html.removeClass("uk-modal-page");
                body.css(this.paddingdir, "");
            }
            if (active === this) active = false;
            this.trigger("hide.uk.modal");
        },
        isActive: function() {
            return this.active;
        }
    });
    UI.component("modalTrigger", {
        boot: function() {
            // init code
            UI.$html.on("click.modal.uikit", "[data-uk-modal]", function(e) {
                var ele = UI.$(this);
                if (ele.is("a")) {
                    e.preventDefault();
                }
                if (!ele.data("modalTrigger")) {
                    var modal = UI.modalTrigger(ele, UI.Utils.options(ele.attr("data-uk-modal")));
                    modal.show();
                }
            });
            // close modal on esc button
            UI.$html.on("keydown.modal.uikit", function(e) {
                if (active && e.keyCode === 27 && active.options.keyboard) {
                    // ESC
                    e.preventDefault();
                    active.hide();
                }
            });
            UI.$win.on("resize orientationchange", UI.Utils.debounce(function() {
                if (active) active.resize();
            }, 150));
        },
        init: function() {
            var $this = this;
            this.options = UI.$.extend({
                target: $this.element.is("a") ? $this.element.attr("href") : false
            }, this.options);
            this.modal = UI.modal(this.options.target, this.options);
            this.on("click", function(e) {
                e.preventDefault();
                $this.show();
            });
            //methods
            this.proxy(this.modal, "show hide isActive");
        }
    });
    UI.modal.dialog = function(content, options) {
        var modal = UI.modal(UI.$(UI.modal.dialog.template).appendTo("body"), options);
        modal.on("hide.uk.modal", function() {
            if (modal.persist) {
                modal.persist.appendTo(modal.persist.data("modalPersistParent"));
                modal.persist = false;
            }
            modal.element.remove();
        });
        setContent(content, modal);
        return modal;
    };
    UI.modal.dialog.template = '<div class="uk-modal"><div class="uk-modal-dialog" style="min-height:0;"></div></div>';
    UI.modal.alert = function(content, options) {
        options = UI.$.extend(true, {
            bgclose: false,
            keyboard: false,
            modal: false,
            labels: UI.modal.labels
        }, options);
        var modal = UI.modal.dialog([ '<div class="uk-margin uk-modal-content">' + String(content) + "</div>", '<div class="uk-modal-footer uk-text-right"><button class="uk-button uk-button-primary uk-modal-close">' + options.labels.Ok + "</button></div>" ].join(""), options);
        modal.on("show.uk.modal", function() {
            setTimeout(function() {
                modal.element.find("button:first").focus();
            }, 50);
        });
        modal.show();
    };
    UI.modal.confirm = function(content, onconfirm, options) {
        onconfirm = UI.$.isFunction(onconfirm) ? onconfirm : function() {};
        options = UI.$.extend(true, {
            bgclose: false,
            keyboard: false,
            modal: false,
            labels: UI.modal.labels
        }, options);
        var modal = UI.modal.dialog([ '<div class="uk-margin uk-modal-content">' + String(content) + "</div>", '<div class="uk-modal-footer uk-text-right"><button class="uk-button uk-button-primary js-modal-confirm">' + options.labels.Ok + '</button> <button class="uk-button uk-modal-close">' + options.labels.Cancel + "</button></div>" ].join(""), options);
        modal.element.find(".js-modal-confirm").on("click", function() {
            onconfirm();
            modal.hide();
        });
        modal.on("show.uk.modal", function() {
            setTimeout(function() {
                modal.element.find("button:first").focus();
            }, 50);
        });
        modal.show();
    };
    UI.modal.prompt = function(text, value, onsubmit, options) {
        onsubmit = UI.$.isFunction(onsubmit) ? onsubmit : function(value) {};
        options = UI.$.extend(true, {
            bgclose: false,
            keyboard: false,
            modal: false,
            labels: UI.modal.labels
        }, options);
        var modal = UI.modal.dialog([ text ? '<div class="uk-modal-content uk-form">' + String(text) + "</div>" : "", '<div class="uk-margin-small-top uk-modal-content uk-form"><p><input type="text" class="uk-width-1-1"></p></div>', '<div class="uk-modal-footer uk-text-right"><button class="uk-button uk-button-primary js-modal-ok">' + options.labels.Ok + '</button> <button class="uk-button uk-modal-close">' + options.labels.Cancel + "</button></div>" ].join(""), options), input = modal.element.find("input[type='text']").val(value || "").on("keyup", function(e) {
            if (e.keyCode == 13) {
                modal.element.find(".js-modal-ok").trigger("click");
            }
        });
        modal.element.find(".js-modal-ok").on("click", function() {
            if (onsubmit(input.val()) !== false) {
                modal.hide();
            }
        });
        modal.on("show.uk.modal", function() {
            setTimeout(function() {
                input.focus();
            }, 50);
        });
        modal.show();
    };
    UI.modal.blockUI = function(content, options) {
        var modal = UI.modal.dialog([ '<div class="uk-margin uk-modal-content">' + String(content || '<div class="uk-text-center">...</div>') + "</div>" ].join(""), UI.$.extend({
            bgclose: false,
            keyboard: false,
            modal: false
        }, options));
        modal.content = modal.element.find(".uk-modal-content:first");
        modal.show();
        return modal;
    };
    UI.modal.labels = {
        Ok: "Ok",
        Cancel: "Cancel"
    };
    // helper functions
    function setContent(content, modal) {
        if (!modal) return;
        if (typeof content === "object") {
            // convert DOM object to a jQuery object
            content = content instanceof jQuery ? content : UI.$(content);
            if (content.parent().length) {
                modal.persist = content;
                modal.persist.data("modalPersistParent", content.parent());
            }
        } else if (typeof content === "string" || typeof content === "number") {
            // just insert the data as innerHTML
            content = UI.$("<div></div>").html(content);
        } else {
            // unsupported data type!
            content = UI.$("<div></div>").html("UIkit.modal Error: Unsupported data type: " + typeof content);
        }
        content.appendTo(modal.element.find(".uk-modal-dialog"));
        return modal;
    }
})(UIkit);

(function(UI) {
    "use strict";
    UI.component("nav", {
        defaults: {
            toggle: ">li.uk-parent > a[href='#']",
            lists: ">li.uk-parent > ul",
            multiple: false
        },
        boot: function() {
            // init code
            UI.ready(function(context) {
                UI.$("[data-uk-nav]", context).each(function() {
                    var nav = UI.$(this);
                    if (!nav.data("nav")) {
                        var obj = UI.nav(nav, UI.Utils.options(nav.attr("data-uk-nav")));
                    }
                });
            });
        },
        init: function() {
            var $this = this;
            this.on("click.uikit.nav", this.options.toggle, function(e) {
                e.preventDefault();
                var ele = UI.$(this);
                $this.open(ele.parent()[0] == $this.element[0] ? ele : ele.parent("li"));
            });
            this.find(this.options.lists).each(function() {
                var $ele = UI.$(this), parent = $ele.parent(), active = parent.hasClass("uk-active");
                $ele.wrap('<div style="overflow:hidden;height:0;position:relative;"></div>');
                parent.data("list-container", $ele.parent()[active ? "removeClass" : "addClass"]("uk-hidden"));
                // Init ARIA
                parent.attr("aria-expanded", parent.hasClass("uk-open"));
                if (active) $this.open(parent, true);
            });
        },
        open: function(li, noanimation) {
            var $this = this, element = this.element, $li = UI.$(li), $container = $li.data("list-container");
            if (!this.options.multiple) {
                element.children(".uk-open").not(li).each(function() {
                    var ele = UI.$(this);
                    if (ele.data("list-container")) {
                        ele.data("list-container").stop().animate({
                            height: 0
                        }, function() {
                            UI.$(this).parent().removeClass("uk-open").end().addClass("uk-hidden");
                        });
                    }
                });
            }
            $li.toggleClass("uk-open");
            // Update ARIA
            $li.attr("aria-expanded", $li.hasClass("uk-open"));
            if ($container) {
                if ($li.hasClass("uk-open")) {
                    $container.removeClass("uk-hidden");
                }
                if (noanimation) {
                    $container.stop().height($li.hasClass("uk-open") ? "auto" : 0);
                    if (!$li.hasClass("uk-open")) {
                        $container.addClass("uk-hidden");
                    }
                    this.trigger("display.uk.check");
                } else {
                    $container.stop().animate({
                        height: $li.hasClass("uk-open") ? getHeight($container.find("ul:first")) : 0
                    }, function() {
                        if (!$li.hasClass("uk-open")) {
                            $container.addClass("uk-hidden");
                        } else {
                            $container.css("height", "");
                        }
                        $this.trigger("display.uk.check");
                    });
                }
            }
        }
    });
    // helper
    function getHeight(ele) {
        var $ele = UI.$(ele), height = "auto";
        if ($ele.is(":visible")) {
            height = $ele.outerHeight();
        } else {
            var tmp = {
                position: $ele.css("position"),
                visibility: $ele.css("visibility"),
                display: $ele.css("display")
            };
            height = $ele.css({
                position: "absolute",
                visibility: "hidden",
                display: "block"
            }).outerHeight();
            $ele.css(tmp);
        }
        return height;
    }
})(UIkit);

(function(UI) {
    "use strict";
    var scrollpos = {
        x: window.scrollX,
        y: window.scrollY
    }, $win = UI.$win, $doc = UI.$doc, $html = UI.$html, Offcanvas = {
        show: function(element) {
            element = UI.$(element);
            if (!element.length) return;
            var $body = UI.$("body"), bar = element.find(".uk-offcanvas-bar:first"), rtl = UI.langdirection == "right", flip = bar.hasClass("uk-offcanvas-bar-flip") ? -1 : 1, dir = flip * (rtl ? -1 : 1);
            scrollpos = {
                x: window.pageXOffset,
                y: window.pageYOffset
            };
            element.addClass("uk-active");
            $body.css({
                width: window.innerWidth,
                height: window.innerHeight
            }).addClass("uk-offcanvas-page");
            $body.css(rtl ? "margin-right" : "margin-left", (rtl ? -1 : 1) * (bar.outerWidth() * dir)).width();
            // .width() - force redraw
            $html.css("margin-top", scrollpos.y * -1);
            bar.addClass("uk-offcanvas-bar-show");
            this._initElement(element);
            bar.trigger("show.uk.offcanvas", [ element, bar ]);
            // Update ARIA
            element.attr("aria-hidden", "false");
        },
        hide: function(force) {
            var $body = UI.$("body"), panel = UI.$(".uk-offcanvas.uk-active"), rtl = UI.langdirection == "right", bar = panel.find(".uk-offcanvas-bar:first"), finalize = function() {
                $body.removeClass("uk-offcanvas-page").css({
                    width: "",
                    height: "",
                    "margin-left": "",
                    "margin-right": ""
                });
                panel.removeClass("uk-active");
                bar.removeClass("uk-offcanvas-bar-show");
                $html.css("margin-top", "");
                window.scrollTo(scrollpos.x, scrollpos.y);
                bar.trigger("hide.uk.offcanvas", [ panel, bar ]);
                // Update ARIA
                panel.attr("aria-hidden", "true");
            };
            if (!panel.length) return;
            if (UI.support.transition && !force) {
                $body.one(UI.support.transition.end, function() {
                    finalize();
                }).css(rtl ? "margin-right" : "margin-left", "");
                setTimeout(function() {
                    bar.removeClass("uk-offcanvas-bar-show");
                }, 0);
            } else {
                finalize();
            }
        },
        _initElement: function(element) {
            if (element.data("OffcanvasInit")) return;
            element.on("click.uk.offcanvas swipeRight.uk.offcanvas swipeLeft.uk.offcanvas", function(e) {
                var target = UI.$(e.target);
                if (!e.type.match(/swipe/)) {
                    if (!target.hasClass("uk-offcanvas-close")) {
                        if (target.hasClass("uk-offcanvas-bar")) return;
                        if (target.parents(".uk-offcanvas-bar:first").length) return;
                    }
                }
                e.stopImmediatePropagation();
                Offcanvas.hide();
            });
            element.on("click", "a[href^='#']", function(e) {
                var link = UI.$(this), href = link.attr("href");
                if (href == "#") {
                    return;
                }
                UI.$doc.one("hide.uk.offcanvas", function() {
                    var target;
                    try {
                        target = UI.$(href);
                    } catch (e) {
                        target = "";
                    }
                    if (!target.length) {
                        target = UI.$('[name="' + href.replace("#", "") + '"]');
                    }
                    if (target.length && link.attr("data-uk-smooth-scroll") && UI.Utils.scrollToElement) {
                        UI.Utils.scrollToElement(target, UI.Utils.options(link.attr("data-uk-smooth-scroll") || "{}"));
                    } else {
                        window.location.href = href;
                    }
                });
                Offcanvas.hide();
            });
            element.data("OffcanvasInit", true);
        }
    };
    UI.component("offcanvasTrigger", {
        boot: function() {
            // init code
            $html.on("click.offcanvas.uikit", "[data-uk-offcanvas]", function(e) {
                e.preventDefault();
                var ele = UI.$(this);
                if (!ele.data("offcanvasTrigger")) {
                    var obj = UI.offcanvasTrigger(ele, UI.Utils.options(ele.attr("data-uk-offcanvas")));
                    ele.trigger("click");
                }
            });
            $html.on("keydown.uk.offcanvas", function(e) {
                if (e.keyCode === 27) {
                    // ESC
                    Offcanvas.hide();
                }
            });
        },
        init: function() {
            var $this = this;
            this.options = UI.$.extend({
                target: $this.element.is("a") ? $this.element.attr("href") : false
            }, this.options);
            this.on("click", function(e) {
                e.preventDefault();
                Offcanvas.show($this.options.target);
            });
        }
    });
    UI.offcanvas = Offcanvas;
})(UIkit);

(function(UI) {
    "use strict";
    var Animations;
    UI.component("switcher", {
        defaults: {
            connect: false,
            toggle: ">*",
            active: 0,
            animation: false,
            duration: 200
        },
        animating: false,
        boot: function() {
            // init code
            UI.ready(function(context) {
                UI.$("[data-uk-switcher]", context).each(function() {
                    var switcher = UI.$(this);
                    if (!switcher.data("switcher")) {
                        var obj = UI.switcher(switcher, UI.Utils.options(switcher.attr("data-uk-switcher")));
                    }
                });
            });
        },
        init: function() {
            var $this = this;
            this.on("click.uikit.switcher", this.options.toggle, function(e) {
                e.preventDefault();
                $this.show(this);
            });
            if (this.options.connect) {
                this.connect = UI.$(this.options.connect);
                this.connect.find(".uk-active").removeClass(".uk-active");
                // delegate switch commands within container content
                if (this.connect.length) {
                    // Init ARIA for connect
                    this.connect.children().attr("aria-hidden", "true");
                    this.connect.on("click", "[data-uk-switcher-item]", function(e) {
                        e.preventDefault();
                        var item = UI.$(this).attr("data-uk-switcher-item");
                        if ($this.index == item) return;
                        switch (item) {
                          case "next":
                          case "previous":
                            $this.show($this.index + (item == "next" ? 1 : -1));
                            break;

                          default:
                            $this.show(parseInt(item, 10));
                        }
                    }).on("swipeRight swipeLeft", function(e) {
                        e.preventDefault();
                        if (!window.getSelection().toString()) {
                            $this.show($this.index + (e.type == "swipeLeft" ? 1 : -1));
                        }
                    });
                }
                var toggles = this.find(this.options.toggle), active = toggles.filter(".uk-active");
                if (active.length) {
                    this.show(active, false);
                } else {
                    if (this.options.active === false) return;
                    active = toggles.eq(this.options.active);
                    this.show(active.length ? active : toggles.eq(0), false);
                }
                // Init ARIA for toggles
                toggles.not(active).attr("aria-expanded", "false");
                active.attr("aria-expanded", "true");
                this.on("changed.uk.dom", function() {
                    $this.connect = UI.$($this.options.connect);
                });
            }
        },
        show: function(tab, animate) {
            if (this.animating) {
                return;
            }
            if (isNaN(tab)) {
                tab = UI.$(tab);
            } else {
                var toggles = this.find(this.options.toggle);
                tab = tab < 0 ? toggles.length - 1 : tab;
                tab = toggles.eq(toggles[tab] ? tab : 0);
            }
            var $this = this, toggles = this.find(this.options.toggle), active = UI.$(tab), animation = Animations[this.options.animation] || function(current, next) {
                if (!$this.options.animation) {
                    return Animations.none.apply($this);
                }
                var anim = $this.options.animation.split(",");
                if (anim.length == 1) {
                    anim[1] = anim[0];
                }
                anim[0] = anim[0].trim();
                anim[1] = anim[1].trim();
                return coreAnimation.apply($this, [ anim, current, next ]);
            };
            if (animate === false || !UI.support.animation) {
                animation = Animations.none;
            }
            if (active.hasClass("uk-disabled")) return;
            // Update ARIA for Toggles
            toggles.attr("aria-expanded", "false");
            active.attr("aria-expanded", "true");
            toggles.filter(".uk-active").removeClass("uk-active");
            active.addClass("uk-active");
            if (this.options.connect && this.connect.length) {
                this.index = this.find(this.options.toggle).index(active);
                if (this.index == -1) {
                    this.index = 0;
                }
                this.connect.each(function() {
                    var container = UI.$(this), children = UI.$(container.children()), current = UI.$(children.filter(".uk-active")), next = UI.$(children.eq($this.index));
                    $this.animating = true;
                    animation.apply($this, [ current, next ]).then(function() {
                        current.removeClass("uk-active");
                        next.addClass("uk-active");
                        // Update ARIA for connect
                        current.attr("aria-hidden", "true");
                        next.attr("aria-hidden", "false");
                        UI.Utils.checkDisplay(next, true);
                        $this.animating = false;
                    });
                });
            }
            this.trigger("show.uk.switcher", [ active ]);
        }
    });
    Animations = {
        none: function() {
            var d = UI.$.Deferred();
            d.resolve();
            return d.promise();
        },
        fade: function(current, next) {
            return coreAnimation.apply(this, [ "uk-animation-fade", current, next ]);
        },
        "slide-bottom": function(current, next) {
            return coreAnimation.apply(this, [ "uk-animation-slide-bottom", current, next ]);
        },
        "slide-top": function(current, next) {
            return coreAnimation.apply(this, [ "uk-animation-slide-top", current, next ]);
        },
        "slide-vertical": function(current, next, dir) {
            var anim = [ "uk-animation-slide-top", "uk-animation-slide-bottom" ];
            if (current && current.index() > next.index()) {
                anim.reverse();
            }
            return coreAnimation.apply(this, [ anim, current, next ]);
        },
        "slide-left": function(current, next) {
            return coreAnimation.apply(this, [ "uk-animation-slide-left", current, next ]);
        },
        "slide-right": function(current, next) {
            return coreAnimation.apply(this, [ "uk-animation-slide-right", current, next ]);
        },
        "slide-horizontal": function(current, next, dir) {
            var anim = [ "uk-animation-slide-right", "uk-animation-slide-left" ];
            if (current && current.index() > next.index()) {
                anim.reverse();
            }
            return coreAnimation.apply(this, [ anim, current, next ]);
        },
        scale: function(current, next) {
            return coreAnimation.apply(this, [ "uk-animation-scale-up", current, next ]);
        }
    };
    UI.switcher.animations = Animations;
    // helpers
    function coreAnimation(cls, current, next) {
        var d = UI.$.Deferred(), clsIn = cls, clsOut = cls, release;
        if (next[0] === current[0]) {
            d.resolve();
            return d.promise();
        }
        if (typeof cls == "object") {
            clsIn = cls[0];
            clsOut = cls[1] || cls[0];
        }
        release = function() {
            if (current) current.hide().removeClass("uk-active " + clsOut + " uk-animation-reverse");
            next.addClass(clsIn).one(UI.support.animation.end, function() {
                next.removeClass("" + clsIn + "").css({
                    opacity: "",
                    display: ""
                });
                d.resolve();
                if (current) current.css({
                    opacity: "",
                    display: ""
                });
            }.bind(this)).show();
        };
        next.css("animation-duration", this.options.duration + "ms");
        if (current && current.length) {
            current.css("animation-duration", this.options.duration + "ms");
            current.css("display", "none").addClass(clsOut + " uk-animation-reverse").one(UI.support.animation.end, function() {
                release();
            }.bind(this)).css("display", "");
        } else {
            next.addClass("uk-active");
            release();
        }
        return d.promise();
    }
})(UIkit);

(function(UI) {
    "use strict";
    UI.component("tab", {
        defaults: {
            target: ">li:not(.uk-tab-responsive, .uk-disabled)",
            connect: false,
            active: 0,
            animation: false,
            duration: 200
        },
        boot: function() {
            // init code
            UI.ready(function(context) {
                UI.$("[data-uk-tab]", context).each(function() {
                    var tab = UI.$(this);
                    if (!tab.data("tab")) {
                        var obj = UI.tab(tab, UI.Utils.options(tab.attr("data-uk-tab")));
                    }
                });
            });
        },
        init: function() {
            var $this = this;
            this.current = false;
            this.on("click.uikit.tab", this.options.target, function(e) {
                e.preventDefault();
                if ($this.switcher && $this.switcher.animating) {
                    return;
                }
                var current = $this.find($this.options.target).not(this);
                current.removeClass("uk-active").blur();
                $this.trigger("change.uk.tab", [ UI.$(this).addClass("uk-active"), $this.current ]);
                $this.current = UI.$(this);
                // Update ARIA
                if (!$this.options.connect) {
                    current.attr("aria-expanded", "false");
                    UI.$(this).attr("aria-expanded", "true");
                }
            });
            if (this.options.connect) {
                this.connect = UI.$(this.options.connect);
            }
            // init responsive tab
            this.responsivetab = UI.$('<li class="uk-tab-responsive uk-active"><a></a></li>').append('<div class="uk-dropdown uk-dropdown-small"><ul class="uk-nav uk-nav-dropdown"></ul><div>');
            this.responsivetab.dropdown = this.responsivetab.find(".uk-dropdown");
            this.responsivetab.lst = this.responsivetab.dropdown.find("ul");
            this.responsivetab.caption = this.responsivetab.find("a:first");
            if (this.element.hasClass("uk-tab-bottom")) this.responsivetab.dropdown.addClass("uk-dropdown-up");
            // handle click
            this.responsivetab.lst.on("click.uikit.tab", "a", function(e) {
                e.preventDefault();
                e.stopPropagation();
                var link = UI.$(this);
                $this.element.children("li:not(.uk-tab-responsive)").eq(link.data("index")).trigger("click");
            });
            this.on("show.uk.switcher change.uk.tab", function(e, tab) {
                $this.responsivetab.caption.html(tab.text());
            });
            this.element.append(this.responsivetab);
            // init UIkit components
            if (this.options.connect) {
                this.switcher = UI.switcher(this.element, {
                    toggle: ">li:not(.uk-tab-responsive)",
                    connect: this.options.connect,
                    active: this.options.active,
                    animation: this.options.animation,
                    duration: this.options.duration
                });
            }
            UI.dropdown(this.responsivetab, {
                mode: "click"
            });
            // init
            $this.trigger("change.uk.tab", [ this.element.find(this.options.target).not(".uk-tab-responsive").filter(".uk-active") ]);
            this.check();
            UI.$win.on("resize orientationchange", UI.Utils.debounce(function() {
                if ($this.element.is(":visible")) $this.check();
            }, 100));
            this.on("display.uk.check", function() {
                if ($this.element.is(":visible")) $this.check();
            });
        },
        check: function() {
            var children = this.element.children("li:not(.uk-tab-responsive)").removeClass("uk-hidden");
            if (!children.length) {
                this.responsivetab.addClass("uk-hidden");
                return;
            }
            var top = children.eq(0).offset().top + Math.ceil(children.eq(0).height() / 2), doresponsive = false, item, link, clone;
            this.responsivetab.lst.empty();
            children.each(function() {
                if (UI.$(this).offset().top > top) {
                    doresponsive = true;
                }
            });
            if (doresponsive) {
                for (var i = 0; i < children.length; i++) {
                    item = UI.$(children.eq(i));
                    link = item.find("a");
                    if (item.css("float") != "none" && !item.attr("uk-dropdown")) {
                        if (!item.hasClass("uk-disabled")) {
                            clone = item[0].outerHTML.replace("<a ", '<a data-index="' + i + '" ');
                            this.responsivetab.lst.append(clone);
                        }
                        item.addClass("uk-hidden");
                    }
                }
            }
            this.responsivetab[this.responsivetab.lst.children("li").length ? "removeClass" : "addClass"]("uk-hidden");
        }
    });
})(UIkit);

(function(UI) {
    "use strict";
    UI.component("cover", {
        defaults: {
            automute: true
        },
        boot: function() {
            // auto init
            UI.ready(function(context) {
                UI.$("[data-uk-cover]", context).each(function() {
                    var ele = UI.$(this);
                    if (!ele.data("cover")) {
                        var plugin = UI.cover(ele, UI.Utils.options(ele.attr("data-uk-cover")));
                    }
                });
            });
        },
        init: function() {
            this.parent = this.element.parent();
            UI.$win.on("load resize orientationchange", UI.Utils.debounce(function() {
                this.check();
            }.bind(this), 100));
            this.on("display.uk.check", function(e) {
                if (this.element.is(":visible")) this.check();
            }.bind(this));
            this.check();
            if (this.element.is("iframe") && this.options.automute) {
                var src = this.element.attr("src");
                this.element.attr("src", "").on("load", function() {
                    this.contentWindow.postMessage('{ "event": "command", "func": "mute", "method":"setVolume", "value":0}', "*");
                }).attr("src", [ src, src.indexOf("?") > -1 ? "&" : "?", "enablejsapi=1&api=1" ].join(""));
            }
        },
        check: function() {
            this.element.css({
                width: "",
                height: ""
            });
            this.dimension = {
                w: this.element.width(),
                h: this.element.height()
            };
            if (this.element.attr("width") && !isNaN(this.element.attr("width"))) {
                this.dimension.w = this.element.attr("width");
            }
            if (this.element.attr("height") && !isNaN(this.element.attr("height"))) {
                this.dimension.h = this.element.attr("height");
            }
            this.ratio = this.dimension.w / this.dimension.h;
            var w = this.parent.width(), h = this.parent.height(), width, height;
            // if element height < parent height (gap underneath)
            if (w / this.ratio < h) {
                width = Math.ceil(h * this.ratio);
                height = h;
            } else {
                width = w;
                height = Math.ceil(w / this.ratio);
            }
            this.element.css({
                width: width,
                height: height
            });
        }
    });
})(UIkit);

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-accordion", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    UI.component("accordion", {
        defaults: {
            showfirst: true,
            collapse: true,
            animate: true,
            easing: "swing",
            duration: 300,
            toggle: ".uk-accordion-title",
            containers: ".uk-accordion-content",
            clsactive: "uk-active"
        },
        boot: function() {
            // init code
            UI.ready(function(context) {
                setTimeout(function() {
                    UI.$("[data-uk-accordion]", context).each(function() {
                        var ele = UI.$(this);
                        if (!ele.data("accordion")) {
                            UI.accordion(ele, UI.Utils.options(ele.attr("data-uk-accordion")));
                        }
                    });
                }, 0);
            });
        },
        init: function() {
            var $this = this;
            this.element.on("click.uikit.accordion", this.options.toggle, function(e) {
                e.preventDefault();
                $this.toggleItem(UI.$(this).data("wrapper"), $this.options.animate, $this.options.collapse);
            });
            this.update();
            if (this.options.showfirst) {
                this.toggleItem(this.toggle.eq(0).data("wrapper"), false, false);
            }
        },
        toggleItem: function(wrapper, animated, collapse) {
            var $this = this;
            wrapper.data("toggle").toggleClass(this.options.clsactive);
            var active = wrapper.data("toggle").hasClass(this.options.clsactive);
            if (collapse) {
                this.toggle.not(wrapper.data("toggle")).removeClass(this.options.clsactive);
                this.content.not(wrapper.data("content")).parent().stop().css("overflow", "hidden").animate({
                    height: 0
                }, {
                    easing: this.options.easing,
                    duration: animated ? this.options.duration : 0
                }).attr("aria-expanded", "false");
            }
            wrapper.stop().css("overflow", "hidden");
            if (animated) {
                wrapper.animate({
                    height: active ? getHeight(wrapper.data("content")) : 0
                }, {
                    easing: this.options.easing,
                    duration: this.options.duration,
                    complete: function() {
                        if (active) {
                            wrapper.css({
                                overflow: "",
                                height: "auto"
                            });
                            UI.Utils.checkDisplay(wrapper.data("content"));
                        }
                        $this.trigger("display.uk.check");
                    }
                });
            } else {
                wrapper.height(active ? "auto" : 0);
                if (active) {
                    wrapper.css({
                        overflow: ""
                    });
                    UI.Utils.checkDisplay(wrapper.data("content"));
                }
                this.trigger("display.uk.check");
            }
            // Update ARIA
            wrapper.attr("aria-expanded", active);
            this.element.trigger("toggle.uk.accordion", [ active, wrapper.data("toggle"), wrapper.data("content") ]);
        },
        update: function() {
            var $this = this, $content, $wrapper, $toggle;
            this.toggle = this.find(this.options.toggle);
            this.content = this.find(this.options.containers);
            this.content.each(function(index) {
                $content = UI.$(this);
                if ($content.parent().data("wrapper")) {
                    $wrapper = $content.parent();
                } else {
                    $wrapper = UI.$(this).wrap('<div data-wrapper="true" style="overflow:hidden;height:0;position:relative;"></div>').parent();
                    // Init ARIA
                    $wrapper.attr("aria-expanded", "false");
                }
                $toggle = $this.toggle.eq(index);
                $wrapper.data("toggle", $toggle);
                $wrapper.data("content", $content);
                $toggle.data("wrapper", $wrapper);
                $content.data("wrapper", $wrapper);
            });
            this.element.trigger("update.uk.accordion", [ this ]);
        }
    });
    // helper
    function getHeight(ele) {
        var $ele = UI.$(ele), height = "auto";
        if ($ele.is(":visible")) {
            height = $ele.outerHeight();
        } else {
            var tmp = {
                position: $ele.css("position"),
                visibility: $ele.css("visibility"),
                display: $ele.css("display")
            };
            height = $ele.css({
                position: "absolute",
                visibility: "hidden",
                display: "block"
            }).outerHeight();
            $ele.css(tmp);
        }
        return height;
    }
    return UI.accordion;
});

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-autocomplete", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    var active;
    UI.component("autocomplete", {
        defaults: {
            minLength: 3,
            param: "search",
            method: "post",
            delay: 300,
            loadingClass: "uk-loading",
            flipDropdown: false,
            skipClass: "uk-skip",
            hoverClass: "uk-active",
            source: null,
            renderer: null,
            // template
            template: '<ul class="uk-nav uk-nav-autocomplete uk-autocomplete-results">{{~items}}<li data-value="{{$item.value}}"><a>{{$item.value}}</a></li>{{/items}}</ul>'
        },
        visible: false,
        value: null,
        selected: null,
        boot: function() {
            // init code
            UI.$html.on("focus.autocomplete.uikit", "[data-uk-autocomplete]", function(e) {
                var ele = UI.$(this);
                if (!ele.data("autocomplete")) {
                    var obj = UI.autocomplete(ele, UI.Utils.options(ele.attr("data-uk-autocomplete")));
                }
            });
            // register outer click for autocompletes
            UI.$html.on("click.autocomplete.uikit", function(e) {
                if (active && e.target != active.input[0]) active.hide();
            });
        },
        init: function() {
            var $this = this, select = false, trigger = UI.Utils.debounce(function(e) {
                if (select) {
                    return select = false;
                }
                $this.handle();
            }, this.options.delay);
            this.dropdown = this.find(".uk-dropdown");
            this.template = this.find('script[type="text/autocomplete"]').html();
            this.template = UI.Utils.template(this.template || this.options.template);
            this.input = this.find("input:first").attr("autocomplete", "off");
            if (!this.dropdown.length) {
                this.dropdown = UI.$('<div class="uk-dropdown"></div>').appendTo(this.element);
            }
            if (this.options.flipDropdown) {
                this.dropdown.addClass("uk-dropdown-flip");
            }
            this.dropdown.attr("aria-expanded", "false");
            this.input.on({
                keydown: function(e) {
                    if (e && e.which && !e.shiftKey) {
                        switch (e.which) {
                          case 13:
                            // enter
                            select = true;
                            if ($this.selected) {
                                e.preventDefault();
                                $this.select();
                            }
                            break;

                          case 38:
                            // up
                            e.preventDefault();
                            $this.pick("prev", true);
                            break;

                          case 40:
                            // down
                            e.preventDefault();
                            $this.pick("next", true);
                            break;

                          case 27:
                          case 9:
                            // esc, tab
                            $this.hide();
                            break;

                          default:
                            break;
                        }
                    }
                },
                keyup: trigger
            });
            this.dropdown.on("click", ".uk-autocomplete-results > *", function() {
                $this.select();
            });
            this.dropdown.on("mouseover", ".uk-autocomplete-results > *", function() {
                $this.pick(UI.$(this));
            });
            this.triggercomplete = trigger;
        },
        handle: function() {
            var $this = this, old = this.value;
            this.value = this.input.val();
            if (this.value.length < this.options.minLength) return this.hide();
            if (this.value != old) {
                $this.request();
            }
            return this;
        },
        pick: function(item, scrollinview) {
            var $this = this, items = UI.$(this.dropdown.find(".uk-autocomplete-results").children(":not(." + this.options.skipClass + ")")), selected = false;
            if (typeof item !== "string" && !item.hasClass(this.options.skipClass)) {
                selected = item;
            } else if (item == "next" || item == "prev") {
                if (this.selected) {
                    var index = items.index(this.selected);
                    if (item == "next") {
                        selected = items.eq(index + 1 < items.length ? index + 1 : 0);
                    } else {
                        selected = items.eq(index - 1 < 0 ? items.length - 1 : index - 1);
                    }
                } else {
                    selected = items[item == "next" ? "first" : "last"]();
                }
                selected = UI.$(selected);
            }
            if (selected && selected.length) {
                this.selected = selected;
                items.removeClass(this.options.hoverClass);
                this.selected.addClass(this.options.hoverClass);
                // jump to selected if not in view
                if (scrollinview) {
                    var top = selected.position().top, scrollTop = $this.dropdown.scrollTop(), dpheight = $this.dropdown.height();
                    if (top > dpheight || top < 0) {
                        $this.dropdown.scrollTop(scrollTop + top);
                    }
                }
            }
        },
        select: function() {
            if (!this.selected) return;
            var data = this.selected.data();
            this.trigger("selectitem.uk.autocomplete", [ data, this ]);
            if (data.value) {
                this.input.val(data.value).trigger("change");
            }
            this.hide();
        },
        show: function() {
            if (this.visible) return;
            this.visible = true;
            this.element.addClass("uk-open");
            if (active && active !== this) {
                active.hide();
            }
            active = this;
            // Update aria
            this.dropdown.attr("aria-expanded", "true");
            return this;
        },
        hide: function() {
            if (!this.visible) return;
            this.visible = false;
            this.element.removeClass("uk-open");
            if (active === this) {
                active = false;
            }
            // Update aria
            this.dropdown.attr("aria-expanded", "false");
            return this;
        },
        request: function() {
            var $this = this, release = function(data) {
                if (data) {
                    $this.render(data);
                }
                $this.element.removeClass($this.options.loadingClass);
            };
            this.element.addClass(this.options.loadingClass);
            if (this.options.source) {
                var source = this.options.source;
                switch (typeof this.options.source) {
                  case "function":
                    this.options.source.apply(this, [ release ]);
                    break;

                  case "object":
                    if (source.length) {
                        var items = [];
                        source.forEach(function(item) {
                            if (item.value && item.value.toLowerCase().indexOf($this.value.toLowerCase()) != -1) {
                                items.push(item);
                            }
                        });
                        release(items);
                    }
                    break;

                  case "string":
                    var params = {};
                    params[this.options.param] = this.value;
                    UI.$.ajax({
                        url: this.options.source,
                        data: params,
                        type: this.options.method,
                        dataType: "json"
                    }).done(function(json) {
                        release(json || []);
                    });
                    break;

                  default:
                    release(null);
                }
            } else {
                this.element.removeClass($this.options.loadingClass);
            }
        },
        render: function(data) {
            var $this = this;
            this.dropdown.empty();
            this.selected = false;
            if (this.options.renderer) {
                this.options.renderer.apply(this, [ data ]);
            } else if (data && data.length) {
                this.dropdown.append(this.template({
                    items: data
                }));
                this.show();
                this.trigger("show.uk.autocomplete");
            }
            return this;
        }
    });
    return UI.autocomplete;
});

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-datepicker", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    // Datepicker
    var active = false, dropdown, moment;
    UI.component("datepicker", {
        defaults: {
            mobile: false,
            weekstart: 1,
            i18n: {
                months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                weekdays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ]
            },
            format: "DD.MM.YYYY",
            offsettop: 5,
            maxDate: false,
            minDate: false,
            pos: "auto",
            template: function(data, opts) {
                var content = "", maxDate, minDate, i;
                if (opts.maxDate !== false) {
                    maxDate = isNaN(opts.maxDate) ? moment(opts.maxDate, opts.format) : moment().add(opts.maxDate, "days");
                }
                if (opts.minDate !== false) {
                    minDate = isNaN(opts.minDate) ? moment(opts.minDate, opts.format) : moment().add(opts.minDate - 1, "days");
                }
                content += '<div class="uk-datepicker-nav">';
                content += '<a href="" class="uk-datepicker-previous"></a>';
                content += '<a href="" class="uk-datepicker-next"></a>';
                if (UI.formSelect) {
                    var currentyear = new Date().getFullYear(), options = [], months, years, minYear, maxYear;
                    for (i = 0; i < opts.i18n.months.length; i++) {
                        if (i == data.month) {
                            options.push('<option value="' + i + '" selected>' + opts.i18n.months[i] + "</option>");
                        } else {
                            options.push('<option value="' + i + '">' + opts.i18n.months[i] + "</option>");
                        }
                    }
                    months = '<span class="uk-form-select">' + opts.i18n.months[data.month] + '<select class="update-picker-month">' + options.join("") + "</select></span>";
                    // --
                    options = [];
                    minYear = minDate ? minDate.year() : currentyear - 50;
                    maxYear = maxDate ? maxDate.year() : currentyear + 20;
                    for (i = minYear; i <= maxYear; i++) {
                        if (i == data.year) {
                            options.push('<option value="' + i + '" selected>' + i + "</option>");
                        } else {
                            options.push('<option value="' + i + '">' + i + "</option>");
                        }
                    }
                    years = '<span class="uk-form-select">' + data.year + '<select class="update-picker-year">' + options.join("") + "</select></span>";
                    content += '<div class="uk-datepicker-heading">' + months + " " + years + "</div>";
                } else {
                    content += '<div class="uk-datepicker-heading">' + opts.i18n.months[data.month] + " " + data.year + "</div>";
                }
                content += "</div>";
                content += '<table class="uk-datepicker-table">';
                content += "<thead>";
                for (i = 0; i < data.weekdays.length; i++) {
                    if (data.weekdays[i]) {
                        content += "<th>" + data.weekdays[i] + "</th>";
                    }
                }
                content += "</thead>";
                content += "<tbody>";
                for (i = 0; i < data.days.length; i++) {
                    if (data.days[i] && data.days[i].length) {
                        content += "<tr>";
                        for (var d = 0; d < data.days[i].length; d++) {
                            if (data.days[i][d]) {
                                var day = data.days[i][d], cls = [];
                                if (!day.inmonth) cls.push("uk-datepicker-table-muted");
                                if (day.selected) cls.push("uk-active");
                                if (maxDate && day.day > maxDate) cls.push("uk-datepicker-date-disabled uk-datepicker-table-muted");
                                if (minDate && minDate > day.day) cls.push("uk-datepicker-date-disabled uk-datepicker-table-muted");
                                content += '<td><a href="" class="' + cls.join(" ") + '" data-date="' + day.day.format() + '">' + day.day.format("D") + "</a></td>";
                            }
                        }
                        content += "</tr>";
                    }
                }
                content += "</tbody>";
                content += "</table>";
                return content;
            }
        },
        boot: function() {
            UI.$win.on("resize orientationchange", function() {
                if (active) {
                    active.hide();
                }
            });
            // init code
            UI.$html.on("focus.datepicker.uikit", "[data-uk-datepicker]", function(e) {
                var ele = UI.$(this);
                if (!ele.data("datepicker")) {
                    e.preventDefault();
                    var obj = UI.datepicker(ele, UI.Utils.options(ele.attr("data-uk-datepicker")));
                    ele.trigger("focus");
                }
            });
            UI.$html.on("click.datepicker.uikit", function(e) {
                var target = UI.$(e.target);
                if (active && target[0] != dropdown[0] && !target.data("datepicker") && !target.parents(".uk-datepicker:first").length) {
                    active.hide();
                }
            });
        },
        init: function() {
            // use native datepicker on touch devices
            if (UI.support.touch && this.element.attr("type") == "date" && !this.options.mobile) {
                return;
            }
            var $this = this;
            this.current = this.element.val() ? moment(this.element.val(), this.options.format) : moment();
            this.on("click focus", function() {
                if (active !== $this) $this.pick(this.value ? this.value : $this.options.minDate ? $this.options.minDate : "");
            }).on("change", function() {
                if ($this.element.val() && !moment($this.element.val(), $this.options.format).isValid()) {
                    $this.element.val(moment().format($this.options.format));
                }
            });
            // init dropdown
            if (!dropdown) {
                dropdown = UI.$('<div class="uk-dropdown uk-datepicker"></div>');
                dropdown.on("click", ".uk-datepicker-next, .uk-datepicker-previous, [data-date]", function(e) {
                    e.stopPropagation();
                    e.preventDefault();
                    var ele = UI.$(this);
                    if (ele.hasClass("uk-datepicker-date-disabled")) return false;
                    if (ele.is("[data-date]")) {
                        active.element.val(moment(ele.data("date")).format(active.options.format)).trigger("change");
                        dropdown.hide();
                        active = false;
                    } else {
                        active.add(1 * (ele.hasClass("uk-datepicker-next") ? 1 : -1), "months");
                    }
                });
                dropdown.on("change", ".update-picker-month, .update-picker-year", function() {
                    var select = UI.$(this);
                    active[select.is(".update-picker-year") ? "setYear" : "setMonth"](Number(select.val()));
                });
                dropdown.appendTo("body");
            }
        },
        pick: function(initdate) {
            var offset = this.element.offset(), css = {
                left: offset.left,
                right: ""
            };
            this.current = initdate ? moment(initdate, this.options.format) : moment();
            this.initdate = this.current.format("YYYY-MM-DD");
            this.update();
            if (UI.langdirection == "right") {
                css.right = window.innerWidth - (css.left + this.element.outerWidth());
                css.left = "";
            }
            var posTop = offset.top - this.element.outerHeight() + this.element.height() - this.options.offsettop - dropdown.outerHeight(), posBottom = offset.top + this.element.outerHeight() + this.options.offsettop;
            css.top = posBottom;
            if (this.options.pos == "top") {
                css.top = posTop;
            } else if (this.options.pos == "auto" && (window.innerHeight - posBottom - dropdown.outerHeight() < 0 && posTop >= 0)) {
                css.top = posTop;
            }
            dropdown.css(css).show();
            this.trigger("show.uk.datepicker");
            active = this;
        },
        add: function(unit, value) {
            this.current.add(unit, value);
            this.update();
        },
        setMonth: function(month) {
            this.current.month(month);
            this.update();
        },
        setYear: function(year) {
            this.current.year(year);
            this.update();
        },
        update: function() {
            var data = this.getRows(this.current.year(), this.current.month()), tpl = this.options.template(data, this.options);
            dropdown.html(tpl);
            this.trigger("update.uk.datepicker");
        },
        getRows: function(year, month) {
            var opts = this.options, now = moment().format("YYYY-MM-DD"), days = [ 31, year % 4 === 0 && year % 100 !== 0 || year % 400 === 0 ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ][month], before = new Date(year, month, 1).getDay(), data = {
                month: month,
                year: year,
                weekdays: [],
                days: []
            }, row = [];
            data.weekdays = function() {
                for (var i = 0, arr = []; i < 7; i++) {
                    var day = i + (opts.weekstart || 0);
                    while (day >= 7) {
                        day -= 7;
                    }
                    arr.push(opts.i18n.weekdays[day]);
                }
                return arr;
            }();
            if (opts.weekstart && opts.weekstart > 0) {
                before -= opts.weekstart;
                if (before < 0) {
                    before += 7;
                }
            }
            var cells = days + before, after = cells;
            while (after > 7) {
                after -= 7;
            }
            cells += 7 - after;
            var day, isDisabled, isSelected, isToday, isInMonth;
            for (var i = 0, r = 0; i < cells; i++) {
                day = new Date(year, month, 1 + (i - before));
                isDisabled = opts.mindate && day < opts.mindate || opts.maxdate && day > opts.maxdate;
                isInMonth = !(i < before || i >= days + before);
                day = moment(day);
                isSelected = this.initdate == day.format("YYYY-MM-DD");
                isToday = now == day.format("YYYY-MM-DD");
                row.push({
                    selected: isSelected,
                    today: isToday,
                    disabled: isDisabled,
                    day: day,
                    inmonth: isInMonth
                });
                if (++r === 7) {
                    data.days.push(row);
                    row = [];
                    r = 0;
                }
            }
            return data;
        },
        hide: function() {
            if (active && active === this) {
                dropdown.hide();
                active = false;
                this.trigger("hide.uk.datepicker");
            }
        }
    });
    //! moment.js
    //! version : 2.8.3
    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
    //! license : MIT
    //! momentjs.com
    moment = function(undefined) {
        /************************************
            Constants
        ************************************/
        var moment, VERSION = "2.8.3", // the global-scope this is NOT the global object in Node.js
        globalScope = typeof global !== "undefined" ? global : this, oldGlobalMoment, round = Math.round, hasOwnProperty = Object.prototype.hasOwnProperty, i, YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, // internal storage for locale config files
        locales = {}, // extra moment internal properties (plugins register props here)
        momentProperties = [], // check for nodeJS
        hasModule = typeof module !== "undefined" && module.exports, // ASP.NET json date format regex
        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i, aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/, // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/, // format tokens
        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g, // parsing token regexes
        parseTokenOneOrTwoDigits = /\d\d?/, // 0 - 99
        parseTokenOneToThreeDigits = /\d{1,3}/, // 0 - 999
        parseTokenOneToFourDigits = /\d{1,4}/, // 0 - 9999
        parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, // -999,999 - 999,999
        parseTokenDigits = /\d+/, // nonzero number of digits
        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.
        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        parseTokenT = /T/i, // T (ISO separator)
        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        parseTokenOrdinal = /\d{1,2}/, //strict parsing regexes
        parseTokenOneDigit = /\d/, // 0 - 9
        parseTokenTwoDigits = /\d\d/, // 00 - 99
        parseTokenThreeDigits = /\d{3}/, // 000 - 999
        parseTokenFourDigits = /\d{4}/, // 0000 - 9999
        parseTokenSixDigits = /[+-]?\d{6}/, // -999,999 - 999,999
        parseTokenSignedNumber = /[+-]?\d+/, // -inf - inf
        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, isoFormat = "YYYY-MM-DDTHH:mm:ssZ", isoDates = [ [ "YYYYYY-MM-DD", /[+-]\d{6}-\d{2}-\d{2}/ ], [ "YYYY-MM-DD", /\d{4}-\d{2}-\d{2}/ ], [ "GGGG-[W]WW-E", /\d{4}-W\d{2}-\d/ ], [ "GGGG-[W]WW", /\d{4}-W\d{2}/ ], [ "YYYY-DDD", /\d{4}-\d{3}/ ] ], // iso time formats and regexes
        isoTimes = [ [ "HH:mm:ss.SSSS", /(T| )\d\d:\d\d:\d\d\.\d+/ ], [ "HH:mm:ss", /(T| )\d\d:\d\d:\d\d/ ], [ "HH:mm", /(T| )\d\d:\d\d/ ], [ "HH", /(T| )\d\d/ ] ], // timezone chunker '+10:00' > ['10', '00'] or '-1530' > ['-15', '30']
        parseTimezoneChunker = /([\+\-]|\d\d)/gi, // getter and setter names
        proxyGettersAndSetters = "Date|Hours|Minutes|Seconds|Milliseconds".split("|"), unitMillisecondFactors = {
            Milliseconds: 1,
            Seconds: 1e3,
            Minutes: 6e4,
            Hours: 36e5,
            Days: 864e5,
            Months: 2592e6,
            Years: 31536e6
        }, unitAliases = {
            ms: "millisecond",
            s: "second",
            m: "minute",
            h: "hour",
            d: "day",
            D: "date",
            w: "week",
            W: "isoWeek",
            M: "month",
            Q: "quarter",
            y: "year",
            DDD: "dayOfYear",
            e: "weekday",
            E: "isoWeekday",
            gg: "weekYear",
            GG: "isoWeekYear"
        }, camelFunctions = {
            dayofyear: "dayOfYear",
            isoweekday: "isoWeekday",
            isoweek: "isoWeek",
            weekyear: "weekYear",
            isoweekyear: "isoWeekYear"
        }, // format function strings
        formatFunctions = {}, // default relative time thresholds
        relativeTimeThresholds = {
            s: 45,
            // seconds to minute
            m: 45,
            // minutes to hour
            h: 22,
            // hours to day
            d: 26,
            // days to month
            M: 11
        }, // tokens to ordinalize and pad
        ordinalizeTokens = "DDD w W M D d".split(" "), paddedTokens = "M D H h m s w W".split(" "), formatTokenFunctions = {
            M: function() {
                return this.month() + 1;
            },
            MMM: function(format) {
                return this.localeData().monthsShort(this, format);
            },
            MMMM: function(format) {
                return this.localeData().months(this, format);
            },
            D: function() {
                return this.date();
            },
            DDD: function() {
                return this.dayOfYear();
            },
            d: function() {
                return this.day();
            },
            dd: function(format) {
                return this.localeData().weekdaysMin(this, format);
            },
            ddd: function(format) {
                return this.localeData().weekdaysShort(this, format);
            },
            dddd: function(format) {
                return this.localeData().weekdays(this, format);
            },
            w: function() {
                return this.week();
            },
            W: function() {
                return this.isoWeek();
            },
            YY: function() {
                return leftZeroFill(this.year() % 100, 2);
            },
            YYYY: function() {
                return leftZeroFill(this.year(), 4);
            },
            YYYYY: function() {
                return leftZeroFill(this.year(), 5);
            },
            YYYYYY: function() {
                var y = this.year(), sign = y >= 0 ? "+" : "-";
                return sign + leftZeroFill(Math.abs(y), 6);
            },
            gg: function() {
                return leftZeroFill(this.weekYear() % 100, 2);
            },
            gggg: function() {
                return leftZeroFill(this.weekYear(), 4);
            },
            ggggg: function() {
                return leftZeroFill(this.weekYear(), 5);
            },
            GG: function() {
                return leftZeroFill(this.isoWeekYear() % 100, 2);
            },
            GGGG: function() {
                return leftZeroFill(this.isoWeekYear(), 4);
            },
            GGGGG: function() {
                return leftZeroFill(this.isoWeekYear(), 5);
            },
            e: function() {
                return this.weekday();
            },
            E: function() {
                return this.isoWeekday();
            },
            a: function() {
                return this.localeData().meridiem(this.hours(), this.minutes(), true);
            },
            A: function() {
                return this.localeData().meridiem(this.hours(), this.minutes(), false);
            },
            H: function() {
                return this.hours();
            },
            h: function() {
                return this.hours() % 12 || 12;
            },
            m: function() {
                return this.minutes();
            },
            s: function() {
                return this.seconds();
            },
            S: function() {
                return toInt(this.milliseconds() / 100);
            },
            SS: function() {
                return leftZeroFill(toInt(this.milliseconds() / 10), 2);
            },
            SSS: function() {
                return leftZeroFill(this.milliseconds(), 3);
            },
            SSSS: function() {
                return leftZeroFill(this.milliseconds(), 3);
            },
            Z: function() {
                var a = -this.zone(), b = "+";
                if (a < 0) {
                    a = -a;
                    b = "-";
                }
                return b + leftZeroFill(toInt(a / 60), 2) + ":" + leftZeroFill(toInt(a) % 60, 2);
            },
            ZZ: function() {
                var a = -this.zone(), b = "+";
                if (a < 0) {
                    a = -a;
                    b = "-";
                }
                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
            },
            z: function() {
                return this.zoneAbbr();
            },
            zz: function() {
                return this.zoneName();
            },
            X: function() {
                return this.unix();
            },
            Q: function() {
                return this.quarter();
            }
        }, deprecations = {}, lists = [ "months", "monthsShort", "weekdays", "weekdaysShort", "weekdaysMin" ];
        // Pick the first defined of two or three arguments. dfl comes from
        // default.
        function dfl(a, b, c) {
            switch (arguments.length) {
              case 2:
                return a != null ? a : b;

              case 3:
                return a != null ? a : b != null ? b : c;

              default:
                throw new Error("Implement me");
            }
        }
        function hasOwnProp(a, b) {
            return hasOwnProperty.call(a, b);
        }
        function defaultParsingFlags() {
            // We need to deep clone this object, and es5 standard is not very
            // helpful.
            return {
                empty: false,
                unusedTokens: [],
                unusedInput: [],
                overflow: -2,
                charsLeftOver: 0,
                nullInput: false,
                invalidMonth: null,
                invalidFormat: false,
                userInvalidated: false,
                iso: false
            };
        }
        function printMsg(msg) {
            if (moment.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
                console.warn("Deprecation warning: " + msg);
            }
        }
        function deprecate(msg, fn) {
            var firstTime = true;
            return extend(function() {
                if (firstTime) {
                    printMsg(msg);
                    firstTime = false;
                }
                return fn.apply(this, arguments);
            }, fn);
        }
        function deprecateSimple(name, msg) {
            if (!deprecations[name]) {
                printMsg(msg);
                deprecations[name] = true;
            }
        }
        function padToken(func, count) {
            return function(a) {
                return leftZeroFill(func.call(this, a), count);
            };
        }
        function ordinalizeToken(func, period) {
            return function(a) {
                return this.localeData().ordinal(func.call(this, a), period);
            };
        }
        while (ordinalizeTokens.length) {
            i = ordinalizeTokens.pop();
            formatTokenFunctions[i + "o"] = ordinalizeToken(formatTokenFunctions[i], i);
        }
        while (paddedTokens.length) {
            i = paddedTokens.pop();
            formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
        }
        formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);
        /************************************
            Constructors
        ************************************/
        function Locale() {}
        // Moment prototype object
        function Moment(config, skipOverflow) {
            if (skipOverflow !== false) {
                checkOverflow(config);
            }
            copyConfig(this, config);
            this._d = new Date(+config._d);
        }
        // Duration Constructor
        function Duration(duration) {
            var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
            // representation for dateAddRemove
            this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5;
            // 1000 * 60 * 60
            // Because of dateAddRemove treats 24 hours as different from a
            // day when working around DST, we need to store them separately
            this._days = +days + weeks * 7;
            // It is impossible translate months into days without knowing
            // which months you are are talking about, so we have to store
            // it separately.
            this._months = +months + quarters * 3 + years * 12;
            this._data = {};
            this._locale = moment.localeData();
            this._bubble();
        }
        /************************************
            Helpers
        ************************************/
        function extend(a, b) {
            for (var i in b) {
                if (hasOwnProp(b, i)) {
                    a[i] = b[i];
                }
            }
            if (hasOwnProp(b, "toString")) {
                a.toString = b.toString;
            }
            if (hasOwnProp(b, "valueOf")) {
                a.valueOf = b.valueOf;
            }
            return a;
        }
        function copyConfig(to, from) {
            var i, prop, val;
            if (typeof from._isAMomentObject !== "undefined") {
                to._isAMomentObject = from._isAMomentObject;
            }
            if (typeof from._i !== "undefined") {
                to._i = from._i;
            }
            if (typeof from._f !== "undefined") {
                to._f = from._f;
            }
            if (typeof from._l !== "undefined") {
                to._l = from._l;
            }
            if (typeof from._strict !== "undefined") {
                to._strict = from._strict;
            }
            if (typeof from._tzm !== "undefined") {
                to._tzm = from._tzm;
            }
            if (typeof from._isUTC !== "undefined") {
                to._isUTC = from._isUTC;
            }
            if (typeof from._offset !== "undefined") {
                to._offset = from._offset;
            }
            if (typeof from._pf !== "undefined") {
                to._pf = from._pf;
            }
            if (typeof from._locale !== "undefined") {
                to._locale = from._locale;
            }
            if (momentProperties.length > 0) {
                for (i in momentProperties) {
                    prop = momentProperties[i];
                    val = from[prop];
                    if (typeof val !== "undefined") {
                        to[prop] = val;
                    }
                }
            }
            return to;
        }
        function absRound(number) {
            if (number < 0) {
                return Math.ceil(number);
            } else {
                return Math.floor(number);
            }
        }
        // left zero fill a number
        // see http://jsperf.com/left-zero-filling for performance comparison
        function leftZeroFill(number, targetLength, forceSign) {
            var output = "" + Math.abs(number), sign = number >= 0;
            while (output.length < targetLength) {
                output = "0" + output;
            }
            return (sign ? forceSign ? "+" : "" : "-") + output;
        }
        function positiveMomentsDifference(base, other) {
            var res = {
                milliseconds: 0,
                months: 0
            };
            res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
            if (base.clone().add(res.months, "M").isAfter(other)) {
                --res.months;
            }
            res.milliseconds = +other - +base.clone().add(res.months, "M");
            return res;
        }
        function momentsDifference(base, other) {
            var res;
            other = makeAs(other, base);
            if (base.isBefore(other)) {
                res = positiveMomentsDifference(base, other);
            } else {
                res = positiveMomentsDifference(other, base);
                res.milliseconds = -res.milliseconds;
                res.months = -res.months;
            }
            return res;
        }
        // TODO: remove 'name' arg after deprecation is removed
        function createAdder(direction, name) {
            return function(val, period) {
                var dur, tmp;
                //invert the arguments, but complain about it
                if (period !== null && !isNaN(+period)) {
                    deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period).");
                    tmp = val;
                    val = period;
                    period = tmp;
                }
                val = typeof val === "string" ? +val : val;
                dur = moment.duration(val, period);
                addOrSubtractDurationFromMoment(this, dur, direction);
                return this;
            };
        }
        function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
            var milliseconds = duration._milliseconds, days = duration._days, months = duration._months;
            updateOffset = updateOffset == null ? true : updateOffset;
            if (milliseconds) {
                mom._d.setTime(+mom._d + milliseconds * isAdding);
            }
            if (days) {
                rawSetter(mom, "Date", rawGetter(mom, "Date") + days * isAdding);
            }
            if (months) {
                rawMonthSetter(mom, rawGetter(mom, "Month") + months * isAdding);
            }
            if (updateOffset) {
                moment.updateOffset(mom, days || months);
            }
        }
        // check if is an array
        function isArray(input) {
            return Object.prototype.toString.call(input) === "[object Array]";
        }
        function isDate(input) {
            return Object.prototype.toString.call(input) === "[object Date]" || input instanceof Date;
        }
        // compare two arrays, return the number of differences
        function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
            for (i = 0; i < len; i++) {
                if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                    diffs++;
                }
            }
            return diffs + lengthDiff;
        }
        function normalizeUnits(units) {
            if (units) {
                var lowered = units.toLowerCase().replace(/(.)s$/, "$1");
                units = unitAliases[units] || camelFunctions[lowered] || lowered;
            }
            return units;
        }
        function normalizeObjectUnits(inputObject) {
            var normalizedInput = {}, normalizedProp, prop;
            for (prop in inputObject) {
                if (hasOwnProp(inputObject, prop)) {
                    normalizedProp = normalizeUnits(prop);
                    if (normalizedProp) {
                        normalizedInput[normalizedProp] = inputObject[prop];
                    }
                }
            }
            return normalizedInput;
        }
        function makeList(field) {
            var count, setter;
            if (field.indexOf("week") === 0) {
                count = 7;
                setter = "day";
            } else if (field.indexOf("month") === 0) {
                count = 12;
                setter = "month";
            } else {
                return;
            }
            moment[field] = function(format, index) {
                var i, getter, method = moment._locale[field], results = [];
                if (typeof format === "number") {
                    index = format;
                    format = undefined;
                }
                getter = function(i) {
                    var m = moment().utc().set(setter, i);
                    return method.call(moment._locale, m, format || "");
                };
                if (index != null) {
                    return getter(index);
                } else {
                    for (i = 0; i < count; i++) {
                        results.push(getter(i));
                    }
                    return results;
                }
            };
        }
        function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion, value = 0;
            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                if (coercedNumber >= 0) {
                    value = Math.floor(coercedNumber);
                } else {
                    value = Math.ceil(coercedNumber);
                }
            }
            return value;
        }
        function daysInMonth(year, month) {
            return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
        }
        function weeksInYear(year, dow, doy) {
            return weekOfYear(moment([ year, 11, 31 + dow - doy ]), dow, doy).week;
        }
        function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
        }
        function isLeapYear(year) {
            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
        }
        function checkOverflow(m) {
            var overflow;
            if (m._a && m._pf.overflow === -2) {
                overflow = m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH : m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE : m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR : m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE : m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND : m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND : -1;
                if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                    overflow = DATE;
                }
                m._pf.overflow = overflow;
            }
        }
        function isValid(m) {
            if (m._isValid == null) {
                m._isValid = !isNaN(m._d.getTime()) && m._pf.overflow < 0 && !m._pf.empty && !m._pf.invalidMonth && !m._pf.nullInput && !m._pf.invalidFormat && !m._pf.userInvalidated;
                if (m._strict) {
                    m._isValid = m._isValid && m._pf.charsLeftOver === 0 && m._pf.unusedTokens.length === 0;
                }
            }
            return m._isValid;
        }
        function normalizeLocale(key) {
            return key ? key.toLowerCase().replace("_", "-") : key;
        }
        // pick the locale from the array
        // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
        // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
        function chooseLocale(names) {
            var i = 0, j, next, locale, split;
            while (i < names.length) {
                split = normalizeLocale(names[i]).split("-");
                j = split.length;
                next = normalizeLocale(names[i + 1]);
                next = next ? next.split("-") : null;
                while (j > 0) {
                    locale = loadLocale(split.slice(0, j).join("-"));
                    if (locale) {
                        return locale;
                    }
                    if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                        //the next array item is better than a shallower substring of this one
                        break;
                    }
                    j--;
                }
                i++;
            }
            return null;
        }
        function loadLocale(name) {
            var oldLocale = null;
            if (!locales[name] && hasModule) {
                try {
                    oldLocale = moment.locale();
                    require("./locale/" + name);
                    // because defineLocale currently also sets the global locale, we want to undo that for lazy loaded locales
                    moment.locale(oldLocale);
                } catch (e) {}
            }
            return locales[name];
        }
        // Return a moment from input, that is local/utc/zone equivalent to model.
        function makeAs(input, model) {
            return model._isUTC ? moment(input).zone(model._offset || 0) : moment(input).local();
        }
        /************************************
            Locale
        ************************************/
        extend(Locale.prototype, {
            set: function(config) {
                var prop, i;
                for (i in config) {
                    prop = config[i];
                    if (typeof prop === "function") {
                        this[i] = prop;
                    } else {
                        this["_" + i] = prop;
                    }
                }
            },
            _months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
            months: function(m) {
                return this._months[m.month()];
            },
            _monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
            monthsShort: function(m) {
                return this._monthsShort[m.month()];
            },
            monthsParse: function(monthName) {
                var i, mom, regex;
                if (!this._monthsParse) {
                    this._monthsParse = [];
                }
                for (i = 0; i < 12; i++) {
                    // make the regex if we don't have it already
                    if (!this._monthsParse[i]) {
                        mom = moment.utc([ 2e3, i ]);
                        regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
                        this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
                    }
                    // test the regex
                    if (this._monthsParse[i].test(monthName)) {
                        return i;
                    }
                }
            },
            _weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
            weekdays: function(m) {
                return this._weekdays[m.day()];
            },
            _weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
            weekdaysShort: function(m) {
                return this._weekdaysShort[m.day()];
            },
            _weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
            weekdaysMin: function(m) {
                return this._weekdaysMin[m.day()];
            },
            weekdaysParse: function(weekdayName) {
                var i, mom, regex;
                if (!this._weekdaysParse) {
                    this._weekdaysParse = [];
                }
                for (i = 0; i < 7; i++) {
                    // make the regex if we don't have it already
                    if (!this._weekdaysParse[i]) {
                        mom = moment([ 2e3, 1 ]).day(i);
                        regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
                        this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
                    }
                    // test the regex
                    if (this._weekdaysParse[i].test(weekdayName)) {
                        return i;
                    }
                }
            },
            _longDateFormat: {
                LT: "h:mm A",
                L: "MM/DD/YYYY",
                LL: "MMMM D, YYYY",
                LLL: "MMMM D, YYYY LT",
                LLLL: "dddd, MMMM D, YYYY LT"
            },
            longDateFormat: function(key) {
                var output = this._longDateFormat[key];
                if (!output && this._longDateFormat[key.toUpperCase()]) {
                    output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function(val) {
                        return val.slice(1);
                    });
                    this._longDateFormat[key] = output;
                }
                return output;
            },
            isPM: function(input) {
                // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
                // Using charAt should be more compatible.
                return (input + "").toLowerCase().charAt(0) === "p";
            },
            _meridiemParse: /[ap]\.?m?\.?/i,
            meridiem: function(hours, minutes, isLower) {
                if (hours > 11) {
                    return isLower ? "pm" : "PM";
                } else {
                    return isLower ? "am" : "AM";
                }
            },
            _calendar: {
                sameDay: "[Today at] LT",
                nextDay: "[Tomorrow at] LT",
                nextWeek: "dddd [at] LT",
                lastDay: "[Yesterday at] LT",
                lastWeek: "[Last] dddd [at] LT",
                sameElse: "L"
            },
            calendar: function(key, mom) {
                var output = this._calendar[key];
                return typeof output === "function" ? output.apply(mom) : output;
            },
            _relativeTime: {
                future: "in %s",
                past: "%s ago",
                s: "a few seconds",
                m: "a minute",
                mm: "%d minutes",
                h: "an hour",
                hh: "%d hours",
                d: "a day",
                dd: "%d days",
                M: "a month",
                MM: "%d months",
                y: "a year",
                yy: "%d years"
            },
            relativeTime: function(number, withoutSuffix, string, isFuture) {
                var output = this._relativeTime[string];
                return typeof output === "function" ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
            },
            pastFuture: function(diff, output) {
                var format = this._relativeTime[diff > 0 ? "future" : "past"];
                return typeof format === "function" ? format(output) : format.replace(/%s/i, output);
            },
            ordinal: function(number) {
                return this._ordinal.replace("%d", number);
            },
            _ordinal: "%d",
            preparse: function(string) {
                return string;
            },
            postformat: function(string) {
                return string;
            },
            week: function(mom) {
                return weekOfYear(mom, this._week.dow, this._week.doy).week;
            },
            _week: {
                dow: 0,
                // Sunday is the first day of the week.
                doy: 6
            },
            _invalidDate: "Invalid date",
            invalidDate: function() {
                return this._invalidDate;
            }
        });
        /************************************
            Formatting
        ************************************/
        function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
                return input.replace(/^\[|\]$/g, "");
            }
            return input.replace(/\\/g, "");
        }
        function makeFormatFunction(format) {
            var array = format.match(formattingTokens), i, length;
            for (i = 0, length = array.length; i < length; i++) {
                if (formatTokenFunctions[array[i]]) {
                    array[i] = formatTokenFunctions[array[i]];
                } else {
                    array[i] = removeFormattingTokens(array[i]);
                }
            }
            return function(mom) {
                var output = "";
                for (i = 0; i < length; i++) {
                    output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
                }
                return output;
            };
        }
        // format date using native date object
        function formatMoment(m, format) {
            if (!m.isValid()) {
                return m.localeData().invalidDate();
            }
            format = expandFormat(format, m.localeData());
            if (!formatFunctions[format]) {
                formatFunctions[format] = makeFormatFunction(format);
            }
            return formatFunctions[format](m);
        }
        function expandFormat(format, locale) {
            var i = 5;
            function replaceLongDateFormatTokens(input) {
                return locale.longDateFormat(input) || input;
            }
            localFormattingTokens.lastIndex = 0;
            while (i >= 0 && localFormattingTokens.test(format)) {
                format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
                localFormattingTokens.lastIndex = 0;
                i -= 1;
            }
            return format;
        }
        /************************************
            Parsing
        ************************************/
        // get the regex to find the next token
        function getParseRegexForToken(token, config) {
            var a, strict = config._strict;
            switch (token) {
              case "Q":
                return parseTokenOneDigit;

              case "DDDD":
                return parseTokenThreeDigits;

              case "YYYY":
              case "GGGG":
              case "gggg":
                return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;

              case "Y":
              case "G":
              case "g":
                return parseTokenSignedNumber;

              case "YYYYYY":
              case "YYYYY":
              case "GGGGG":
              case "ggggg":
                return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;

              case "S":
                if (strict) {
                    return parseTokenOneDigit;
                }

              /* falls through */
                case "SS":
                if (strict) {
                    return parseTokenTwoDigits;
                }

              /* falls through */
                case "SSS":
                if (strict) {
                    return parseTokenThreeDigits;
                }

              /* falls through */
                case "DDD":
                return parseTokenOneToThreeDigits;

              case "MMM":
              case "MMMM":
              case "dd":
              case "ddd":
              case "dddd":
                return parseTokenWord;

              case "a":
              case "A":
                return config._locale._meridiemParse;

              case "X":
                return parseTokenTimestampMs;

              case "Z":
              case "ZZ":
                return parseTokenTimezone;

              case "T":
                return parseTokenT;

              case "SSSS":
                return parseTokenDigits;

              case "MM":
              case "DD":
              case "YY":
              case "GG":
              case "gg":
              case "HH":
              case "hh":
              case "mm":
              case "ss":
              case "ww":
              case "WW":
                return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;

              case "M":
              case "D":
              case "d":
              case "H":
              case "h":
              case "m":
              case "s":
              case "w":
              case "W":
              case "e":
              case "E":
                return parseTokenOneOrTwoDigits;

              case "Do":
                return parseTokenOrdinal;

              default:
                a = new RegExp(regexpEscape(unescapeFormat(token.replace("\\", "")), "i"));
                return a;
            }
        }
        function timezoneMinutesFromString(string) {
            string = string || "";
            var possibleTzMatches = string.match(parseTokenTimezone) || [], tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [], parts = (tzChunk + "").match(parseTimezoneChunker) || [ "-", 0, 0 ], minutes = +(parts[1] * 60) + toInt(parts[2]);
            return parts[0] === "+" ? -minutes : minutes;
        }
        // function to convert string input to date
        function addTimeToArrayFromToken(token, input, config) {
            var a, datePartArray = config._a;
            switch (token) {
              // QUARTER
                case "Q":
                if (input != null) {
                    datePartArray[MONTH] = (toInt(input) - 1) * 3;
                }
                break;

              // MONTH
                case "M":
              // fall through to MM
                case "MM":
                if (input != null) {
                    datePartArray[MONTH] = toInt(input) - 1;
                }
                break;

              case "MMM":
              // fall through to MMMM
                case "MMMM":
                a = config._locale.monthsParse(input);
                // if we didn't find a month name, mark the date as invalid.
                if (a != null) {
                    datePartArray[MONTH] = a;
                } else {
                    config._pf.invalidMonth = input;
                }
                break;

              // DAY OF MONTH
                case "D":
              // fall through to DD
                case "DD":
                if (input != null) {
                    datePartArray[DATE] = toInt(input);
                }
                break;

              case "Do":
                if (input != null) {
                    datePartArray[DATE] = toInt(parseInt(input, 10));
                }
                break;

              // DAY OF YEAR
                case "DDD":
              // fall through to DDDD
                case "DDDD":
                if (input != null) {
                    config._dayOfYear = toInt(input);
                }
                break;

              // YEAR
                case "YY":
                datePartArray[YEAR] = moment.parseTwoDigitYear(input);
                break;

              case "YYYY":
              case "YYYYY":
              case "YYYYYY":
                datePartArray[YEAR] = toInt(input);
                break;

              // AM / PM
                case "a":
              // fall through to A
                case "A":
                config._isPm = config._locale.isPM(input);
                break;

              // 24 HOUR
                case "H":
              // fall through to hh
                case "HH":
              // fall through to hh
                case "h":
              // fall through to hh
                case "hh":
                datePartArray[HOUR] = toInt(input);
                break;

              // MINUTE
                case "m":
              // fall through to mm
                case "mm":
                datePartArray[MINUTE] = toInt(input);
                break;

              // SECOND
                case "s":
              // fall through to ss
                case "ss":
                datePartArray[SECOND] = toInt(input);
                break;

              // MILLISECOND
                case "S":
              case "SS":
              case "SSS":
              case "SSSS":
                datePartArray[MILLISECOND] = toInt(("0." + input) * 1e3);
                break;

              // UNIX TIMESTAMP WITH MS
                case "X":
                config._d = new Date(parseFloat(input) * 1e3);
                break;

              // TIMEZONE
                case "Z":
              // fall through to ZZ
                case "ZZ":
                config._useUTC = true;
                config._tzm = timezoneMinutesFromString(input);
                break;

              // WEEKDAY - human
                case "dd":
              case "ddd":
              case "dddd":
                a = config._locale.weekdaysParse(input);
                // if we didn't get a weekday name, mark the date as invalid
                if (a != null) {
                    config._w = config._w || {};
                    config._w["d"] = a;
                } else {
                    config._pf.invalidWeekday = input;
                }
                break;

              // WEEK, WEEK DAY - numeric
                case "w":
              case "ww":
              case "W":
              case "WW":
              case "d":
              case "e":
              case "E":
                token = token.substr(0, 1);

              /* falls through */
                case "gggg":
              case "GGGG":
              case "GGGGG":
                token = token.substr(0, 2);
                if (input) {
                    config._w = config._w || {};
                    config._w[token] = toInt(input);
                }
                break;

              case "gg":
              case "GG":
                config._w = config._w || {};
                config._w[token] = moment.parseTwoDigitYear(input);
            }
        }
        function dayOfYearFromWeekInfo(config) {
            var w, weekYear, week, weekday, dow, doy, temp;
            w = config._w;
            if (w.GG != null || w.W != null || w.E != null) {
                dow = 1;
                doy = 4;
                // TODO: We need to take the current isoWeekYear, but that depends on
                // how we interpret now (local, utc, fixed offset). So create
                // a now version of current config (take local/utc/offset flags, and
                // create now).
                weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);
                week = dfl(w.W, 1);
                weekday = dfl(w.E, 1);
            } else {
                dow = config._locale._week.dow;
                doy = config._locale._week.doy;
                weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);
                week = dfl(w.w, 1);
                if (w.d != null) {
                    // weekday -- low day numbers are considered next week
                    weekday = w.d;
                    if (weekday < dow) {
                        ++week;
                    }
                } else if (w.e != null) {
                    // local weekday -- counting starts from begining of week
                    weekday = w.e + dow;
                } else {
                    // default to begining of week
                    weekday = dow;
                }
            }
            temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
        // convert an array to a date.
        // the array should mirror the parameters below
        // note: all values past the year are optional and will default to the lowest possible value.
        // [year, month, day , hour, minute, second, millisecond]
        function dateFromConfig(config) {
            var i, date, input = [], currentDate, yearToUse;
            if (config._d) {
                return;
            }
            currentDate = currentDateArray(config);
            //compute day of the year from weeks and weekdays
            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                dayOfYearFromWeekInfo(config);
            }
            //if the day of the year is set, figure out what it is
            if (config._dayOfYear) {
                yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);
                if (config._dayOfYear > daysInYear(yearToUse)) {
                    config._pf._overflowDayOfYear = true;
                }
                date = makeUTCDate(yearToUse, 0, config._dayOfYear);
                config._a[MONTH] = date.getUTCMonth();
                config._a[DATE] = date.getUTCDate();
            }
            // Default to current date.
            // * if no year, month, day of month are given, default to today
            // * if day of month is given, default month and year
            // * if month is given, default only year
            // * if year is given, don't default anything
            for (i = 0; i < 3 && config._a[i] == null; ++i) {
                config._a[i] = input[i] = currentDate[i];
            }
            // Zero out whatever was not defaulted, including time
            for (;i < 7; i++) {
                config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
            }
            config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
            // Apply timezone offset from input. The actual zone can be changed
            // with parseZone.
            if (config._tzm != null) {
                config._d.setUTCMinutes(config._d.getUTCMinutes() + config._tzm);
            }
        }
        function dateFromObject(config) {
            var normalizedInput;
            if (config._d) {
                return;
            }
            normalizedInput = normalizeObjectUnits(config._i);
            config._a = [ normalizedInput.year, normalizedInput.month, normalizedInput.day, normalizedInput.hour, normalizedInput.minute, normalizedInput.second, normalizedInput.millisecond ];
            dateFromConfig(config);
        }
        function currentDateArray(config) {
            var now = new Date();
            if (config._useUTC) {
                return [ now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() ];
            } else {
                return [ now.getFullYear(), now.getMonth(), now.getDate() ];
            }
        }
        // date from string and format string
        function makeDateFromStringAndFormat(config) {
            if (config._f === moment.ISO_8601) {
                parseISO(config);
                return;
            }
            config._a = [];
            config._pf.empty = true;
            // This array is used to make a Date, either with `new Date` or `Date.UTC`
            var string = "" + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0;
            tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
            for (i = 0; i < tokens.length; i++) {
                token = tokens[i];
                parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
                if (parsedInput) {
                    skipped = string.substr(0, string.indexOf(parsedInput));
                    if (skipped.length > 0) {
                        config._pf.unusedInput.push(skipped);
                    }
                    string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                    totalParsedInputLength += parsedInput.length;
                }
                // don't parse if it's not a known token
                if (formatTokenFunctions[token]) {
                    if (parsedInput) {
                        config._pf.empty = false;
                    } else {
                        config._pf.unusedTokens.push(token);
                    }
                    addTimeToArrayFromToken(token, parsedInput, config);
                } else if (config._strict && !parsedInput) {
                    config._pf.unusedTokens.push(token);
                }
            }
            // add remaining unparsed input length to the string
            config._pf.charsLeftOver = stringLength - totalParsedInputLength;
            if (string.length > 0) {
                config._pf.unusedInput.push(string);
            }
            // handle am pm
            if (config._isPm && config._a[HOUR] < 12) {
                config._a[HOUR] += 12;
            }
            // if is 12 am, change hours to 0
            if (config._isPm === false && config._a[HOUR] === 12) {
                config._a[HOUR] = 0;
            }
            dateFromConfig(config);
            checkOverflow(config);
        }
        function unescapeFormat(s) {
            return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
                return p1 || p2 || p3 || p4;
            });
        }
        // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
        function regexpEscape(s) {
            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
        }
        // date from string and array of format strings
        function makeDateFromStringAndArray(config) {
            var tempConfig, bestMoment, scoreToBeat, i, currentScore;
            if (config._f.length === 0) {
                config._pf.invalidFormat = true;
                config._d = new Date(NaN);
                return;
            }
            for (i = 0; i < config._f.length; i++) {
                currentScore = 0;
                tempConfig = copyConfig({}, config);
                if (config._useUTC != null) {
                    tempConfig._useUTC = config._useUTC;
                }
                tempConfig._pf = defaultParsingFlags();
                tempConfig._f = config._f[i];
                makeDateFromStringAndFormat(tempConfig);
                if (!isValid(tempConfig)) {
                    continue;
                }
                // if there is any input that was not parsed add a penalty for that format
                currentScore += tempConfig._pf.charsLeftOver;
                //or tokens
                currentScore += tempConfig._pf.unusedTokens.length * 10;
                tempConfig._pf.score = currentScore;
                if (scoreToBeat == null || currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }
            extend(config, bestMoment || tempConfig);
        }
        // date from iso format
        function parseISO(config) {
            var i, l, string = config._i, match = isoRegex.exec(string);
            if (match) {
                config._pf.iso = true;
                for (i = 0, l = isoDates.length; i < l; i++) {
                    if (isoDates[i][1].exec(string)) {
                        // match[5] should be 'T' or undefined
                        config._f = isoDates[i][0] + (match[6] || " ");
                        break;
                    }
                }
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(string)) {
                        config._f += isoTimes[i][0];
                        break;
                    }
                }
                if (string.match(parseTokenTimezone)) {
                    config._f += "Z";
                }
                makeDateFromStringAndFormat(config);
            } else {
                config._isValid = false;
            }
        }
        // date from iso format or fallback
        function makeDateFromString(config) {
            parseISO(config);
            if (config._isValid === false) {
                delete config._isValid;
                moment.createFromInputFallback(config);
            }
        }
        function map(arr, fn) {
            var res = [], i;
            for (i = 0; i < arr.length; ++i) {
                res.push(fn(arr[i], i));
            }
            return res;
        }
        function makeDateFromInput(config) {
            var input = config._i, matched;
            if (input === undefined) {
                config._d = new Date();
            } else if (isDate(input)) {
                config._d = new Date(+input);
            } else if ((matched = aspNetJsonRegex.exec(input)) !== null) {
                config._d = new Date(+matched[1]);
            } else if (typeof input === "string") {
                makeDateFromString(config);
            } else if (isArray(input)) {
                config._a = map(input.slice(0), function(obj) {
                    return parseInt(obj, 10);
                });
                dateFromConfig(config);
            } else if (typeof input === "object") {
                dateFromObject(config);
            } else if (typeof input === "number") {
                // from milliseconds
                config._d = new Date(input);
            } else {
                moment.createFromInputFallback(config);
            }
        }
        function makeDate(y, m, d, h, M, s, ms) {
            //can't just apply() to create a date:
            //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
            var date = new Date(y, m, d, h, M, s, ms);
            //the date constructor doesn't accept years < 1970
            if (y < 1970) {
                date.setFullYear(y);
            }
            return date;
        }
        function makeUTCDate(y) {
            var date = new Date(Date.UTC.apply(null, arguments));
            if (y < 1970) {
                date.setUTCFullYear(y);
            }
            return date;
        }
        function parseWeekday(input, locale) {
            if (typeof input === "string") {
                if (!isNaN(input)) {
                    input = parseInt(input, 10);
                } else {
                    input = locale.weekdaysParse(input);
                    if (typeof input !== "number") {
                        return null;
                    }
                }
            }
            return input;
        }
        /************************************
            Relative Time
        ************************************/
        // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
        function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
            return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
        }
        function relativeTime(posNegDuration, withoutSuffix, locale) {
            var duration = moment.duration(posNegDuration).abs(), seconds = round(duration.as("s")), minutes = round(duration.as("m")), hours = round(duration.as("h")), days = round(duration.as("d")), months = round(duration.as("M")), years = round(duration.as("y")), args = seconds < relativeTimeThresholds.s && [ "s", seconds ] || minutes === 1 && [ "m" ] || minutes < relativeTimeThresholds.m && [ "mm", minutes ] || hours === 1 && [ "h" ] || hours < relativeTimeThresholds.h && [ "hh", hours ] || days === 1 && [ "d" ] || days < relativeTimeThresholds.d && [ "dd", days ] || months === 1 && [ "M" ] || months < relativeTimeThresholds.M && [ "MM", months ] || years === 1 && [ "y" ] || [ "yy", years ];
            args[2] = withoutSuffix;
            args[3] = +posNegDuration > 0;
            args[4] = locale;
            return substituteTimeAgo.apply({}, args);
        }
        /************************************
            Week of Year
        ************************************/
        // firstDayOfWeek       0 = sun, 6 = sat
        //                      the day of the week that starts the week
        //                      (usually sunday or monday)
        // firstDayOfWeekOfYear 0 = sun, 6 = sat
        //                      the first week is the week that contains the first
        //                      of this day of the week
        //                      (eg. ISO weeks use thursday (4))
        function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
            var end = firstDayOfWeekOfYear - firstDayOfWeek, daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(), adjustedMoment;
            if (daysToDayOfWeek > end) {
                daysToDayOfWeek -= 7;
            }
            if (daysToDayOfWeek < end - 7) {
                daysToDayOfWeek += 7;
            }
            adjustedMoment = moment(mom).add(daysToDayOfWeek, "d");
            return {
                week: Math.ceil(adjustedMoment.dayOfYear() / 7),
                year: adjustedMoment.year()
            };
        }
        //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
        function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
            var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;
            d = d === 0 ? 7 : d;
            weekday = weekday != null ? weekday : firstDayOfWeek;
            daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
            dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;
            return {
                year: dayOfYear > 0 ? year : year - 1,
                dayOfYear: dayOfYear > 0 ? dayOfYear : daysInYear(year - 1) + dayOfYear
            };
        }
        /************************************
            Top Level Functions
        ************************************/
        function makeMoment(config) {
            var input = config._i, format = config._f;
            config._locale = config._locale || moment.localeData(config._l);
            if (input === null || format === undefined && input === "") {
                return moment.invalid({
                    nullInput: true
                });
            }
            if (typeof input === "string") {
                config._i = input = config._locale.preparse(input);
            }
            if (moment.isMoment(input)) {
                return new Moment(input, true);
            } else if (format) {
                if (isArray(format)) {
                    makeDateFromStringAndArray(config);
                } else {
                    makeDateFromStringAndFormat(config);
                }
            } else {
                makeDateFromInput(config);
            }
            return new Moment(config);
        }
        moment = function(input, format, locale, strict) {
            var c;
            if (typeof locale === "boolean") {
                strict = locale;
                locale = undefined;
            }
            // object construction must be done this way.
            // https://github.com/moment/moment/issues/1423
            c = {};
            c._isAMomentObject = true;
            c._i = input;
            c._f = format;
            c._l = locale;
            c._strict = strict;
            c._isUTC = false;
            c._pf = defaultParsingFlags();
            return makeMoment(c);
        };
        moment.suppressDeprecationWarnings = false;
        moment.createFromInputFallback = deprecate("moment construction falls back to js Date. This is " + "discouraged and will be removed in upcoming major " + "release. Please refer to " + "https://github.com/moment/moment/issues/1407 for more info.", function(config) {
            config._d = new Date(config._i);
        });
        // Pick a moment m from moments so that m[fn](other) is true for all
        // other. This relies on the function fn to be transitive.
        //
        // moments should either be an array of moment objects or an array, whose
        // first element is an array of moment objects.
        function pickBy(fn, moments) {
            var res, i;
            if (moments.length === 1 && isArray(moments[0])) {
                moments = moments[0];
            }
            if (!moments.length) {
                return moment();
            }
            res = moments[0];
            for (i = 1; i < moments.length; ++i) {
                if (moments[i][fn](res)) {
                    res = moments[i];
                }
            }
            return res;
        }
        moment.min = function() {
            var args = [].slice.call(arguments, 0);
            return pickBy("isBefore", args);
        };
        moment.max = function() {
            var args = [].slice.call(arguments, 0);
            return pickBy("isAfter", args);
        };
        // creating with utc
        moment.utc = function(input, format, locale, strict) {
            var c;
            if (typeof locale === "boolean") {
                strict = locale;
                locale = undefined;
            }
            // object construction must be done this way.
            // https://github.com/moment/moment/issues/1423
            c = {};
            c._isAMomentObject = true;
            c._useUTC = true;
            c._isUTC = true;
            c._l = locale;
            c._i = input;
            c._f = format;
            c._strict = strict;
            c._pf = defaultParsingFlags();
            return makeMoment(c).utc();
        };
        // creating with unix timestamp (in seconds)
        moment.unix = function(input) {
            return moment(input * 1e3);
        };
        // duration
        moment.duration = function(input, key) {
            var duration = input, // matching against regexp is expensive, do it on demand
            match = null, sign, ret, parseIso, diffRes;
            if (moment.isDuration(input)) {
                duration = {
                    ms: input._milliseconds,
                    d: input._days,
                    M: input._months
                };
            } else if (typeof input === "number") {
                duration = {};
                if (key) {
                    duration[key] = input;
                } else {
                    duration.milliseconds = input;
                }
            } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
                sign = match[1] === "-" ? -1 : 1;
                duration = {
                    y: 0,
                    d: toInt(match[DATE]) * sign,
                    h: toInt(match[HOUR]) * sign,
                    m: toInt(match[MINUTE]) * sign,
                    s: toInt(match[SECOND]) * sign,
                    ms: toInt(match[MILLISECOND]) * sign
                };
            } else if (!!(match = isoDurationRegex.exec(input))) {
                sign = match[1] === "-" ? -1 : 1;
                parseIso = function(inp) {
                    // We'd normally use ~~inp for this, but unfortunately it also
                    // converts floats to ints.
                    // inp may be undefined, so careful calling replace on it.
                    var res = inp && parseFloat(inp.replace(",", "."));
                    // apply sign while we're at it
                    return (isNaN(res) ? 0 : res) * sign;
                };
                duration = {
                    y: parseIso(match[2]),
                    M: parseIso(match[3]),
                    d: parseIso(match[4]),
                    h: parseIso(match[5]),
                    m: parseIso(match[6]),
                    s: parseIso(match[7]),
                    w: parseIso(match[8])
                };
            } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
                diffRes = momentsDifference(moment(duration.from), moment(duration.to));
                duration = {};
                duration.ms = diffRes.milliseconds;
                duration.M = diffRes.months;
            }
            ret = new Duration(duration);
            if (moment.isDuration(input) && hasOwnProp(input, "_locale")) {
                ret._locale = input._locale;
            }
            return ret;
        };
        // version number
        moment.version = VERSION;
        // default format
        moment.defaultFormat = isoFormat;
        // constant that refers to the ISO standard
        moment.ISO_8601 = function() {};
        // Plugins that add properties should also add the key here (null value),
        // so we can properly clone ourselves.
        moment.momentProperties = momentProperties;
        // This function will be called whenever a moment is mutated.
        // It is intended to keep the offset in sync with the timezone.
        moment.updateOffset = function() {};
        // This function allows you to set a threshold for relative time strings
        moment.relativeTimeThreshold = function(threshold, limit) {
            if (relativeTimeThresholds[threshold] === undefined) {
                return false;
            }
            if (limit === undefined) {
                return relativeTimeThresholds[threshold];
            }
            relativeTimeThresholds[threshold] = limit;
            return true;
        };
        moment.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", function(key, value) {
            return moment.locale(key, value);
        });
        // This function will load locale and then set the global locale.  If
        // no arguments are passed in, it will simply return the current global
        // locale key.
        moment.locale = function(key, values) {
            var data;
            if (key) {
                if (typeof values !== "undefined") {
                    data = moment.defineLocale(key, values);
                } else {
                    data = moment.localeData(key);
                }
                if (data) {
                    moment.duration._locale = moment._locale = data;
                }
            }
            return moment._locale._abbr;
        };
        moment.defineLocale = function(name, values) {
            if (values !== null) {
                values.abbr = name;
                if (!locales[name]) {
                    locales[name] = new Locale();
                }
                locales[name].set(values);
                // backwards compat for now: also set the locale
                moment.locale(name);
                return locales[name];
            } else {
                // useful for testing
                delete locales[name];
                return null;
            }
        };
        moment.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", function(key) {
            return moment.localeData(key);
        });
        // returns locale data
        moment.localeData = function(key) {
            var locale;
            if (key && key._locale && key._locale._abbr) {
                key = key._locale._abbr;
            }
            if (!key) {
                return moment._locale;
            }
            if (!isArray(key)) {
                //short-circuit everything else
                locale = loadLocale(key);
                if (locale) {
                    return locale;
                }
                key = [ key ];
            }
            return chooseLocale(key);
        };
        // compare moment object
        moment.isMoment = function(obj) {
            return obj instanceof Moment || obj != null && hasOwnProp(obj, "_isAMomentObject");
        };
        // for typechecking Duration objects
        moment.isDuration = function(obj) {
            return obj instanceof Duration;
        };
        for (i = lists.length - 1; i >= 0; --i) {
            makeList(lists[i]);
        }
        moment.normalizeUnits = function(units) {
            return normalizeUnits(units);
        };
        moment.invalid = function(flags) {
            var m = moment.utc(NaN);
            if (flags != null) {
                extend(m._pf, flags);
            } else {
                m._pf.userInvalidated = true;
            }
            return m;
        };
        moment.parseZone = function() {
            return moment.apply(null, arguments).parseZone();
        };
        moment.parseTwoDigitYear = function(input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
        };
        /************************************
            Moment Prototype
        ************************************/
        extend(moment.fn = Moment.prototype, {
            clone: function() {
                return moment(this);
            },
            valueOf: function() {
                return +this._d + (this._offset || 0) * 6e4;
            },
            unix: function() {
                return Math.floor(+this / 1e3);
            },
            toString: function() {
                return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
            },
            toDate: function() {
                return this._offset ? new Date(+this) : this._d;
            },
            toISOString: function() {
                var m = moment(this).utc();
                if (0 < m.year() && m.year() <= 9999) {
                    return formatMoment(m, "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]");
                } else {
                    return formatMoment(m, "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]");
                }
            },
            toArray: function() {
                var m = this;
                return [ m.year(), m.month(), m.date(), m.hours(), m.minutes(), m.seconds(), m.milliseconds() ];
            },
            isValid: function() {
                return isValid(this);
            },
            isDSTShifted: function() {
                if (this._a) {
                    return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
                }
                return false;
            },
            parsingFlags: function() {
                return extend({}, this._pf);
            },
            invalidAt: function() {
                return this._pf.overflow;
            },
            utc: function(keepLocalTime) {
                return this.zone(0, keepLocalTime);
            },
            local: function(keepLocalTime) {
                if (this._isUTC) {
                    this.zone(0, keepLocalTime);
                    this._isUTC = false;
                    if (keepLocalTime) {
                        this.add(this._dateTzOffset(), "m");
                    }
                }
                return this;
            },
            format: function(inputString) {
                var output = formatMoment(this, inputString || moment.defaultFormat);
                return this.localeData().postformat(output);
            },
            add: createAdder(1, "add"),
            subtract: createAdder(-1, "subtract"),
            diff: function(input, units, asFloat) {
                var that = makeAs(input, this), zoneDiff = (this.zone() - that.zone()) * 6e4, diff, output, daysAdjust;
                units = normalizeUnits(units);
                if (units === "year" || units === "month") {
                    // average number of days in the months in the given dates
                    diff = (this.daysInMonth() + that.daysInMonth()) * 432e5;
                    // 24 * 60 * 60 * 1000 / 2
                    // difference in months
                    output = (this.year() - that.year()) * 12 + (this.month() - that.month());
                    // adjust by taking difference in days, average number of days
                    // and dst in the given months.
                    daysAdjust = this - moment(this).startOf("month") - (that - moment(that).startOf("month"));
                    // same as above but with zones, to negate all dst
                    daysAdjust -= (this.zone() - moment(this).startOf("month").zone() - (that.zone() - moment(that).startOf("month").zone())) * 6e4;
                    output += daysAdjust / diff;
                    if (units === "year") {
                        output = output / 12;
                    }
                } else {
                    diff = this - that;
                    output = units === "second" ? diff / 1e3 : // 1000
                    units === "minute" ? diff / 6e4 : // 1000 * 60
                    units === "hour" ? diff / 36e5 : // 1000 * 60 * 60
                    units === "day" ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                    units === "week" ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                    diff;
                }
                return asFloat ? output : absRound(output);
            },
            from: function(time, withoutSuffix) {
                return moment.duration({
                    to: this,
                    from: time
                }).locale(this.locale()).humanize(!withoutSuffix);
            },
            fromNow: function(withoutSuffix) {
                return this.from(moment(), withoutSuffix);
            },
            calendar: function(time) {
                // We want to compare the start of today, vs this.
                // Getting start-of-today depends on whether we're zone'd or not.
                var now = time || moment(), sod = makeAs(now, this).startOf("day"), diff = this.diff(sod, "days", true), format = diff < -6 ? "sameElse" : diff < -1 ? "lastWeek" : diff < 0 ? "lastDay" : diff < 1 ? "sameDay" : diff < 2 ? "nextDay" : diff < 7 ? "nextWeek" : "sameElse";
                return this.format(this.localeData().calendar(format, this));
            },
            isLeapYear: function() {
                return isLeapYear(this.year());
            },
            isDST: function() {
                return this.zone() < this.clone().month(0).zone() || this.zone() < this.clone().month(5).zone();
            },
            day: function(input) {
                var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
                if (input != null) {
                    input = parseWeekday(input, this.localeData());
                    return this.add(input - day, "d");
                } else {
                    return day;
                }
            },
            month: makeAccessor("Month", true),
            startOf: function(units) {
                units = normalizeUnits(units);
                // the following switch intentionally omits break keywords
                // to utilize falling through the cases.
                switch (units) {
                  case "year":
                    this.month(0);

                  /* falls through */
                    case "quarter":
                  case "month":
                    this.date(1);

                  /* falls through */
                    case "week":
                  case "isoWeek":
                  case "day":
                    this.hours(0);

                  /* falls through */
                    case "hour":
                    this.minutes(0);

                  /* falls through */
                    case "minute":
                    this.seconds(0);

                  /* falls through */
                    case "second":
                    this.milliseconds(0);
                }
                // weeks are a special case
                if (units === "week") {
                    this.weekday(0);
                } else if (units === "isoWeek") {
                    this.isoWeekday(1);
                }
                // quarters are also special
                if (units === "quarter") {
                    this.month(Math.floor(this.month() / 3) * 3);
                }
                return this;
            },
            endOf: function(units) {
                units = normalizeUnits(units);
                return this.startOf(units).add(1, units === "isoWeek" ? "week" : units).subtract(1, "ms");
            },
            isAfter: function(input, units) {
                units = normalizeUnits(typeof units !== "undefined" ? units : "millisecond");
                if (units === "millisecond") {
                    input = moment.isMoment(input) ? input : moment(input);
                    return +this > +input;
                } else {
                    return +this.clone().startOf(units) > +moment(input).startOf(units);
                }
            },
            isBefore: function(input, units) {
                units = normalizeUnits(typeof units !== "undefined" ? units : "millisecond");
                if (units === "millisecond") {
                    input = moment.isMoment(input) ? input : moment(input);
                    return +this < +input;
                } else {
                    return +this.clone().startOf(units) < +moment(input).startOf(units);
                }
            },
            isSame: function(input, units) {
                units = normalizeUnits(units || "millisecond");
                if (units === "millisecond") {
                    input = moment.isMoment(input) ? input : moment(input);
                    return +this === +input;
                } else {
                    return +this.clone().startOf(units) === +makeAs(input, this).startOf(units);
                }
            },
            min: deprecate("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548", function(other) {
                other = moment.apply(null, arguments);
                return other < this ? this : other;
            }),
            max: deprecate("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548", function(other) {
                other = moment.apply(null, arguments);
                return other > this ? this : other;
            }),
            // keepLocalTime = true means only change the timezone, without
            // affecting the local hour. So 5:31:26 +0300 --[zone(2, true)]-->
            // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist int zone
            // +0200, so we adjust the time as needed, to be valid.
            //
            // Keeping the time actually adds/subtracts (one hour)
            // from the actual represented time. That is why we call updateOffset
            // a second time. In case it wants us to change the offset again
            // _changeInProgress == true case, then we have to adjust, because
            // there is no such time in the given timezone.
            zone: function(input, keepLocalTime) {
                var offset = this._offset || 0, localAdjust;
                if (input != null) {
                    if (typeof input === "string") {
                        input = timezoneMinutesFromString(input);
                    }
                    if (Math.abs(input) < 16) {
                        input = input * 60;
                    }
                    if (!this._isUTC && keepLocalTime) {
                        localAdjust = this._dateTzOffset();
                    }
                    this._offset = input;
                    this._isUTC = true;
                    if (localAdjust != null) {
                        this.subtract(localAdjust, "m");
                    }
                    if (offset !== input) {
                        if (!keepLocalTime || this._changeInProgress) {
                            addOrSubtractDurationFromMoment(this, moment.duration(offset - input, "m"), 1, false);
                        } else if (!this._changeInProgress) {
                            this._changeInProgress = true;
                            moment.updateOffset(this, true);
                            this._changeInProgress = null;
                        }
                    }
                } else {
                    return this._isUTC ? offset : this._dateTzOffset();
                }
                return this;
            },
            zoneAbbr: function() {
                return this._isUTC ? "UTC" : "";
            },
            zoneName: function() {
                return this._isUTC ? "Coordinated Universal Time" : "";
            },
            parseZone: function() {
                if (this._tzm) {
                    this.zone(this._tzm);
                } else if (typeof this._i === "string") {
                    this.zone(this._i);
                }
                return this;
            },
            hasAlignedHourOffset: function(input) {
                if (!input) {
                    input = 0;
                } else {
                    input = moment(input).zone();
                }
                return (this.zone() - input) % 60 === 0;
            },
            daysInMonth: function() {
                return daysInMonth(this.year(), this.month());
            },
            dayOfYear: function(input) {
                var dayOfYear = round((moment(this).startOf("day") - moment(this).startOf("year")) / 864e5) + 1;
                return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
            },
            quarter: function(input) {
                return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
            },
            weekYear: function(input) {
                var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
                return input == null ? year : this.add(input - year, "y");
            },
            isoWeekYear: function(input) {
                var year = weekOfYear(this, 1, 4).year;
                return input == null ? year : this.add(input - year, "y");
            },
            week: function(input) {
                var week = this.localeData().week(this);
                return input == null ? week : this.add((input - week) * 7, "d");
            },
            isoWeek: function(input) {
                var week = weekOfYear(this, 1, 4).week;
                return input == null ? week : this.add((input - week) * 7, "d");
            },
            weekday: function(input) {
                var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
                return input == null ? weekday : this.add(input - weekday, "d");
            },
            isoWeekday: function(input) {
                // behaves the same as moment#day except
                // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
                // as a setter, sunday should belong to the previous week.
                return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
            },
            isoWeeksInYear: function() {
                return weeksInYear(this.year(), 1, 4);
            },
            weeksInYear: function() {
                var weekInfo = this.localeData()._week;
                return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
            },
            get: function(units) {
                units = normalizeUnits(units);
                return this[units]();
            },
            set: function(units, value) {
                units = normalizeUnits(units);
                if (typeof this[units] === "function") {
                    this[units](value);
                }
                return this;
            },
            // If passed a locale key, it will set the locale for this
            // instance.  Otherwise, it will return the locale configuration
            // variables for this instance.
            locale: function(key) {
                var newLocaleData;
                if (key === undefined) {
                    return this._locale._abbr;
                } else {
                    newLocaleData = moment.localeData(key);
                    if (newLocaleData != null) {
                        this._locale = newLocaleData;
                    }
                    return this;
                }
            },
            lang: deprecate("moment().lang() is deprecated. Use moment().localeData() instead.", function(key) {
                if (key === undefined) {
                    return this.localeData();
                } else {
                    return this.locale(key);
                }
            }),
            localeData: function() {
                return this._locale;
            },
            _dateTzOffset: function() {
                // On Firefox.24 Date#getTimezoneOffset returns a floating point.
                // https://github.com/moment/moment/pull/1871
                return Math.round(this._d.getTimezoneOffset() / 15) * 15;
            }
        });
        function rawMonthSetter(mom, value) {
            var dayOfMonth;
            // TODO: Move this out of here!
            if (typeof value === "string") {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (typeof value !== "number") {
                    return mom;
                }
            }
            dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
            mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
            return mom;
        }
        function rawGetter(mom, unit) {
            return mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]();
        }
        function rawSetter(mom, unit, value) {
            if (unit === "Month") {
                return rawMonthSetter(mom, value);
            } else {
                return mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
            }
        }
        function makeAccessor(unit, keepTime) {
            return function(value) {
                if (value != null) {
                    rawSetter(this, unit, value);
                    moment.updateOffset(this, keepTime);
                    return this;
                } else {
                    return rawGetter(this, unit);
                }
            };
        }
        moment.fn.millisecond = moment.fn.milliseconds = makeAccessor("Milliseconds", false);
        moment.fn.second = moment.fn.seconds = makeAccessor("Seconds", false);
        moment.fn.minute = moment.fn.minutes = makeAccessor("Minutes", false);
        // Setting the hour should keep the time, because the user explicitly
        // specified which hour he wants. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        moment.fn.hour = moment.fn.hours = makeAccessor("Hours", true);
        // moment.fn.month is defined separately
        moment.fn.date = makeAccessor("Date", true);
        moment.fn.dates = deprecate("dates accessor is deprecated. Use date instead.", makeAccessor("Date", true));
        moment.fn.year = makeAccessor("FullYear", true);
        moment.fn.years = deprecate("years accessor is deprecated. Use year instead.", makeAccessor("FullYear", true));
        // add plural methods
        moment.fn.days = moment.fn.day;
        moment.fn.months = moment.fn.month;
        moment.fn.weeks = moment.fn.week;
        moment.fn.isoWeeks = moment.fn.isoWeek;
        moment.fn.quarters = moment.fn.quarter;
        // add aliased format methods
        moment.fn.toJSON = moment.fn.toISOString;
        /************************************
            Duration Prototype
        ************************************/
        function daysToYears(days) {
            // 400 years have 146097 days (taking into account leap year rules)
            return days * 400 / 146097;
        }
        function yearsToDays(years) {
            // years * 365 + absRound(years / 4) -
            //     absRound(years / 100) + absRound(years / 400);
            return years * 146097 / 400;
        }
        extend(moment.duration.fn = Duration.prototype, {
            _bubble: function() {
                var milliseconds = this._milliseconds, days = this._days, months = this._months, data = this._data, seconds, minutes, hours, years = 0;
                // The following code bubbles up values, see the tests for
                // examples of what that means.
                data.milliseconds = milliseconds % 1e3;
                seconds = absRound(milliseconds / 1e3);
                data.seconds = seconds % 60;
                minutes = absRound(seconds / 60);
                data.minutes = minutes % 60;
                hours = absRound(minutes / 60);
                data.hours = hours % 24;
                days += absRound(hours / 24);
                // Accurately convert days to years, assume start from year 0.
                years = absRound(daysToYears(days));
                days -= absRound(yearsToDays(years));
                // 30 days to a month
                // TODO (iskren): Use anchor date (like 1st Jan) to compute this.
                months += absRound(days / 30);
                days %= 30;
                // 12 months -> 1 year
                years += absRound(months / 12);
                months %= 12;
                data.days = days;
                data.months = months;
                data.years = years;
            },
            abs: function() {
                this._milliseconds = Math.abs(this._milliseconds);
                this._days = Math.abs(this._days);
                this._months = Math.abs(this._months);
                this._data.milliseconds = Math.abs(this._data.milliseconds);
                this._data.seconds = Math.abs(this._data.seconds);
                this._data.minutes = Math.abs(this._data.minutes);
                this._data.hours = Math.abs(this._data.hours);
                this._data.months = Math.abs(this._data.months);
                this._data.years = Math.abs(this._data.years);
                return this;
            },
            weeks: function() {
                return absRound(this.days() / 7);
            },
            valueOf: function() {
                return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
            },
            humanize: function(withSuffix) {
                var output = relativeTime(this, !withSuffix, this.localeData());
                if (withSuffix) {
                    output = this.localeData().pastFuture(+this, output);
                }
                return this.localeData().postformat(output);
            },
            add: function(input, val) {
                // supports only 2.0-style add(1, 's') or add(moment)
                var dur = moment.duration(input, val);
                this._milliseconds += dur._milliseconds;
                this._days += dur._days;
                this._months += dur._months;
                this._bubble();
                return this;
            },
            subtract: function(input, val) {
                var dur = moment.duration(input, val);
                this._milliseconds -= dur._milliseconds;
                this._days -= dur._days;
                this._months -= dur._months;
                this._bubble();
                return this;
            },
            get: function(units) {
                units = normalizeUnits(units);
                return this[units.toLowerCase() + "s"]();
            },
            as: function(units) {
                var days, months;
                units = normalizeUnits(units);
                if (units === "month" || units === "year") {
                    days = this._days + this._milliseconds / 864e5;
                    months = this._months + daysToYears(days) * 12;
                    return units === "month" ? months : months / 12;
                } else {
                    // handle milliseconds separately because of floating point math errors (issue #1867)
                    days = this._days + yearsToDays(this._months / 12);
                    switch (units) {
                      case "week":
                        return days / 7 + this._milliseconds / 6048e5;

                      case "day":
                        return days + this._milliseconds / 864e5;

                      case "hour":
                        return days * 24 + this._milliseconds / 36e5;

                      case "minute":
                        return days * 24 * 60 + this._milliseconds / 6e4;

                      case "second":
                        return days * 24 * 60 * 60 + this._milliseconds / 1e3;

                      // Math.floor prevents floating point math errors here
                        case "millisecond":
                        return Math.floor(days * 24 * 60 * 60 * 1e3) + this._milliseconds;

                      default:
                        throw new Error("Unknown unit " + units);
                    }
                }
            },
            lang: moment.fn.lang,
            locale: moment.fn.locale,
            toIsoString: deprecate("toIsoString() is deprecated. Please use toISOString() instead " + "(notice the capitals)", function() {
                return this.toISOString();
            }),
            toISOString: function() {
                // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
                var years = Math.abs(this.years()), months = Math.abs(this.months()), days = Math.abs(this.days()), hours = Math.abs(this.hours()), minutes = Math.abs(this.minutes()), seconds = Math.abs(this.seconds() + this.milliseconds() / 1e3);
                if (!this.asSeconds()) {
                    // this is the same as C#'s (Noda) and python (isodate)...
                    // but not other JS (goog.date)
                    return "P0D";
                }
                return (this.asSeconds() < 0 ? "-" : "") + "P" + (years ? years + "Y" : "") + (months ? months + "M" : "") + (days ? days + "D" : "") + (hours || minutes || seconds ? "T" : "") + (hours ? hours + "H" : "") + (minutes ? minutes + "M" : "") + (seconds ? seconds + "S" : "");
            },
            localeData: function() {
                return this._locale;
            }
        });
        moment.duration.fn.toString = moment.duration.fn.toISOString;
        function makeDurationGetter(name) {
            moment.duration.fn[name] = function() {
                return this._data[name];
            };
        }
        for (i in unitMillisecondFactors) {
            if (hasOwnProp(unitMillisecondFactors, i)) {
                makeDurationGetter(i.toLowerCase());
            }
        }
        moment.duration.fn.asMilliseconds = function() {
            return this.as("ms");
        };
        moment.duration.fn.asSeconds = function() {
            return this.as("s");
        };
        moment.duration.fn.asMinutes = function() {
            return this.as("m");
        };
        moment.duration.fn.asHours = function() {
            return this.as("h");
        };
        moment.duration.fn.asDays = function() {
            return this.as("d");
        };
        moment.duration.fn.asWeeks = function() {
            return this.as("weeks");
        };
        moment.duration.fn.asMonths = function() {
            return this.as("M");
        };
        moment.duration.fn.asYears = function() {
            return this.as("y");
        };
        /************************************
            Default Locale
        ************************************/
        // Set default locale, other locale will inherit from English.
        moment.locale("en", {
            ordinal: function(number) {
                var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
                return number + output;
            }
        });
        return moment;
    }.call(this);
    UI.Utils.moment = moment;
    return UI.datepicker;
});

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-form-password", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    UI.component("formPassword", {
        defaults: {
            lblShow: "Show",
            lblHide: "Hide"
        },
        boot: function() {
            // init code
            UI.$html.on("click.formpassword.uikit", "[data-uk-form-password]", function(e) {
                var ele = UI.$(this);
                if (!ele.data("formPassword")) {
                    e.preventDefault();
                    var obj = UI.formPassword(ele, UI.Utils.options(ele.attr("data-uk-form-password")));
                    ele.trigger("click");
                }
            });
        },
        init: function() {
            var $this = this;
            this.on("click", function(e) {
                e.preventDefault();
                if ($this.input.length) {
                    var type = $this.input.attr("type");
                    $this.input.attr("type", type == "text" ? "password" : "text");
                    $this.element.text($this.options[type == "text" ? "lblShow" : "lblHide"]);
                }
            });
            this.input = this.element.next("input").length ? this.element.next("input") : this.element.prev("input");
            this.element.text(this.options[this.input.is("[type='password']") ? "lblShow" : "lblHide"]);
            this.element.data("formPassword", this);
        }
    });
    return UI.formPassword;
});

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-form-select", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    UI.component("formSelect", {
        defaults: {
            target: ">span:first",
            activeClass: "uk-active"
        },
        boot: function() {
            // init code
            UI.ready(function(context) {
                UI.$("[data-uk-form-select]", context).each(function() {
                    var ele = UI.$(this);
                    if (!ele.data("formSelect")) {
                        var obj = UI.formSelect(ele, UI.Utils.options(ele.attr("data-uk-form-select")));
                    }
                });
            });
        },
        init: function() {
            var $this = this;
            this.target = this.find(this.options.target);
            this.select = this.find("select");
            // init + on change event
            this.select.on("change", function() {
                var select = $this.select[0], fn = function() {
                    try {
                        $this.target.text(select.options[select.selectedIndex].text);
                    } catch (e) {}
                    $this.element[$this.select.val() ? "addClass" : "removeClass"]($this.options.activeClass);
                    return fn;
                };
                return fn();
            }());
            this.element.data("formSelect", this);
        }
    });
    return UI.formSelect;
});

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-grid", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    UI.component("grid", {
        defaults: {
            colwidth: "auto",
            animation: true,
            duration: 300,
            gutter: 0,
            controls: false,
            filter: false
        },
        boot: function() {
            // init code
            UI.ready(function(context) {
                UI.$("[data-uk-grid]", context).each(function() {
                    var ele = UI.$(this);
                    if (!ele.data("grid")) {
                        var plugin = UI.grid(ele, UI.Utils.options(ele.attr("data-uk-grid")));
                    }
                });
            });
        },
        init: function() {
            var $this = this, gutter = String(this.options.gutter).trim().split(" ");
            this.gutterv = parseInt(gutter[0], 10);
            this.gutterh = parseInt(gutter[1] || gutter[0], 10);
            // make sure parent element has the right position property
            this.element.css({
                position: "relative"
            });
            this.controls = null;
            if (this.options.controls) {
                this.controls = UI.$(this.options.controls);
                // filter
                this.controls.on("click", "[data-uk-filter]", function(e) {
                    e.preventDefault();
                    $this.filter(UI.$(this).data("ukFilter"));
                });
                // sort
                this.controls.on("click", "[data-uk-sort]", function(e) {
                    e.preventDefault();
                    var cmd = UI.$(this).attr("data-uk-sort").split(":");
                    $this.sort(cmd[0], cmd[1]);
                });
            }
            UI.$win.on("load resize orientationchange", UI.Utils.debounce(function() {
                if ($this.currentfilter) {
                    $this.filter($this.currentfilter);
                } else {
                    this.updateLayout();
                }
            }.bind(this), 100));
            this.on("display.uk.check", function() {
                if ($this.element.is(":visible")) $this.updateLayout();
            });
            UI.$html.on("changed.uk.dom", function(e) {
                $this.updateLayout();
            });
            if (this.options.filter !== false) {
                this.filter(this.options.filter);
            } else {
                this.updateLayout();
            }
        },
        _prepareElements: function() {
            var children = this.element.children(":not([data-grid-prepared])"), css;
            // exit if no already prepared elements found
            if (!children.length) {
                return;
            }
            css = {
                position: "absolute",
                "box-sizing": "border-box",
                width: this.options.colwidth == "auto" ? "" : this.options.colwidth
            };
            if (this.options.gutter) {
                css["padding-left"] = this.gutterh;
                css["padding-bottom"] = this.gutterv;
                this.element.css("margin-left", this.gutterh * -1);
            }
            children.attr("data-grid-prepared", "true").css(css);
        },
        updateLayout: function(elements) {
            this._prepareElements();
            elements = elements || this.element.children(":visible");
            var $this = this, children = elements, maxwidth = this.element.width() + 2 * this.gutterh + 2, left = 0, top = 0, positions = [], item, width, height, pos, aX, aY, i, z, max, size;
            this.trigger("beforeupdate.uk.grid", [ children ]);
            children.each(function(index) {
                size = getElementSize(this);
                item = UI.$(this);
                width = size.outerWidth;
                height = size.outerHeight;
                left = 0;
                top = 0;
                for (i = 0, max = positions.length; i < max; i++) {
                    pos = positions[i];
                    if (left <= pos.aX) {
                        left = pos.aX;
                    }
                    if (maxwidth < left + width) {
                        left = 0;
                    }
                    if (top <= pos.aY) {
                        top = pos.aY;
                    }
                }
                positions.push({
                    ele: item,
                    top: top,
                    left: left,
                    width: width,
                    height: height,
                    aY: top + height,
                    aX: left + width
                });
            });
            var posPrev, maxHeight = 0;
            // fix top
            for (i = 0, max = positions.length; i < max; i++) {
                pos = positions[i];
                top = 0;
                for (z = 0; z < i; z++) {
                    posPrev = positions[z];
                    // (posPrev.left + 1) fixex 1px bug when using % based widths
                    if (pos.left < posPrev.aX && posPrev.left + 1 < pos.aX) {
                        top = posPrev.aY;
                    }
                }
                pos.top = top;
                pos.aY = top + pos.height;
                maxHeight = Math.max(maxHeight, pos.aY);
            }
            maxHeight = maxHeight - this.gutterv;
            if (this.options.animation) {
                this.element.stop().animate({
                    height: maxHeight
                }, 100);
                positions.forEach(function(pos) {
                    pos.ele.stop().animate({
                        top: pos.top,
                        left: pos.left,
                        opacity: 1
                    }, this.options.duration);
                }.bind(this));
            } else {
                this.element.css("height", maxHeight);
                positions.forEach(function(pos) {
                    pos.ele.css({
                        top: pos.top,
                        left: pos.left,
                        opacity: 1
                    });
                }.bind(this));
            }
            // make sure to trigger possible scrollpies etc.
            setTimeout(function() {
                UI.$doc.trigger("scrolling.uk.document");
            }, 2 * this.options.duration * (this.options.animation ? 1 : 0));
            this.trigger("afterupdate.uk.grid", [ children ]);
        },
        filter: function(filter) {
            this.currentfilter = filter;
            filter = filter || [];
            if (typeof filter === "string") {
                filter = filter.split(/,/).map(function(item) {
                    return item.trim();
                });
            }
            var $this = this, children = this.element.children(), elements = {
                visible: [],
                hidden: []
            }, visible, hidden;
            children.each(function(index) {
                var ele = UI.$(this), f = ele.attr("data-uk-filter"), infilter = filter.length ? false : true;
                if (f) {
                    f = f.split(/,/).map(function(item) {
                        return item.trim();
                    });
                    filter.forEach(function(item) {
                        if (f.indexOf(item) > -1) infilter = true;
                    });
                }
                elements[infilter ? "visible" : "hidden"].push(ele);
            });
            // convert to jQuery collections
            elements.hidden = UI.$(elements.hidden).map(function() {
                return this[0];
            });
            elements.visible = UI.$(elements.visible).map(function() {
                return this[0];
            });
            elements.hidden.attr("aria-hidden", "true").filter(":visible").fadeOut(this.options.duration);
            elements.visible.attr("aria-hidden", "false").filter(":hidden").css("opacity", 0).show();
            $this.updateLayout(elements.visible);
            if (this.controls && this.controls.length) {
                this.controls.find("[data-uk-filter]").removeClass("uk-active").filter('[data-uk-filter="' + filter + '"]').addClass("uk-active");
            }
        },
        sort: function(by, order) {
            order = order || 1;
            // covert from string (asc|desc) to number
            if (typeof order === "string") {
                order = order.toLowerCase() == "desc" ? -1 : 1;
            }
            var elements = this.element.children();
            elements.sort(function(a, b) {
                a = UI.$(a);
                b = UI.$(b);
                return (b.data(by) || "") < (a.data(by) || "") ? order : order * -1;
            }).appendTo(this.element);
            this.updateLayout(elements.filter(":visible"));
            if (this.controls && this.controls.length) {
                this.controls.find("[data-uk-sort]").removeClass("uk-active").filter('[data-uk-sort="' + by + ":" + (order == -1 ? "desc" : "asc") + '"]').addClass("uk-active");
            }
        }
    });
    /*!
    * getSize v1.2.2
    * measure size of elements
    * MIT license
    * https://github.com/desandro/get-size
    */
    var _getSize = function() {
        var prefixes = "Webkit Moz ms Ms O".split(" ");
        var docElemStyle = document.documentElement.style;
        function getStyleProperty(propName) {
            if (!propName) {
                return;
            }
            // test standard property first
            if (typeof docElemStyle[propName] === "string") {
                return propName;
            }
            // capitalize
            propName = propName.charAt(0).toUpperCase() + propName.slice(1);
            // test vendor specific properties
            var prefixed;
            for (var i = 0, len = prefixes.length; i < len; i++) {
                prefixed = prefixes[i] + propName;
                if (typeof docElemStyle[prefixed] === "string") {
                    return prefixed;
                }
            }
        }
        // -------------------------- helpers -------------------------- //
        // get a number from a string, not a percentage
        function getStyleSize(value) {
            var num = parseFloat(value);
            // not a percent like '100%', and a number
            var isValid = value.indexOf("%") === -1 && !isNaN(num);
            return isValid && num;
        }
        function noop() {}
        var logError = typeof console === "undefined" ? noop : function(message) {
            console.error(message);
        };
        // -------------------------- measurements -------------------------- //
        var measurements = [ "paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "marginLeft", "marginRight", "marginTop", "marginBottom", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth" ];
        function getZeroSize() {
            var size = {
                width: 0,
                height: 0,
                innerWidth: 0,
                innerHeight: 0,
                outerWidth: 0,
                outerHeight: 0
            };
            for (var i = 0, len = measurements.length; i < len; i++) {
                var measurement = measurements[i];
                size[measurement] = 0;
            }
            return size;
        }
        // -------------------------- setup -------------------------- //
        var isSetup = false;
        var getStyle, boxSizingProp, isBoxSizeOuter;
        /**
        * setup vars and functions
        * do it on initial getSize(), rather than on script load
        * For Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=548397
        */
        function setup() {
            // setup once
            if (isSetup) {
                return;
            }
            isSetup = true;
            var getComputedStyle = window.getComputedStyle;
            getStyle = function() {
                var getStyleFn = getComputedStyle ? function(elem) {
                    return getComputedStyle(elem, null);
                } : function(elem) {
                    return elem.currentStyle;
                };
                return function getStyle(elem) {
                    var style = getStyleFn(elem);
                    if (!style) {
                        logError("Style returned " + style + ". Are you running this code in a hidden iframe on Firefox? " + "See http://bit.ly/getsizebug1");
                    }
                    return style;
                };
            }();
            // -------------------------- box sizing -------------------------- //
            boxSizingProp = getStyleProperty("boxSizing");
            /**
            * WebKit measures the outer-width on style.width on border-box elems
            * IE & Firefox measures the inner-width
            */
            if (boxSizingProp) {
                var div = document.createElement("div");
                div.style.width = "200px";
                div.style.padding = "1px 2px 3px 4px";
                div.style.borderStyle = "solid";
                div.style.borderWidth = "1px 2px 3px 4px";
                div.style[boxSizingProp] = "border-box";
                var body = document.body || document.documentElement;
                body.appendChild(div);
                var style = getStyle(div);
                isBoxSizeOuter = getStyleSize(style.width) === 200;
                body.removeChild(div);
            }
        }
        // -------------------------- getSize -------------------------- //
        function getSize(elem) {
            setup();
            // use querySeletor if elem is string
            if (typeof elem === "string") {
                elem = document.querySelector(elem);
            }
            // do not proceed on non-objects
            if (!elem || typeof elem !== "object" || !elem.nodeType) {
                return;
            }
            var style = getStyle(elem);
            // if hidden, everything is 0
            if (style.display === "none") {
                return getZeroSize();
            }
            var size = {};
            size.width = elem.offsetWidth;
            size.height = elem.offsetHeight;
            var isBorderBox = size.isBorderBox = !!(boxSizingProp && style[boxSizingProp] && style[boxSizingProp] === "border-box");
            // get all measurements
            for (var i = 0, len = measurements.length; i < len; i++) {
                var measurement = measurements[i];
                var value = style[measurement];
                var num = parseFloat(value);
                // any 'auto', 'medium' value will be 0
                size[measurement] = !isNaN(num) ? num : 0;
            }
            var paddingWidth = size.paddingLeft + size.paddingRight;
            var paddingHeight = size.paddingTop + size.paddingBottom;
            var marginWidth = size.marginLeft + size.marginRight;
            var marginHeight = size.marginTop + size.marginBottom;
            var borderWidth = size.borderLeftWidth + size.borderRightWidth;
            var borderHeight = size.borderTopWidth + size.borderBottomWidth;
            var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;
            // overwrite width and height if we can get it from style
            var styleWidth = getStyleSize(style.width);
            if (styleWidth !== false) {
                size.width = styleWidth + (// add padding and border unless it's already including it
                isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth);
            }
            var styleHeight = getStyleSize(style.height);
            if (styleHeight !== false) {
                size.height = styleHeight + (// add padding and border unless it's already including it
                isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight);
            }
            size.innerWidth = size.width - (paddingWidth + borderWidth);
            size.innerHeight = size.height - (paddingHeight + borderHeight);
            size.outerWidth = size.width + marginWidth;
            size.outerHeight = size.height + marginHeight;
            return size;
        }
        return getSize;
    }();
    function getElementSize(ele) {
        return _getSize(ele);
    }
});

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        // AMD
        define("uikit-lightbox", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    var modal, cache = {};
    UI.component("lightbox", {
        defaults: {
            group: false,
            duration: 400,
            keyboard: true
        },
        index: 0,
        items: false,
        boot: function() {
            UI.$html.on("click", "[data-uk-lightbox]", function(e) {
                e.preventDefault();
                var link = UI.$(this);
                if (!link.data("lightbox")) {
                    UI.lightbox(link, UI.Utils.options(link.attr("data-uk-lightbox")));
                }
                link.data("lightbox").show(link);
            });
            // keyboard navigation
            UI.$doc.on("keyup", function(e) {
                if (modal && modal.is(":visible") && modal.lightbox.options.keyboard) {
                    e.preventDefault();
                    switch (e.keyCode) {
                      case 37:
                        modal.lightbox.previous();
                        break;

                      case 39:
                        modal.lightbox.next();
                        break;
                    }
                }
            });
        },
        init: function() {
            var $this = this, siblings = [];
            this.index = 0;
            this.siblings = [];
            if (this.element && this.element.length) {
                var domSiblings = this.options.group ? UI.$([ '[data-uk-lightbox*="' + this.options.group + '"]', "[data-uk-lightbox*='" + this.options.group + "']" ].join(",")) : this.element;
                domSiblings.each(function() {
                    var ele = UI.$(this);
                    siblings.push({
                        source: ele.attr("href"),
                        title: ele.attr("title"),
                        type: ele.attr("data-lightbox-type") || "auto",
                        link: ele
                    });
                });
                this.index = domSiblings.index(this.element);
                this.siblings = siblings;
            } else if (this.options.group && this.options.group.length) {
                this.siblings = this.options.group;
            }
            this.trigger("lightbox-init", [ this ]);
        },
        show: function(index) {
            this.modal = getModal(this);
            // stop previous animation
            this.modal.dialog.stop();
            this.modal.content.stop();
            var $this = this, promise = UI.$.Deferred(), data, item;
            index = index || 0;
            // index is a jQuery object or DOM element
            if (typeof index == "object") {
                this.siblings.forEach(function(s, idx) {
                    if (index[0] === s.link[0]) {
                        index = idx;
                    }
                });
            }
            // fix index if needed
            if (index < 0) {
                index = this.siblings.length - index;
            } else if (!this.siblings[index]) {
                index = 0;
            }
            item = this.siblings[index];
            data = {
                lightbox: $this,
                source: item.source,
                type: item.type,
                index: index,
                promise: promise,
                title: item.title,
                item: item,
                meta: {
                    content: "",
                    width: null,
                    height: null
                }
            };
            this.index = index;
            this.modal.content.empty();
            if (!this.modal.is(":visible")) {
                this.modal.content.css({
                    width: "",
                    height: ""
                }).empty();
                this.modal.modal.show();
            }
            this.modal.loader.removeClass("uk-hidden");
            promise.promise().done(function() {
                $this.data = data;
                $this.fitSize(data);
            }).fail(function() {
                data.meta.content = '<div class="uk-position-cover uk-flex uk-flex-middle uk-flex-center"><strong>Loading resource failed!</strong></div>';
                data.meta.width = 400;
                data.meta.height = 300;
                $this.data = data;
                $this.fitSize(data);
            });
            $this.trigger("showitem.uk.lightbox", [ data ]);
        },
        fitSize: function() {
            var $this = this, data = this.data, pad = this.modal.dialog.outerWidth() - this.modal.dialog.width(), dpadTop = parseInt(this.modal.dialog.css("margin-top"), 10), dpadBot = parseInt(this.modal.dialog.css("margin-bottom"), 10), dpad = dpadTop + dpadBot, content = data.meta.content, duration = $this.options.duration;
            if (this.siblings.length > 1) {
                content = [ content, '<a href="#" class="uk-slidenav uk-slidenav-contrast uk-slidenav-previous uk-hidden-touch" data-lightbox-previous></a>', '<a href="#" class="uk-slidenav uk-slidenav-contrast uk-slidenav-next uk-hidden-touch" data-lightbox-next></a>' ].join("");
            }
            // calculate width
            var tmp = UI.$("<div>&nbsp;</div>").css({
                opacity: 0,
                position: "absolute",
                top: 0,
                left: 0,
                width: "100%",
                "max-width": $this.modal.dialog.css("max-width"),
                padding: $this.modal.dialog.css("padding"),
                margin: $this.modal.dialog.css("margin")
            }), maxwidth, maxheight, w = data.meta.width, h = data.meta.height;
            tmp.appendTo("body").width();
            maxwidth = tmp.width();
            maxheight = window.innerHeight - dpad;
            tmp.remove();
            this.modal.dialog.find(".uk-modal-caption").remove();
            if (data.title) {
                this.modal.dialog.append('<div class="uk-modal-caption">' + data.title + "</div>");
                maxheight -= this.modal.dialog.find(".uk-modal-caption").outerHeight();
            }
            if (maxwidth < data.meta.width) {
                h = Math.floor(h * (maxwidth / w));
                w = maxwidth;
            }
            if (maxheight < h) {
                h = Math.floor(maxheight);
                w = Math.ceil(data.meta.width * (maxheight / data.meta.height));
            }
            this.modal.content.css("opacity", 0).width(w).html(content);
            if (data.type == "iframe") {
                this.modal.content.find("iframe:first").height(h);
            }
            var dh = h + pad, t = Math.floor(window.innerHeight / 2 - dh / 2) - dpad;
            if (t < 0) {
                t = 0;
            }
            this.modal.closer.addClass("uk-hidden");
            if ($this.modal.data("mwidth") == w && $this.modal.data("mheight") == h) {
                duration = 0;
            }
            this.modal.dialog.animate({
                width: w + pad,
                height: h + pad,
                top: t
            }, duration, "swing", function() {
                $this.modal.loader.addClass("uk-hidden");
                $this.modal.content.css({
                    width: ""
                }).animate({
                    opacity: 1
                }, function() {
                    $this.modal.closer.removeClass("uk-hidden");
                });
                $this.modal.data({
                    mwidth: w,
                    mheight: h
                });
            });
        },
        next: function() {
            this.show(this.siblings[this.index + 1] ? this.index + 1 : 0);
        },
        previous: function() {
            this.show(this.siblings[this.index - 1] ? this.index - 1 : this.siblings.length - 1);
        }
    });
    // Plugins
    UI.plugin("lightbox", "image", {
        init: function(lightbox) {
            lightbox.on("showitem.uk.lightbox", function(e, data) {
                if (data.type == "image" || data.source && data.source.match(/\.(jpg|jpeg|png|gif|svg)$/i)) {
                    var resolve = function(source, width, height) {
                        data.meta = {
                            content: '<img class="uk-responsive-width" width="' + width + '" height="' + height + '" src ="' + source + '">',
                            width: width,
                            height: height
                        };
                        data.type = "image";
                        data.promise.resolve();
                    };
                    if (!cache[data.source]) {
                        var img = new Image();
                        img.onerror = function() {
                            data.promise.reject("Loading image failed");
                        };
                        img.onload = function() {
                            cache[data.source] = {
                                width: img.width,
                                height: img.height
                            };
                            resolve(data.source, cache[data.source].width, cache[data.source].height);
                        };
                        img.src = data.source;
                    } else {
                        resolve(data.source, cache[data.source].width, cache[data.source].height);
                    }
                }
            });
        }
    });
    UI.plugin("lightbox", "youtube", {
        init: function(lightbox) {
            var youtubeRegExp = /(\/\/.*?youtube\.[a-z]+)\/watch\?v=([^&]+)&?(.*)/, youtubeRegExpShort = /youtu\.be\/(.*)/;
            lightbox.on("showitem.uk.lightbox", function(e, data) {
                var id, matches, resolve = function(id, width, height) {
                    data.meta = {
                        content: '<iframe src="//www.youtube.com/embed/' + id + '" width="' + width + '" height="' + height + '" style="max-width:100%;"></iframe>',
                        width: width,
                        height: height
                    };
                    data.type = "iframe";
                    data.promise.resolve();
                };
                if (matches = data.source.match(youtubeRegExp)) {
                    id = matches[2];
                }
                if (matches = data.source.match(youtubeRegExpShort)) {
                    id = matches[1];
                }
                if (id) {
                    if (!cache[id]) {
                        var img = new Image();
                        img.onerror = function() {
                            cache[id] = {
                                width: 640,
                                height: 320
                            };
                            resolve(id, cache[id].width, cache[id].height);
                        };
                        img.onload = function() {
                            cache[id] = {
                                width: img.width,
                                height: img.height
                            };
                            resolve(id, img.width, img.height);
                        };
                        img.src = "//img.youtube.com/vi/" + id + "/0.jpg";
                    } else {
                        resolve(id, cache[id].width, cache[id].height);
                    }
                    e.stopImmediatePropagation();
                }
            });
        }
    });
    UI.plugin("lightbox", "vimeo", {
        init: function(lightbox) {
            var regex = /(\/\/.*?)vimeo\.[a-z]+\/([0-9]+).*?/, matches;
            lightbox.on("showitem.uk.lightbox", function(e, data) {
                var id, resolve = function(id, width, height) {
                    data.meta = {
                        content: '<iframe src="//player.vimeo.com/video/' + id + '" width="' + width + '" height="' + height + '" style="width:100%;box-sizing:border-box;"></iframe>',
                        width: width,
                        height: height
                    };
                    data.type = "iframe";
                    data.promise.resolve();
                };
                if (matches = data.source.match(regex)) {
                    id = matches[2];
                    if (!cache[id]) {
                        UI.$.ajax({
                            type: "GET",
                            url: "http://vimeo.com/api/oembed.json?url=" + encodeURI(data.source),
                            jsonp: "callback",
                            dataType: "jsonp",
                            success: function(data) {
                                cache[id] = {
                                    width: data.width,
                                    height: data.height
                                };
                                resolve(id, cache[id].width, cache[id].height);
                            }
                        });
                    } else {
                        resolve(id, cache[id].width, cache[id].height);
                    }
                    e.stopImmediatePropagation();
                }
            });
        }
    });
    UI.plugin("lightbox", "video", {
        init: function(lightbox) {
            lightbox.on("showitem.uk.lightbox", function(e, data) {
                var resolve = function(source, width, height) {
                    data.meta = {
                        content: '<video class="uk-responsive-width" src="' + source + '" width="' + width + '" height="' + height + '" controls></video>',
                        width: width,
                        height: height
                    };
                    data.type = "video";
                    data.promise.resolve();
                };
                if (data.type == "video" || data.source.match(/\.(mp4|webm|ogv)$/i)) {
                    if (!cache[data.source]) {
                        var vid = UI.$('<video style="position:fixed;visibility:hidden;top:-10000px;"></video>').attr("src", data.source).appendTo("body");
                        var idle = setInterval(function() {
                            if (vid[0].videoWidth) {
                                clearInterval(idle);
                                cache[data.source] = {
                                    width: vid[0].videoWidth,
                                    height: vid[0].videoHeight
                                };
                                resolve(data.source, cache[data.source].width, cache[data.source].height);
                                vid.remove();
                            }
                        }, 20);
                    } else {
                        resolve(data.source, cache[data.source].width, cache[data.source].height);
                    }
                }
            });
        }
    });
    function getModal(lightbox) {
        if (modal) {
            modal.lightbox = lightbox;
            return modal;
        }
        // init lightbox container
        modal = UI.$([ '<div class="uk-modal">', '<div class="uk-modal-dialog uk-modal-dialog-lightbox uk-slidenav-position" style="margin-left:auto;margin-right:auto;width:200px;height:200px;top:' + Math.abs(window.innerHeight / 2 - 200) + 'px;">', '<a href="#" class="uk-modal-close uk-close uk-close-alt"></a>', '<div class="uk-lightbox-content"></div>', '<div class="uk-modal-spinner uk-hidden"></div>', "</div>", "</div>" ].join("")).appendTo("body");
        modal.dialog = modal.find(".uk-modal-dialog:first");
        modal.content = modal.find(".uk-lightbox-content:first");
        modal.loader = modal.find(".uk-modal-spinner:first");
        modal.closer = modal.find(".uk-close.uk-close-alt");
        modal.modal = UI.modal(modal, {
            modal: false
        });
        // next / previous
        modal.on("swipeRight swipeLeft", function(e) {
            modal.lightbox[e.type == "swipeLeft" ? "next" : "previous"]();
        }).on("click", "[data-lightbox-previous], [data-lightbox-next]", function(e) {
            e.preventDefault();
            modal.lightbox[UI.$(this).is("[data-lightbox-next]") ? "next" : "previous"]();
        });
        // destroy content on modal hide
        modal.on("hide.uk.modal", function(e) {
            modal.content.html("");
        });
        UI.$win.on("load resize orientationchange", UI.Utils.debounce(function(e) {
            if (modal.is(":visible") && !UI.Utils.isFullscreen()) modal.lightbox.fitSize();
        }.bind(this), 100));
        modal.lightbox = lightbox;
        return modal;
    }
    UI.lightbox.create = function(items, options) {
        if (!items) return;
        var group = [], o;
        items.forEach(function(item) {
            group.push(UI.$.extend({
                source: "",
                title: "",
                type: "auto",
                link: false
            }, typeof item == "string" ? {
                source: item
            } : item));
        });
        o = UI.lightbox(UI.$.extend({}, options, {
            group: group
        }));
        return o;
    };
    return UI.lightbox;
});

/*
 * Based on Nestable jQuery Plugin - Copyright (c) 2012 David Bushell - http://dbushell.com/
 */
(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-nestable", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    var hasTouch = "ontouchstart" in window, html = UI.$html, touchedlists = [], $win = UI.$win, draggingElement, dragSource;
    var eStart = hasTouch ? "touchstart" : "mousedown", eMove = hasTouch ? "touchmove" : "mousemove", eEnd = hasTouch ? "touchend" : "mouseup", eCancel = hasTouch ? "touchcancel" : "mouseup";
    UI.component("nestable", {
        defaults: {
            listBaseClass: "uk-nestable",
            listClass: "uk-nestable-list",
            listItemClass: "uk-nestable-item",
            dragClass: "uk-nestable-dragged",
            movingClass: "uk-nestable-moving",
            handleClass: "",
            collapsedClass: "uk-collapsed",
            placeholderClass: "uk-nestable-placeholder",
            noDragClass: "uk-nestable-nodrag",
            group: false,
            maxDepth: 10,
            threshold: 20,
            idlethreshold: 10
        },
        boot: function() {
            // adjust document scrolling
            UI.$html.on("mousemove touchmove", function(e) {
                if (draggingElement) {
                    var top = draggingElement.offset().top;
                    if (top < UI.$win.scrollTop()) {
                        UI.$win.scrollTop(UI.$win.scrollTop() - Math.ceil(draggingElement.height() / 2));
                    } else if (top + draggingElement.height() > window.innerHeight + UI.$win.scrollTop()) {
                        UI.$win.scrollTop(UI.$win.scrollTop() + Math.ceil(draggingElement.height() / 2));
                    }
                }
            });
            // init code
            UI.ready(function(context) {
                UI.$("[data-uk-nestable]", context).each(function() {
                    var ele = UI.$(this);
                    if (!ele.data("nestable")) {
                        UI.nestable(ele, UI.Utils.options(ele.attr("data-uk-nestable")));
                    }
                });
            });
        },
        init: function() {
            var $this = this;
            Object.keys(this.options).forEach(function(key) {
                if (String(key).indexOf("Class") != -1) {
                    $this.options["_" + key] = "." + $this.options[key];
                }
            });
            this.find(this.options._listItemClass).find(">ul").addClass(this.options.listClass);
            this.checkEmptyList();
            this.reset();
            this.element.data("nestable-group", this.options.group || UI.Utils.uid("nestable-group"));
            this.find(this.options._listItemClass).each(function() {
                $this.setParent(UI.$(this));
            });
            this.on("click", "[data-nestable-action]", function(e) {
                if ($this.dragEl || !hasTouch && e.button !== 0) {
                    return;
                }
                e.preventDefault();
                var target = UI.$(e.currentTarget), action = target.data("nestableAction"), item = target.closest($this.options._listItemClass);
                if (action === "collapse") {
                    $this.collapseItem(item);
                }
                if (action === "expand") {
                    $this.expandItem(item);
                }
                if (action === "toggle") {
                    $this.toggleItem(item);
                }
            });
            var onStartEvent = function(e) {
                var handle = UI.$(e.target);
                if (e.target === $this.element[0]) {
                    return;
                }
                if (handle.is($this.options._noDragClass) || handle.closest($this.options._noDragClass).length) {
                    return;
                }
                if (handle.is("[data-nestable-action]") || handle.closest("[data-nestable-action]").length) {
                    return;
                }
                if ($this.options.handleClass && !handle.hasClass($this.options.handleClass)) {
                    if ($this.options.handleClass) {
                        handle = handle.closest($this.options._handleClass);
                    }
                }
                if (!handle.length || $this.dragEl || !hasTouch && e.button !== 0 || hasTouch && e.touches.length !== 1) {
                    return;
                }
                if (e.originalEvent && e.originalEvent.touches) {
                    e = evt.originalEvent.touches[0];
                }
                $this.delayMove = function(evt) {
                    evt.preventDefault();
                    $this.dragStart(e);
                    $this.trigger("start.uk.nestable", [ $this ]);
                    $this.delayMove = false;
                };
                $this.delayMove.x = parseInt(e.pageX, 10);
                $this.delayMove.y = parseInt(e.pageY, 10);
                $this.delayMove.threshold = $this.options.idlethreshold;
                e.preventDefault();
            };
            var onMoveEvent = function(e) {
                if (e.originalEvent && e.originalEvent.touches) {
                    e = e.originalEvent.touches[0];
                }
                if ($this.delayMove && (Math.abs(e.pageX - $this.delayMove.x) > $this.delayMove.threshold || Math.abs(e.pageY - $this.delayMove.y) > $this.delayMove.threshold)) {
                    if (!window.getSelection().toString()) {
                        $this.delayMove(e);
                    } else {
                        $this.delayMove = false;
                    }
                }
                if ($this.dragEl) {
                    e.preventDefault();
                    $this.dragMove(e);
                    $this.trigger("move.uk.nestable", [ $this ]);
                }
            };
            var onEndEvent = function(e) {
                if ($this.dragEl) {
                    e.preventDefault();
                    $this.dragStop(hasTouch ? e.touches[0] : e);
                }
                draggingElement = false;
                $this.delayMove = false;
            };
            if (hasTouch) {
                this.element[0].addEventListener(eStart, onStartEvent, false);
                window.addEventListener(eMove, onMoveEvent, false);
                window.addEventListener(eEnd, onEndEvent, false);
                window.addEventListener(eCancel, onEndEvent, false);
            } else {
                this.on(eStart, onStartEvent);
                $win.on(eMove, onMoveEvent);
                $win.on(eEnd, onEndEvent);
            }
        },
        serialize: function() {
            var data, depth = 0, list = this, step = function(level, depth) {
                var array = [], items = level.children(list.options._listItemClass);
                items.each(function() {
                    var li = UI.$(this), item = {}, attribute, sub = li.children(list.options._listClass);
                    for (var i = 0; i < li[0].attributes.length; i++) {
                        attribute = li[0].attributes[i];
                        if (attribute.name.indexOf("data-") === 0) {
                            item[attribute.name.substr(5)] = UI.Utils.str2json(attribute.value);
                        }
                    }
                    if (sub.length) {
                        item.children = step(sub, depth + 1);
                    }
                    array.push(item);
                });
                return array;
            };
            data = step(list.element, depth);
            return data;
        },
        list: function(options) {
            var data = [], list = this, depth = 0, step = function(level, depth, parent) {
                var items = level.children(options._listItemClass);
                items.each(function(index) {
                    var li = UI.$(this), item = UI.$.extend({
                        parent_id: parent ? parent : null,
                        depth: depth,
                        order: index
                    }, li.data()), sub = li.children(options._listClass);
                    data.push(item);
                    if (sub.length) {
                        step(sub, depth + 1, li.data(options.idProperty || "id"));
                    }
                });
            };
            options = UI.$.extend({}, list.options, options);
            step(list.element, depth);
            return data;
        },
        reset: function() {
            this.mouse = {
                offsetX: 0,
                offsetY: 0,
                startX: 0,
                startY: 0,
                lastX: 0,
                lastY: 0,
                nowX: 0,
                nowY: 0,
                distX: 0,
                distY: 0,
                dirAx: 0,
                dirX: 0,
                dirY: 0,
                lastDirX: 0,
                lastDirY: 0,
                distAxX: 0,
                distAxY: 0
            };
            this.moving = false;
            this.dragEl = null;
            this.dragRootEl = null;
            this.dragDepth = 0;
            this.hasNewRoot = false;
            this.pointEl = null;
            for (var i = 0; i < touchedlists.length; i++) {
                this.checkEmptyList(touchedlists[i]);
            }
            touchedlists = [];
        },
        toggleItem: function(li) {
            this[li.hasClass(this.options.collapsedClass) ? "expandItem" : "collapseItem"](li);
        },
        expandItem: function(li) {
            li.removeClass(this.options.collapsedClass);
        },
        collapseItem: function(li) {
            var lists = li.children(this.options._listClass);
            if (lists.length) {
                li.addClass(this.options.collapsedClass);
            }
        },
        expandAll: function() {
            var list = this;
            this.find(list.options._listItemClass).each(function() {
                list.expandItem(UI.$(this));
            });
        },
        collapseAll: function() {
            var list = this;
            this.find(list.options._listItemClass).each(function() {
                list.collapseItem(UI.$(this));
            });
        },
        setParent: function(li) {
            if (li.children(this.options._listClass).length) {
                li.addClass("uk-parent");
            }
        },
        unsetParent: function(li) {
            li.removeClass("uk-parent " + this.options.collapsedClass);
            li.children(this.options._listClass).remove();
        },
        dragStart: function(e) {
            var mouse = this.mouse, target = UI.$(e.target), dragItem = target.closest(this.options._listItemClass), offset = dragItem.offset();
            this.placeEl = dragItem;
            mouse.offsetX = e.pageX - offset.left;
            mouse.offsetY = e.pageY - offset.top;
            mouse.startX = mouse.lastX = offset.left;
            mouse.startY = mouse.lastY = offset.top;
            this.dragRootEl = this.element;
            this.dragEl = UI.$("<ul></ul>").addClass(this.options.listClass + " " + this.options.dragClass).append(dragItem.clone());
            this.dragEl.css("width", dragItem.width());
            this.placeEl.addClass(this.options.placeholderClass);
            draggingElement = this.dragEl;
            this.tmpDragOnSiblings = [ dragItem[0].previousSibling, dragItem[0].nextSibling ];
            UI.$body.append(this.dragEl);
            this.dragEl.css({
                left: offset.left,
                top: offset.top
            });
            // total depth of dragging item
            var i, depth, items = this.dragEl.find(this.options._listItemClass);
            for (i = 0; i < items.length; i++) {
                depth = UI.$(items[i]).parents(this.options._listClass + "," + this.options._listBaseClass).length;
                if (depth > this.dragDepth) {
                    this.dragDepth = depth;
                }
            }
            html.addClass(this.options.movingClass);
        },
        dragStop: function(e) {
            var el = this.placeEl, root = this.placeEl.parents(this.options._listBaseClass + ":first");
            this.placeEl.removeClass(this.options.placeholderClass);
            this.dragEl.remove();
            if (this.element[0] !== root[0]) {
                root.trigger("change.uk.nestable", [ el, "added", root, root.data("nestable") ]);
                this.element.trigger("change.uk.nestable", [ el, "removed", this.element, this ]);
            } else {
                this.element.trigger("change.uk.nestable", [ el, "moved", this.element, this ]);
            }
            this.trigger("stop.uk.nestable", [ this, el ]);
            this.reset();
            html.removeClass(this.options.movingClass);
        },
        dragMove: function(e) {
            var list, parent, prev, next, depth, opt = this.options, mouse = this.mouse, maxDepth = this.dragRootEl ? this.dragRootEl.data("nestable").options.maxDepth : opt.maxDepth;
            this.dragEl.css({
                left: e.pageX - mouse.offsetX,
                top: e.pageY - mouse.offsetY
            });
            // mouse position last events
            mouse.lastX = mouse.nowX;
            mouse.lastY = mouse.nowY;
            // mouse position this events
            mouse.nowX = e.pageX;
            mouse.nowY = e.pageY;
            // distance mouse moved between events
            mouse.distX = mouse.nowX - mouse.lastX;
            mouse.distY = mouse.nowY - mouse.lastY;
            // direction mouse was moving
            mouse.lastDirX = mouse.dirX;
            mouse.lastDirY = mouse.dirY;
            // direction mouse is now moving (on both axis)
            mouse.dirX = mouse.distX === 0 ? 0 : mouse.distX > 0 ? 1 : -1;
            mouse.dirY = mouse.distY === 0 ? 0 : mouse.distY > 0 ? 1 : -1;
            // axis mouse is now moving on
            var newAx = Math.abs(mouse.distX) > Math.abs(mouse.distY) ? 1 : 0;
            // do nothing on first move
            if (!mouse.moving) {
                mouse.dirAx = newAx;
                mouse.moving = true;
                return;
            }
            // calc distance moved on this axis (and direction)
            if (mouse.dirAx !== newAx) {
                mouse.distAxX = 0;
                mouse.distAxY = 0;
            } else {
                mouse.distAxX += Math.abs(mouse.distX);
                if (mouse.dirX !== 0 && mouse.dirX !== mouse.lastDirX) {
                    mouse.distAxX = 0;
                }
                mouse.distAxY += Math.abs(mouse.distY);
                if (mouse.dirY !== 0 && mouse.dirY !== mouse.lastDirY) {
                    mouse.distAxY = 0;
                }
            }
            mouse.dirAx = newAx;
            /**
             * move horizontal
             */
            if (mouse.dirAx && mouse.distAxX >= opt.threshold) {
                // reset move distance on x-axis for new phase
                mouse.distAxX = 0;
                prev = this.placeEl.prev("li");
                // increase horizontal level if previous sibling exists and is not collapsed
                if (mouse.distX > 0 && prev.length && !prev.hasClass(opt.collapsedClass)) {
                    // cannot increase level when item above is collapsed
                    list = prev.find(opt._listClass).last();
                    // check if depth limit has reached
                    depth = this.placeEl.parents(opt._listClass + "," + opt._listBaseClass).length;
                    if (depth + this.dragDepth <= maxDepth) {
                        // create new sub-level if one doesn't exist
                        if (!list.length) {
                            list = UI.$("<ul/>").addClass(opt.listClass);
                            list.append(this.placeEl);
                            prev.append(list);
                            this.setParent(prev);
                        } else {
                            // else append to next level up
                            list = prev.children(opt._listClass).last();
                            list.append(this.placeEl);
                        }
                    }
                }
                // decrease horizontal level
                if (mouse.distX < 0) {
                    // we can't decrease a level if an item preceeds the current one
                    next = this.placeEl.next("li");
                    if (!next.length) {
                        parent = this.placeEl.parent();
                        this.placeEl.closest(opt._listItemClass).after(this.placeEl);
                        if (!parent.children().length) {
                            this.unsetParent(parent.parent());
                        }
                    }
                }
            }
            var isEmpty = false;
            // find list item under cursor
            var pointX = this.dragEl.offset().left - (window.pageXOffset || document.scrollLeft || 0), pointY = e.pageY - (window.pageYOffset || document.documentElement.scrollTop);
            this.pointEl = UI.$(document.elementFromPoint(pointX, pointY));
            if (opt.handleClass && this.pointEl.hasClass(opt.handleClass)) {
                this.pointEl = this.pointEl.closest(opt._listItemClass);
            } else {
                var nestableitem = this.pointEl.closest(opt._listItemClass);
                if (nestableitem.length) {
                    this.pointEl = nestableitem;
                }
            }
            if (this.placeEl.find(this.pointEl).length) {
                return;
            }
            if (this.pointEl.data("nestable") && !this.pointEl.children().length) {
                isEmpty = true;
                this.checkEmptyList(this.pointEl);
            } else if (!this.pointEl.length || !this.pointEl.hasClass(opt.listItemClass)) {
                return;
            }
            // find parent list of item under cursor
            var pointElRoot = this.element, tmpRoot = this.pointEl.closest(this.options._listBaseClass), isNewRoot = pointElRoot[0] !== this.pointEl.closest(this.options._listBaseClass)[0];
            /**
             * move vertical
             */
            if (!mouse.dirAx || isNewRoot || isEmpty) {
                // check if groups match if dragging over new root
                if (isNewRoot && opt.group !== tmpRoot.data("nestable-group")) {
                    return;
                } else {
                    touchedlists.push(pointElRoot);
                }
                // check depth limit
                depth = this.dragDepth - 1 + this.pointEl.parents(opt._listClass + "," + opt._listBaseClass).length;
                if (depth > maxDepth) {
                    return;
                }
                var before = e.pageY < this.pointEl.offset().top + this.pointEl.height() / 2;
                parent = this.placeEl.parent();
                if (isEmpty) {
                    this.pointEl.append(this.placeEl);
                } else if (before) {
                    this.pointEl.before(this.placeEl);
                } else {
                    this.pointEl.after(this.placeEl);
                }
                if (!parent.children().length) {
                    if (!parent.data("nestable")) this.unsetParent(parent.parent());
                }
                this.checkEmptyList(this.dragRootEl);
                this.checkEmptyList(pointElRoot);
                // parent root list has changed
                if (isNewRoot) {
                    this.dragRootEl = tmpRoot;
                    this.hasNewRoot = this.element[0] !== this.dragRootEl[0];
                }
            }
        },
        checkEmptyList: function(list) {
            list = list ? UI.$(list) : this.element;
            if (!list.children().length) {
                list.html("");
            }
        }
    });
    return UI.nestable;
});

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-notify", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    var containers = {}, messages = {}, notify = function(options) {
        if (UI.$.type(options) == "string") {
            options = {
                message: options
            };
        }
        if (arguments[1]) {
            options = UI.$.extend(options, UI.$.type(arguments[1]) == "string" ? {
                status: arguments[1]
            } : arguments[1]);
        }
        return new Message(options).show();
    }, closeAll = function(group, instantly) {
        var id;
        if (group) {
            for (id in messages) {
                if (group === messages[id].group) messages[id].close(instantly);
            }
        } else {
            for (id in messages) {
                messages[id].close(instantly);
            }
        }
    };
    var Message = function(options) {
        var $this = this;
        this.options = UI.$.extend({}, Message.defaults, options);
        this.uuid = UI.Utils.uid("notifymsg");
        this.element = UI.$([ '<div class="uk-notify-message">', '<a class="uk-close"></a>', "<div></div>", "</div>" ].join("")).data("notifyMessage", this);
        this.content(this.options.message);
        // status
        if (this.options.status) {
            this.element.addClass("uk-notify-message-" + this.options.status);
            this.currentstatus = this.options.status;
        }
        this.group = this.options.group;
        messages[this.uuid] = this;
        if (!containers[this.options.pos]) {
            containers[this.options.pos] = UI.$('<div class="uk-notify uk-notify-' + this.options.pos + '"></div>').appendTo("body").on("click", ".uk-notify-message", function() {
                var message = UI.$(this).data("notifyMessage");
                message.element.trigger("manualclose.uk.notify", [ message ]);
                message.close();
            });
        }
    };
    UI.$.extend(Message.prototype, {
        uuid: false,
        element: false,
        timout: false,
        currentstatus: "",
        group: false,
        show: function() {
            if (this.element.is(":visible")) return;
            var $this = this;
            containers[this.options.pos].show().prepend(this.element);
            var marginbottom = parseInt(this.element.css("margin-bottom"), 10);
            this.element.css({
                opacity: 0,
                "margin-top": -1 * this.element.outerHeight(),
                "margin-bottom": 0
            }).animate({
                opacity: 1,
                "margin-top": 0,
                "margin-bottom": marginbottom
            }, function() {
                if ($this.options.timeout) {
                    var closefn = function() {
                        $this.close();
                    };
                    $this.timeout = setTimeout(closefn, $this.options.timeout);
                    $this.element.hover(function() {
                        clearTimeout($this.timeout);
                    }, function() {
                        $this.timeout = setTimeout(closefn, $this.options.timeout);
                    });
                }
            });
            return this;
        },
        close: function(instantly) {
            var $this = this, finalize = function() {
                $this.element.remove();
                if (!containers[$this.options.pos].children().length) {
                    containers[$this.options.pos].hide();
                }
                $this.options.onClose.apply($this, []);
                $this.element.trigger("close.uk.notify", [ $this ]);
                delete messages[$this.uuid];
            };
            if (this.timeout) clearTimeout(this.timeout);
            if (instantly) {
                finalize();
            } else {
                this.element.animate({
                    opacity: 0,
                    "margin-top": -1 * this.element.outerHeight(),
                    "margin-bottom": 0
                }, function() {
                    finalize();
                });
            }
        },
        content: function(html) {
            var container = this.element.find(">div");
            if (!html) {
                return container.html();
            }
            container.html(html);
            return this;
        },
        status: function(status) {
            if (!status) {
                return this.currentstatus;
            }
            this.element.removeClass("uk-notify-message-" + this.currentstatus).addClass("uk-notify-message-" + status);
            this.currentstatus = status;
            return this;
        }
    });
    Message.defaults = {
        message: "",
        status: "",
        timeout: 5e3,
        group: null,
        pos: "top-center",
        onClose: function() {}
    };
    UI.notify = notify;
    UI.notify.message = Message;
    UI.notify.closeAll = closeAll;
    return notify;
});

/*
 * Based on simplePagination - Copyright (c) 2012 Flavius Matis - http://flaviusmatis.github.com/simplePagination.js/ (MIT)
 */
(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-pagination", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    UI.component("pagination", {
        defaults: {
            items: 1,
            itemsOnPage: 1,
            pages: 0,
            displayedPages: 3,
            edges: 3,
            currentPage: 1,
            lblPrev: false,
            lblNext: false,
            onSelectPage: function() {}
        },
        boot: function() {
            // init code
            UI.ready(function(context) {
                UI.$("[data-uk-pagination]", context).each(function() {
                    var ele = UI.$(this);
                    if (!ele.data("pagination")) {
                        var obj = UI.pagination(ele, UI.Utils.options(ele.attr("data-uk-pagination")));
                    }
                });
            });
        },
        init: function() {
            var $this = this;
            this.pages = this.options.pages ? this.options.pages : Math.ceil(this.options.items / this.options.itemsOnPage) ? Math.ceil(this.options.items / this.options.itemsOnPage) : 1;
            this.currentPage = this.options.currentPage - 1;
            this.halfDisplayed = this.options.displayedPages / 2;
            this.on("click", "a[data-page]", function(e) {
                e.preventDefault();
                $this.selectPage(UI.$(this).data("page"));
            });
            this._render();
        },
        _getInterval: function() {
            return {
                start: Math.ceil(this.currentPage > this.halfDisplayed ? Math.max(Math.min(this.currentPage - this.halfDisplayed, this.pages - this.options.displayedPages), 0) : 0),
                end: Math.ceil(this.currentPage > this.halfDisplayed ? Math.min(this.currentPage + this.halfDisplayed, this.pages) : Math.min(this.options.displayedPages, this.pages))
            };
        },
        render: function(pages) {
            this.pages = pages ? pages : this.pages;
            this._render();
        },
        selectPage: function(pageIndex, pages) {
            this.currentPage = pageIndex;
            this.render(pages);
            this.options.onSelectPage.apply(this, [ pageIndex ]);
            this.trigger("select.uk.pagination", [ pageIndex, this ]);
        },
        _render: function() {
            var o = this.options, interval = this._getInterval(), i;
            this.element.empty();
            // Generate Prev link
            if (o.lblPrev) this._append(o.currentPage - 1, {
                text: o.lblPrev
            });
            // Generate start edges
            if (interval.start > 0 && o.edges > 0) {
                var end = Math.min(o.edges, interval.start);
                for (i = 0; i < end; i++) this._append(i);
                if (o.edges < interval.start && interval.start - o.edges != 1) {
                    this.element.append("<li><span>...</span></li>");
                } else if (interval.start - o.edges == 1) {
                    this._append(o.edges);
                }
            }
            // Generate interval links
            for (i = interval.start; i < interval.end; i++) this._append(i);
            // Generate end edges
            if (interval.end < this.pages && o.edges > 0) {
                if (this.pages - o.edges > interval.end && this.pages - o.edges - interval.end != 1) {
                    this.element.append("<li><span>...</span></li>");
                } else if (this.pages - o.edges - interval.end == 1) {
                    this._append(interval.end++);
                }
                var begin = Math.max(this.pages - o.edges, interval.end);
                for (i = begin; i < this.pages; i++) this._append(i);
            }
            // Generate Next link (unless option is set for at front)
            if (o.lblNext) this._append(o.currentPage + 1, {
                text: o.lblNext
            });
        },
        _append: function(pageIndex, opts) {
            var $this = this, item, link, options;
            pageIndex = pageIndex < 0 ? 0 : pageIndex < this.pages ? pageIndex : this.pages - 1;
            options = UI.$.extend({
                text: pageIndex + 1
            }, opts);
            item = pageIndex == this.currentPage ? '<li class="uk-active"><span>' + options.text + "</span></li>" : '<li><a href="#page-' + (pageIndex + 1) + '" data-page="' + pageIndex + '">' + options.text + "</a></li>";
            this.element.append(item);
        }
    });
    return UI.pagination;
});

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-parallax", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    var parallaxes = [], supports3d = false, scrolltop = 0, wh = window.innerHeight, checkParallaxes = function() {
        scrolltop = UI.$win.scrollTop();
        window.requestAnimationFrame.apply(window, [ function() {
            for (var i = 0; i < parallaxes.length; i++) {
                parallaxes[i].process();
            }
        } ]);
    };
    UI.component("parallax", {
        defaults: {
            velocity: .5,
            target: false,
            viewport: false,
            media: false
        },
        boot: function() {
            supports3d = function() {
                var el = document.createElement("div"), has3d, transforms = {
                    WebkitTransform: "-webkit-transform",
                    MSTransform: "-ms-transform",
                    MozTransform: "-moz-transform",
                    Transform: "transform"
                };
                // Add it to the body to get the computed style.
                document.body.insertBefore(el, null);
                for (var t in transforms) {
                    if (el.style[t] !== undefined) {
                        el.style[t] = "translate3d(1px,1px,1px)";
                        has3d = window.getComputedStyle(el).getPropertyValue(transforms[t]);
                    }
                }
                document.body.removeChild(el);
                return has3d !== undefined && has3d.length > 0 && has3d !== "none";
            }();
            // listen to scroll and resize
            UI.$doc.on("scrolling.uk.document", checkParallaxes);
            UI.$win.on("load resize orientationchange", UI.Utils.debounce(function() {
                wh = window.innerHeight;
                checkParallaxes();
            }, 50));
            // init code
            UI.ready(function(context) {
                UI.$("[data-uk-parallax]", context).each(function() {
                    var parallax = UI.$(this);
                    if (!parallax.data("parallax")) {
                        var obj = UI.parallax(parallax, UI.Utils.options(parallax.attr("data-uk-parallax")));
                    }
                });
            });
        },
        init: function() {
            this.base = this.options.target ? UI.$(this.options.target) : this.element;
            this.props = {};
            this.velocity = this.options.velocity || 1;
            var reserved = [ "target", "velocity", "viewport", "plugins", "media" ];
            Object.keys(this.options).forEach(function(prop) {
                if (reserved.indexOf(prop) !== -1) {
                    return;
                }
                var start, end, dir, diff, startend = String(this.options[prop]).split(",");
                if (prop.match(/color/i)) {
                    start = startend[1] ? startend[0] : this._getStartValue(prop), end = startend[1] ? startend[1] : startend[0];
                    if (!start) {
                        start = "rgba(255,255,255,0)";
                    }
                } else {
                    start = parseFloat(startend[1] ? startend[0] : this._getStartValue(prop)), end = parseFloat(startend[1] ? startend[1] : startend[0]);
                    diff = start < end ? end - start : start - end;
                    dir = start < end ? 1 : -1;
                }
                this.props[prop] = {
                    start: start,
                    end: end,
                    dir: dir,
                    diff: diff
                };
            }.bind(this));
            parallaxes.push(this);
        },
        process: function() {
            if (this.options.media) {
                switch (typeof this.options.media) {
                  case "number":
                    if (window.innerWidth < this.options.media) {
                        return false;
                    }
                    break;

                  case "string":
                    if (window.matchMedia && !window.matchMedia(this.options.media).matches) {
                        return false;
                    }
                    break;
                }
            }
            var percent = this.percentageInViewport();
            if (this.options.viewport !== false) {
                percent = this.options.viewport === 0 ? 1 : percent / this.options.viewport;
            }
            this.update(percent);
        },
        percentageInViewport: function() {
            var top = this.base.offset().top, height = this.base.outerHeight(), distance, percentage, percent;
            if (top > scrolltop + wh) {
                percent = 0;
            } else if (top + height < scrolltop) {
                percent = 1;
            } else {
                if (top + height < wh) {
                    percent = (scrolltop < wh ? scrolltop : scrolltop - wh) / (top + height);
                } else {
                    distance = scrolltop + wh - top;
                    percentage = Math.round(distance / ((wh + height) / 100));
                    percent = percentage / 100;
                }
            }
            return percent;
        },
        update: function(percent) {
            var css = {
                transform: ""
            }, compercent = percent * (1 - (this.velocity - this.velocity * percent)), opts, val;
            if (compercent < 0) compercent = 0;
            if (compercent > 1) compercent = 1;
            if (this._percent !== undefined && this._percent == compercent) {
                return;
            }
            Object.keys(this.props).forEach(function(prop) {
                opts = this.props[prop];
                if (percent === 0) {
                    val = opts.start;
                } else if (percent === 1) {
                    val = opts.end;
                } else if (opts.diff !== undefined) {
                    val = opts.start + opts.diff * compercent * opts.dir;
                }
                if ((prop == "bg" || prop == "bgp") && !this._bgcover) {
                    this._bgcover = initBgImageParallax(this, prop, opts);
                }
                switch (prop) {
                  // transforms
                    case "x":
                    css.transform += supports3d ? " translate3d(" + val + "px, 0, 0)" : " translateX(" + val + "px)";
                    break;

                  case "xp":
                    css.transform += supports3d ? " translate3d(" + val + "%, 0, 0)" : " translateX(" + val + "%)";
                    break;

                  case "y":
                    css.transform += supports3d ? " translate3d(0, " + val + "px, 0)" : " translateY(" + val + "px)";
                    break;

                  case "yp":
                    css.transform += supports3d ? " translate3d(0, " + val + "%, 0)" : " translateY(" + val + "%)";
                    break;

                  case "rotate":
                    css.transform += " rotate(" + val + "deg)";
                    break;

                  case "scale":
                    css.transform += " scale(" + val + ")";
                    break;

                  // bg image
                    case "bg":
                    css["background-position"] = "50% " + val + "px";
                    break;

                  case "bgp":
                    css["background-position"] = "50% " + val + "%";
                    break;

                  // color
                    case "color":
                  case "background-color":
                  case "border-color":
                    css[prop] = calcColor(opts.start, opts.end, compercent);
                    break;

                  default:
                    css[prop] = val;
                    break;
                }
            }.bind(this));
            this.element.css(css);
            this._percent = compercent;
        },
        _getStartValue: function(prop) {
            var value = 0;
            switch (prop) {
              case "scale":
                value = 1;
                break;

              default:
                value = this.element.css(prop);
            }
            return value || 0;
        }
    });
    // helper
    function initBgImageParallax(obj, prop, opts) {
        var img = new Image(), url, loaded, element, size, check, ratio, width, height;
        element = obj.element.css({
            "background-size": "cover",
            "background-repeat": "no-repeat"
        });
        url = element.css("background-image").replace(/^url\(/g, "").replace(/\)$/g, "").replace(/("|')/g, "");
        check = function() {
            var w = element.width(), h = element.height(), extra = prop == "bg" ? opts.diff : opts.diff / 100 * h;
            h += extra;
            w += Math.ceil(extra * ratio);
            // if element height < parent height (gap underneath)
            if (w / ratio < h) {
                width = Math.ceil(h * ratio);
                height = h;
            } else {
                width = w;
                height = Math.ceil(w / ratio);
            }
            obj.element.css({
                "background-size": width + "px " + height + "px"
            });
        };
        img.onerror = function() {};
        img.onload = function() {
            size = {
                w: img.width,
                height: img.height
            };
            ratio = img.width / img.height;
            UI.$win.on("load resize orientationchange", UI.Utils.debounce(function() {
                check();
            }, 50));
            check();
        };
        img.src = url;
        return true;
    }
    // Some named colors to work with, added by Bradley Ayers
    // From Interface by Stefan Petre
    // http://interface.eyecon.ro/
    var colors = {
        black: [ 0, 0, 0, 1 ],
        blue: [ 0, 0, 255, 1 ],
        brown: [ 165, 42, 42, 1 ],
        cyan: [ 0, 255, 255, 1 ],
        fuchsia: [ 255, 0, 255, 1 ],
        gold: [ 255, 215, 0, 1 ],
        green: [ 0, 128, 0, 1 ],
        indigo: [ 75, 0, 130, 1 ],
        khaki: [ 240, 230, 140, 1 ],
        lime: [ 0, 255, 0, 1 ],
        magenta: [ 255, 0, 255, 1 ],
        maroon: [ 128, 0, 0, 1 ],
        navy: [ 0, 0, 128, 1 ],
        olive: [ 128, 128, 0, 1 ],
        orange: [ 255, 165, 0, 1 ],
        pink: [ 255, 192, 203, 1 ],
        purple: [ 128, 0, 128, 1 ],
        violet: [ 128, 0, 128, 1 ],
        red: [ 255, 0, 0, 1 ],
        silver: [ 192, 192, 192, 1 ],
        white: [ 255, 255, 255, 1 ],
        yellow: [ 255, 255, 0, 1 ],
        transparent: [ 255, 255, 255, 0 ]
    };
    function calcColor(start, end, pos) {
        start = parseColor(start);
        end = parseColor(end);
        pos = pos || 0;
        return calculateColor(start, end, pos);
    }
    /**!
     * @preserve Color animation 1.6.0
     * http://www.bitstorm.org/jquery/color-animation/
     * Copyright 2011, 2013 Edwin Martin <edwin@bitstorm.org>
     * Released under the MIT and GPL licenses.
     */
    // Calculate an in-between color. Returns "#aabbcc"-like string.
    function calculateColor(begin, end, pos) {
        var color = "rgba(" + parseInt(begin[0] + pos * (end[0] - begin[0]), 10) + "," + parseInt(begin[1] + pos * (end[1] - begin[1]), 10) + "," + parseInt(begin[2] + pos * (end[2] - begin[2]), 10) + "," + (begin && end ? parseFloat(begin[3] + pos * (end[3] - begin[3])) : 1);
        color += ")";
        return color;
    }
    // Parse an CSS-syntax color. Outputs an array [r, g, b]
    function parseColor(color) {
        var match, quadruplet;
        // Match #aabbcc
        if (match = /#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})/.exec(color)) {
            quadruplet = [ parseInt(match[1], 16), parseInt(match[2], 16), parseInt(match[3], 16), 1 ];
        } else if (match = /#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])/.exec(color)) {
            quadruplet = [ parseInt(match[1], 16) * 17, parseInt(match[2], 16) * 17, parseInt(match[3], 16) * 17, 1 ];
        } else if (match = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(color)) {
            quadruplet = [ parseInt(match[1]), parseInt(match[2]), parseInt(match[3]), 1 ];
        } else if (match = /rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9\.]*)\s*\)/.exec(color)) {
            quadruplet = [ parseInt(match[1], 10), parseInt(match[2], 10), parseInt(match[3], 10), parseFloat(match[4]) ];
        } else {
            quadruplet = colors[color] || [ 255, 255, 255, 0 ];
        }
        return quadruplet;
    }
    return UI.parallax;
});

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-search", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    UI.component("search", {
        defaults: {
            msgResultsHeader: "Search Results",
            msgMoreResults: "More Results",
            msgNoResults: "No results found",
            template: '<ul class="uk-nav uk-nav-search uk-autocomplete-results">                                      {{#msgResultsHeader}}<li class="uk-nav-header uk-skip">{{msgResultsHeader}}</li>{{/msgResultsHeader}}                                      {{#items && items.length}}                                          {{~items}}                                          <li data-url="{{!$item.url}}">                                              <a href="{{!$item.url}}">                                                  {{{$item.title}}}                                                  {{#$item.text}}<div>{{{$item.text}}}</div>{{/$item.text}}                                              </a>                                          </li>                                          {{/items}}                                          {{#msgMoreResults}}                                              <li class="uk-nav-divider uk-skip"></li>                                              <li class="uk-search-moreresults" data-moreresults="true"><a href="#" onclick="jQuery(this).closest(\'form\').submit();">{{msgMoreResults}}</a></li>                                          {{/msgMoreResults}}                                      {{/end}}                                      {{^items.length}}                                        {{#msgNoResults}}<li class="uk-skip"><a>{{msgNoResults}}</a></li>{{/msgNoResults}}                                      {{/end}}                                  </ul>',
            renderer: function(data) {
                var $this = this, opts = this.options;
                this.dropdown.append(this.template({
                    items: data.results || [],
                    msgResultsHeader: opts.msgResultsHeader,
                    msgMoreResults: opts.msgMoreResults,
                    msgNoResults: opts.msgNoResults
                }));
                this.show();
            }
        },
        boot: function() {
            // init code
            UI.$html.on("focus.search.uikit", "[data-uk-search]", function(e) {
                var ele = UI.$(this);
                if (!ele.data("search")) {
                    var obj = UI.search(ele, UI.Utils.options(ele.attr("data-uk-search")));
                }
            });
        },
        init: function() {
            var $this = this;
            this.autocomplete = UI.autocomplete(this.element, this.options);
            this.autocomplete.dropdown.addClass("uk-dropdown-search");
            this.autocomplete.input.on("keyup", function() {
                $this.element[$this.autocomplete.input.val() ? "addClass" : "removeClass"]("uk-active");
            }).closest("form").on("reset", function() {
                $this.value = "";
                $this.element.removeClass("uk-active");
            });
            this.on("selectitem.uk.autocomplete", function(e, data) {
                if (data.url) {
                    location.href = data.url;
                } else if (data.moreresults) {
                    $this.autocomplete.input.closest("form").submit();
                }
            });
            this.element.data("search", this);
        }
    });
});

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-slider", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    var dragging, delayIdle, anchor, dragged, store = {};
    UI.component("slider", {
        defaults: {
            center: false,
            threshold: 10,
            infinite: true,
            activecls: "uk-active"
        },
        boot: function() {
            // init code
            UI.ready(function(context) {
                setTimeout(function() {
                    UI.$("[data-uk-slider]", context).each(function() {
                        var ele = UI.$(this);
                        if (!ele.data("slider")) {
                            UI.slider(ele, UI.Utils.options(ele.attr("data-uk-slider")));
                        }
                    });
                }, 0);
            });
        },
        init: function() {
            var $this = this;
            this.container = this.element.find(".uk-slider");
            this.focus = 0;
            UI.$win.on("resize load", UI.Utils.debounce(function() {
                $this.resize(true);
            }, 100));
            this.on("click.uikit.slider", "[data-uk-slider-item]", function(e) {
                e.preventDefault();
                var item = UI.$(this).attr("data-uk-slider-item");
                if ($this.focus == item) return;
                switch (item) {
                  case "next":
                  case "previous":
                    $this[item == "next" ? "next" : "previous"]();
                    break;

                  default:
                    $this.updateFocus(parseInt(slide, 10));
                }
            });
            this.container.on("touchstart mousedown", function(evt) {
                if (evt.originalEvent && evt.originalEvent.touches) {
                    evt = evt.originalEvent.touches[0];
                }
                // ignore right click button
                if (evt.button && evt.button == 2 || !$this.active) {
                    return;
                }
                anchor = UI.$(evt.target).is("a") ? UI.$(evt.target) : UI.$(evt.target).parents("a:first");
                dragged = false;
                if (anchor.length) {
                    anchor.one("click", function(e) {
                        if (dragged) e.preventDefault();
                    });
                }
                delayIdle = function(e) {
                    dragged = true;
                    dragging = $this;
                    store = {
                        touchx: parseInt(e.pageX, 10),
                        dir: 1,
                        focus: $this.focus,
                        base: $this.options.center ? "center" : "area"
                    };
                    if (e.originalEvent && e.originalEvent.touches) {
                        e = e.originalEvent.touches[0];
                    }
                    dragging.element.data({
                        "pointer-start": {
                            x: parseInt(e.pageX, 10),
                            y: parseInt(e.pageY, 10)
                        },
                        "pointer-pos-start": $this.pos
                    });
                    $this.container.addClass("uk-drag");
                    delayIdle = false;
                };
                delayIdle.x = parseInt(evt.pageX, 10);
                delayIdle.threshold = $this.options.threshold;
            });
            this.resize(true);
            this.on("display.uk.check", function() {
                if ($this.element.is(":visible")) {
                    $this.resize(true);
                }
            });
            // prevent dragging links + images
            this.element.find("a,img").attr("draggable", "false");
        },
        resize: function(focus) {
            var $this = this, pos = 0, maxheight = 0, item, width, cwidth, size;
            this.items = this.container.children().filter(":visible");
            this.vp = this.element[0].getBoundingClientRect().width;
            this.container.css({
                "min-width": "",
                "min-height": ""
            });
            this.items.each(function(idx) {
                item = UI.$(this);
                size = item.css({
                    left: "",
                    width: ""
                })[0].getBoundingClientRect();
                width = size.width;
                cwidth = item.width();
                maxheight = Math.max(maxheight, size.height);
                item.css({
                    left: pos,
                    width: width
                }).data({
                    idx: idx,
                    left: pos,
                    width: width,
                    cwidth: cwidth,
                    area: pos + width,
                    center: pos - ($this.vp / 2 - cwidth / 2)
                });
                pos += width;
            });
            this.container.css({
                "min-width": pos,
                "min-height": maxheight
            });
            if (this.options.infinite && pos <= 2 * this.vp && !this.itemsResized) {
                // fill with cloned items
                this.container.children().each(function(idx) {
                    $this.container.append($this.items.eq(idx).clone(true).attr("id", ""));
                }).each(function(idx) {
                    $this.container.append($this.items.eq(idx).clone(true).attr("id", ""));
                });
                this.itemsResized = true;
                return this.resize();
            }
            this.cw = pos;
            this.pos = 0;
            this.active = pos >= this.vp;
            this.container.css({
                "-ms-transform": "",
                "-webkit-transform": "",
                transform: ""
            });
            this.updateFocus(0);
        },
        updatePos: function(pos) {
            this.pos = pos;
            this.container.css({
                "-ms-transform": "translateX(" + pos + "px)",
                "-webkit-transform": "translateX(" + pos + "px)",
                transform: "translateX(" + pos + "px)"
            });
        },
        updateFocus: function(idx, dir) {
            if (!this.active) {
                return;
            }
            dir = dir || (idx > this.focus ? 1 : -1);
            var $this = this, item = this.items.eq(idx), area, i;
            if (this.options.infinite) {
                this.infinite(idx, dir);
            }
            if (this.options.center) {
                this.updatePos(item.data("center") * -1);
                this.items.filter("." + this.options.activecls).removeClass(this.options.activecls);
                item.addClass(this.options.activecls);
            } else {
                if (this.options.infinite) {
                    this.updatePos(item.data("left") * -1);
                } else {
                    area = 0;
                    for (i = idx; i < this.items.length; i++) {
                        area += this.items.eq(i).data("width");
                    }
                    if (area > this.vp) {
                        this.updatePos(item.data("left") * -1);
                    } else {
                        if (dir == 1) {
                            area = 0;
                            for (i = this.items.length - 1; i >= 0; i--) {
                                area += this.items.eq(i).data("width");
                                if (area >= this.vp) {
                                    idx = i;
                                    break;
                                }
                            }
                            this.updatePos(this.items.eq(idx).data("left") * -1);
                        }
                    }
                }
            }
            this.focus = idx;
            this.trigger("focusitem.uk.slider", [ idx, this.items.eq(idx), this ]);
        },
        next: function() {
            var focus = this.items[this.focus + 1] ? this.focus + 1 : this.options.infinite ? 0 : this.focus;
            this.updateFocus(focus, 1);
        },
        previous: function() {
            var focus = this.items[this.focus - 1] ? this.focus - 1 : this.options.infinite ? this.items[this.focus - 1] ? this.items - 1 : this.items.length - 1 : this.focus;
            this.updateFocus(focus, -1);
        },
        infinite: function(baseidx, direction) {
            var $this = this, item = this.items.eq(baseidx), i, z = baseidx, move = [], lastvisible, area = 0;
            if (direction == 1) {
                for (i = 0; i < this.items.length; i++) {
                    if (z != baseidx) {
                        area += this.items.eq(z).data("width");
                        move.push(this.items.eq(z));
                    }
                    if (area > this.vp) {
                        break;
                    }
                    z = z + 1 == this.items.length ? 0 : z + 1;
                }
                if (move.length) {
                    move.forEach(function(itm) {
                        var left = item.data("area");
                        itm.css({
                            left: left
                        }).data({
                            left: left,
                            area: left + itm.data("width"),
                            center: left - ($this.vp / 2 - itm.data("cwidth") / 2)
                        });
                        item = itm;
                    });
                }
            } else {
                for (i = this.items.length - 1; i > -1; i--) {
                    area += this.items.eq(z).data("width");
                    if (z != baseidx) {
                        move.push(this.items.eq(z));
                    }
                    if (area > this.vp) {
                        break;
                    }
                    z = z - 1 == -1 ? this.items.length - 1 : z - 1;
                }
                if (move.length) {
                    move.forEach(function(itm) {
                        var left = item.data("left") - itm.data("width");
                        itm.css({
                            left: left
                        }).data({
                            left: left,
                            area: left + itm.data("width"),
                            center: left - ($this.vp / 2 - itm.data("cwidth") / 2)
                        });
                        item = itm;
                    });
                }
            }
        }
    });
    // handle dragging
    UI.$doc.on("mousemove.uikit.slider touchmove.uikit.slider", function(e) {
        if (e.originalEvent && e.originalEvent.touches) {
            e = e.originalEvent.touches[0];
        }
        if (delayIdle && Math.abs(e.pageX - delayIdle.x) > delayIdle.threshold) {
            if (!window.getSelection().toString()) {
                delayIdle(e);
            } else {
                dragging = delayIdle = false;
            }
        }
        if (!dragging) {
            return;
        }
        var x, xDiff, pos, dir, focus, item, next, diff, i, z, itm;
        if (e.clientX || e.clientY) {
            x = e.clientX;
        } else if (e.pageX || e.pageY) {
            x = e.pageX - document.body.scrollLeft - document.documentElement.scrollLeft;
        }
        focus = store.focus;
        xDiff = x - dragging.element.data("pointer-start").x;
        pos = dragging.element.data("pointer-pos-start") + xDiff;
        dir = x > dragging.element.data("pointer-start").x ? -1 : 1;
        item = dragging.items.eq(store.focus);
        if (dir == 1) {
            diff = item.data("left") + Math.abs(xDiff);
            for (i = 0, z = store.focus; i < dragging.items.length; i++) {
                itm = dragging.items.eq(z);
                if (z != store.focus && itm.data("left") < diff && itm.data("area") > diff) {
                    focus = z;
                    break;
                }
                z = z + 1 == dragging.items.length ? 0 : z + 1;
            }
        } else {
            diff = item.data("left") - Math.abs(xDiff);
            for (i = 0, z = store.focus; i < dragging.items.length; i++) {
                itm = dragging.items.eq(z);
                if (z != store.focus && itm.data("area") <= item.data("left") && itm.data("center") < diff) {
                    focus = z;
                    break;
                }
                z = z - 1 == -1 ? dragging.items.length - 1 : z - 1;
            }
        }
        if (dragging.options.infinite && focus != store._focus) {
            dragging.infinite(focus, dir);
        }
        dragging.updatePos(pos);
        store.dir = dir;
        store._focus = focus;
        store.touchx = parseInt(e.pageX, 10);
        store.diff = diff;
    });
    UI.$doc.on("mouseup.uikit.slider touchend.uikit.slider", function(e) {
        if (dragging) {
            dragging.container.removeClass("uk-drag");
            var item = dragging.items.eq(store.focus), itm, focus = false, i, z;
            if (store.dir == 1) {
                for (i = 0, z = store.focus; i < dragging.items.length; i++) {
                    itm = dragging.items.eq(z);
                    if (z != store.focus && itm.data("left") > store.diff) {
                        focus = z;
                        break;
                    }
                    z = z + 1 == dragging.items.length ? 0 : z + 1;
                }
            } else {
                for (i = 0, z = store.focus; i < dragging.items.length; i++) {
                    itm = dragging.items.eq(z);
                    if (z != store.focus && itm.data("left") < store.diff) {
                        focus = z;
                        break;
                    }
                    z = z - 1 == -1 ? dragging.items.length - 1 : z - 1;
                }
            }
            dragging.updateFocus(focus !== false ? focus : store._focus);
        }
        dragging = delayIdle = false;
    });
    return UI.slider;
});

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-slideset", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    var Animations;
    UI.component("slideset", {
        defaults: {
            "default": 1,
            animation: "fade",
            duration: 200,
            filter: "",
            delay: false,
            controls: false,
            autoplay: false,
            autoplayInterval: 7e3,
            pauseOnHover: true
        },
        sets: [],
        boot: function() {
            // auto init
            UI.ready(function(context) {
                UI.$("[data-uk-slideset]", context).each(function() {
                    var ele = UI.$(this);
                    if (!ele.data("slideset")) {
                        var plugin = UI.slideset(ele, UI.Utils.options(ele.attr("data-uk-slideset")));
                    }
                });
            });
        },
        init: function() {
            var $this = this;
            this.activeSet = false;
            this.list = this.element.find(".uk-slideset");
            this.nav = this.element.find(".uk-slideset-nav");
            this.controls = this.options.controls ? UI.$(this.options.controls) : this.element;
            UI.$win.on("resize load", UI.Utils.debounce(function() {
                $this.updateSets();
            }, 100));
            $this.list.addClass("uk-grid-width-1-" + $this.options.default);
            [ "xlarge", "large", "medium", "small" ].forEach(function(bp) {
                if (!$this.options[bp]) {
                    return;
                }
                $this.list.addClass("uk-grid-width-" + bp + "-1-" + $this.options[bp]);
            });
            this.on("click.uikit.slideset", "[data-uk-slideset-item]", function(e) {
                e.preventDefault();
                if ($this.animating) {
                    return;
                }
                var set = UI.$(this).attr("data-uk-slideset-item");
                if ($this.activeSet === set) return;
                switch (set) {
                  case "next":
                  case "previous":
                    $this[set == "next" ? "next" : "previous"]();
                    break;

                  default:
                    $this.show(parseInt(set, 10));
                }
            });
            this.controls.on("click.uikit.slideset", "[data-uk-filter]", function(e) {
                var ele = UI.$(this);
                if (ele.parent().hasClass("uk-slideset")) {
                    return;
                }
                e.preventDefault();
                if ($this.animating || $this.currentFilter == ele.attr("data-uk-filter")) {
                    return;
                }
                $this.updateFilter(ele.attr("data-uk-filter"));
                $this._hide().then(function() {
                    $this.updateSets(true, true);
                });
            });
            this.on("swipeRight swipeLeft", function(e) {
                $this[e.type == "swipeLeft" ? "next" : "previous"]();
            });
            this.updateFilter(this.options.filter);
            this.updateSets();
            this.element.on({
                mouseenter: function() {
                    if ($this.options.pauseOnHover) $this.hovering = true;
                },
                mouseleave: function() {
                    $this.hovering = false;
                }
            });
            // Set autoplay
            if (this.options.autoplay) {
                this.start();
            }
        },
        updateSets: function(animate, force) {
            var $this = this, visible = this.visible, i;
            this.visible = this.getVisibleOnCurrenBreakpoint();
            if (visible == this.visible && !force) {
                return;
            }
            this.children = this.list.children().hide();
            this.items = this.getItems();
            this.sets = array_chunk(this.items, this.visible);
            for (i = 0; i < this.sets.length; i++) {
                this.sets[i].css({
                    display: "none"
                });
            }
            // update nav
            if (this.nav.length && this.nav.empty()) {
                for (i = 0; i < this.sets.length; i++) {
                    this.nav.append('<li data-uk-slideset-item="' + i + '"><a></a></li>');
                }
                this.nav[this.nav.children().length == 1 ? "addClass" : "removeClass"]("uk-invisible");
            }
            this.activeSet = false;
            this.show(0, !animate);
        },
        updateFilter: function(currentfilter) {
            var $this = this, filter;
            this.currentFilter = currentfilter;
            this.controls.find("[data-uk-filter]").each(function() {
                filter = UI.$(this);
                if (!filter.parent().hasClass("uk-slideset")) {
                    if (filter.attr("data-uk-filter") == $this.currentFilter) {
                        filter.addClass("uk-active");
                    } else {
                        filter.removeClass("uk-active");
                    }
                }
            });
        },
        getVisibleOnCurrenBreakpoint: function() {
            var breakpoint = null, tmp = UI.$('<div style="position:absolute;height:1px;top:-1000px;width:100px"><div></div></div>').appendTo("body"), testdiv = tmp.children().eq(0), breakpoints = this.options;
            [ "xlarge", "large", "medium", "small" ].forEach(function(bp) {
                if (!breakpoints[bp] || breakpoint) {
                    return;
                }
                tmp.attr("class", "uk-grid-width-" + bp + "-1-2").width();
                if (testdiv.width() == 50) {
                    breakpoint = bp;
                }
            });
            tmp.remove();
            return this.options[breakpoint] || this.options["default"];
        },
        getItems: function() {
            var items = [], filter;
            if (this.currentFilter) {
                filter = this.currentFilter || [];
                if (typeof filter === "string") {
                    filter = filter.split(/,/).map(function(item) {
                        return item.trim();
                    });
                }
                this.children.each(function(index) {
                    var ele = UI.$(this), f = ele.attr("data-uk-filter"), infilter = filter.length ? false : true;
                    if (f) {
                        f = f.split(/,/).map(function(item) {
                            return item.trim();
                        });
                        filter.forEach(function(item) {
                            if (f.indexOf(item) > -1) infilter = true;
                        });
                    }
                    if (infilter) items.push(ele[0]);
                });
                items = UI.$(items);
            } else {
                items = this.list.children();
            }
            return items;
        },
        show: function(setIndex, noanimate, dir) {
            var $this = this;
            if (this.activeSet === setIndex || this.animating) {
                return;
            }
            dir = dir || (setIndex < this.activeSet ? -1 : 1);
            var current = this.sets[this.activeSet] || [], next = this.sets[setIndex], animation = this._getAnimation();
            if (noanimate || !UI.support.animation) {
                animation = Animations.none;
            }
            this.animating = true;
            if (this.nav.length) {
                this.nav.children().removeClass("uk-active").eq(setIndex).addClass("uk-active");
            }
            animation.apply($this, [ current, next, dir ]).then(function() {
                UI.Utils.checkDisplay(next, true);
                $this.children.hide().removeClass("uk-active");
                next.addClass("uk-active").css({
                    display: "",
                    opacity: ""
                });
                $this.animating = false;
                $this.activeSet = setIndex;
                UI.Utils.checkDisplay(next, true);
                $this.trigger("show.uk.slideset", [ next ]);
            });
        },
        _getAnimation: function() {
            var $this = this, animation = Animations[this.options.animation] || Animations.none;
            if (!UI.support.animation) {
                animation = Animations.none;
            }
            return animation;
        },
        _hide: function() {
            var $this = this, current = this.sets[this.activeSet] || [], animation = this._getAnimation();
            this.animating = true;
            return animation.apply($this, [ current, [], 1 ]).then(function() {
                $this.animating = false;
            });
        },
        next: function() {
            this.show(this.sets[this.activeSet + 1] ? this.activeSet + 1 : 0, false, 1);
        },
        previous: function() {
            this.show(this.sets[this.activeSet - 1] ? this.activeSet - 1 : this.sets.length - 1, false, -1);
        },
        start: function() {
            this.stop();
            var $this = this;
            this.interval = setInterval(function() {
                if (!$this.hovering && !$this.animating) $this.next();
            }, this.options.autoplayInterval);
        },
        stop: function() {
            if (this.interval) clearInterval(this.interval);
        }
    });
    Animations = {
        none: function() {
            var d = UI.$.Deferred();
            d.resolve();
            return d.promise();
        },
        fade: function(current, next) {
            return coreAnimation.apply(this, [ "uk-animation-fade", current, next ]);
        },
        "slide-bottom": function(current, next) {
            return coreAnimation.apply(this, [ "uk-animation-slide-bottom", current, next ]);
        },
        "slide-top": function(current, next) {
            return coreAnimation.apply(this, [ "uk-animation-slide-top", current, next ]);
        },
        "slide-vertical": function(current, next, dir) {
            var anim = [ "uk-animation-slide-top", "uk-animation-slide-bottom" ];
            if (dir == -1) {
                anim.reverse();
            }
            return coreAnimation.apply(this, [ anim, current, next ]);
        },
        "slide-horizontal": function(current, next, dir) {
            var anim = [ "uk-animation-slide-right", "uk-animation-slide-left" ];
            if (dir == -1) {
                anim.reverse();
            }
            return coreAnimation.apply(this, [ anim, current, next, dir ]);
        },
        scale: function(current, next) {
            return coreAnimation.apply(this, [ "uk-animation-scale-up", current, next ]);
        }
    };
    UI.slideset.animations = Animations;
    // helpers
    function coreAnimation(cls, current, next, dir) {
        var d = UI.$.Deferred(), delay = this.options.delay === false ? Math.floor(this.options.duration / 2) : this.options.delay, $this = this, clsIn, clsOut, release, i;
        dir = dir || 1;
        this.element.css("min-height", this.element.height());
        if (next[0] === current[0]) {
            d.resolve();
            return d.promise();
        }
        if (typeof cls == "object") {
            clsIn = cls[0];
            clsOut = cls[1] || cls[0];
        } else {
            clsIn = cls;
            clsOut = clsIn;
        }
        release = function() {
            if (current && current.length) {
                current.hide().removeClass(clsOut + " uk-animation-reverse").css({
                    opacity: "",
                    "animation-delay": "",
                    animation: ""
                });
            }
            if (!next.length) {
                d.resolve();
                return;
            }
            for (i = 0; i < next.length; i++) {
                next.eq(dir == 1 ? i : next.length - i - 1).css("animation-delay", i * delay + "ms");
            }
            next.addClass(clsIn)[dir == 1 ? "last" : "first"]().one(UI.support.animation.end, function() {
                next.removeClass("" + clsIn + "").css({
                    opacity: "",
                    display: "",
                    "animation-delay": "",
                    animation: ""
                });
                d.resolve();
                $this.element.css("min-height", "");
            }).end().css("display", "");
        };
        if (next.length) {
            next.css("animation-duration", this.options.duration + "ms");
        }
        if (current && current.length) {
            current.css("animation-duration", this.options.duration + "ms")[dir == 1 ? "last" : "first"]().one(UI.support.animation.end, function() {
                release();
            });
            for (i = 0; i < current.length; i++) {
                (function(index, ele) {
                    setTimeout(function() {
                        ele.css("display", "none").css("display", "").css("opacity", 0).addClass(clsOut + " uk-animation-reverse");
                    }.bind(this), i * delay);
                })(i, current.eq(dir == 1 ? i : current.length - i - 1));
            }
        } else {
            release();
        }
        return d.promise();
    }
    function array_chunk(input, size) {
        var x, i = 0, c = -1, l = input.length || 0, n = [];
        if (size < 1) return null;
        while (i < l) {
            x = i % size;
            if (x) {
                n[c][x] = input[i];
            } else {
                n[++c] = [ input[i] ];
            }
            i++;
        }
        i = 0;
        l = n.length;
        while (i < l) {
            n[i] = jQuery(n[i]);
            i++;
        }
        return n;
    }
});

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-slideshow", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    var Animations, playerId = 0;
    UI.component("slideshow", {
        defaults: {
            animation: "fade",
            duration: 500,
            height: "auto",
            start: 0,
            autoplay: false,
            autoplayInterval: 7e3,
            videoautoplay: true,
            videomute: true,
            slices: 15,
            pauseOnHover: true,
            kenburns: false,
            kenburnsanimations: [ "uk-animation-middle-left", "uk-animation-top-right", "uk-animation-bottom-left", "uk-animation-top-center", "", // middle-center
            "uk-animation-bottom-right" ]
        },
        current: false,
        interval: null,
        hovering: false,
        boot: function() {
            // init code
            UI.ready(function(context) {
                UI.$("[data-uk-slideshow]", context).each(function() {
                    var slideshow = UI.$(this);
                    if (!slideshow.data("slideshow")) {
                        var obj = UI.slideshow(slideshow, UI.Utils.options(slideshow.attr("data-uk-slideshow")));
                    }
                });
            });
        },
        init: function() {
            var $this = this, canvas, kbanimduration;
            this.container = this.element.hasClass("uk-slideshow") ? this.element : UI.$(this.find(".uk-slideshow"));
            this.slides = this.container.children();
            this.slidesCount = this.slides.length;
            this.current = this.options.start;
            this.animating = false;
            this.triggers = this.find("[data-uk-slideshow-item]");
            this.fixFullscreen = navigator.userAgent.match(/(iPad|iPhone|iPod)/g) && this.container.hasClass("uk-slideshow-fullscreen");
            // viewport unit fix for height:100vh - should be fixed in iOS 8
            if (this.options.kenburns) {
                kbanimduration = this.options.kenburns === true ? "15s" : this.options.kenburns;
                if (!String(kbanimduration).match(/(ms|s)$/)) {
                    kbanimduration += "ms";
                }
                if (typeof this.options.kenburnsanimations == "string") {
                    this.options.kenburnsanimations = this.options.kenburnsanimations.split(",");
                }
            }
            this.slides.each(function(index) {
                var slide = UI.$(this), media = slide.children("img,video,iframe").eq(0);
                slide.data("media", media);
                slide.data("sizer", media);
                if (media.length) {
                    var placeholder;
                    switch (media[0].nodeName) {
                      case "IMG":
                        var cover = UI.$('<div class="uk-cover-background uk-position-cover"></div>').css({
                            "background-image": "url(" + media.attr("src") + ")"
                        });
                        media.css({
                            width: "100%",
                            height: "auto"
                        });
                        slide.prepend(cover).data("cover", cover);
                        break;

                      case "IFRAME":
                        var src = media[0].src, iframeId = "sw-" + ++playerId;
                        media.attr("src", "").on("load", function() {
                            if (index !== $this.current || index == $this.current && !$this.options.videoautoplay) {
                                $this.pausemedia(media);
                            }
                            if ($this.options.videomute) {
                                $this.mutemedia(media);
                                var inv = setInterval(function(ic) {
                                    return function() {
                                        $this.mutemedia(media);
                                        if (++ic >= 4) clearInterval(inv);
                                    };
                                }(0), 250);
                            }
                        }).data("slideshow", $this).attr("data-player-id", iframeId).attr("src", [ src, src.indexOf("?") > -1 ? "&" : "?", "enablejsapi=1&api=1&player_id=" + iframeId ].join("")).addClass("uk-position-absolute");
                        // disable pointer events
                        if (!UI.support.touch) media.css("pointer-events", "none");
                        placeholder = true;
                        if (UI.cover) {
                            UI.cover(media);
                            media.attr("data-uk-cover", "{}");
                        }
                        break;

                      case "VIDEO":
                        media.addClass("uk-cover-object uk-position-absolute");
                        placeholder = true;
                        if ($this.options.videomute) $this.mutemedia(media);
                    }
                    if (placeholder) {
                        canvas = UI.$("<canvas></canvas>").attr({
                            width: media[0].width,
                            height: media[0].height
                        });
                        var img = UI.$('<img style="width:100%;height:auto;">').attr("src", canvas[0].toDataURL());
                        slide.prepend(img);
                        slide.data("sizer", img);
                    }
                } else {
                    slide.data("sizer", slide);
                }
                if ($this.hasKenBurns(slide)) {
                    slide.data("cover").css({
                        "-webkit-animation-duration": kbanimduration,
                        "animation-duration": kbanimduration
                    });
                }
            });
            this.on("click.uikit.slideshow", "[data-uk-slideshow-item]", function(e) {
                e.preventDefault();
                var slide = UI.$(this).attr("data-uk-slideshow-item");
                if ($this.current == slide) return;
                switch (slide) {
                  case "next":
                  case "previous":
                    $this[slide == "next" ? "next" : "previous"]();
                    break;

                  default:
                    $this.show(parseInt(slide, 10));
                }
                $this.stop();
            });
            // Set start slide
            this.slides.attr("aria-hidden", "true").eq(this.current).addClass("uk-active").attr("aria-hidden", "false");
            this.triggers.filter('[data-uk-slideshow-item="' + this.current + '"]').addClass("uk-active");
            UI.$win.on("resize load", UI.Utils.debounce(function() {
                $this.resize();
                if ($this.fixFullscreen) {
                    $this.container.css("height", window.innerHeight);
                    $this.slides.css("height", window.innerHeight);
                }
            }, 100));
            // chrome image load fix
            setTimeout(function() {
                $this.resize();
            }, 80);
            // Set autoplay
            if (this.options.autoplay) {
                this.start();
            }
            if (this.options.videoautoplay && this.slides.eq(this.current).data("media")) {
                this.playmedia(this.slides.eq(this.current).data("media"));
            }
            if (this.options.kenburns) {
                this.applyKenBurns(this.slides.eq(this.current));
            }
            this.container.on({
                mouseenter: function() {
                    if ($this.options.pauseOnHover) $this.hovering = true;
                },
                mouseleave: function() {
                    $this.hovering = false;
                }
            });
            this.on("swipeRight swipeLeft", function(e) {
                $this[e.type == "swipeLeft" ? "next" : "previous"]();
            });
            this.on("display.uk.check", function() {
                if ($this.element.is(":visible")) {
                    $this.resize();
                    if ($this.fixFullscreen) {
                        $this.container.css("height", window.innerHeight);
                        $this.slides.css("height", window.innerHeight);
                    }
                }
            });
        },
        resize: function() {
            if (this.container.hasClass("uk-slideshow-fullscreen")) return;
            var $this = this, height = this.options.height;
            if (this.options.height === "auto") {
                height = 0;
                this.slides.css("height", "").each(function() {
                    height = Math.max(height, UI.$(this).height());
                });
            }
            this.container.css("height", height);
            this.slides.css("height", height);
        },
        show: function(index, direction) {
            if (this.animating || this.current == index) return;
            this.animating = true;
            var $this = this, current = this.slides.eq(this.current), next = this.slides.eq(index), dir = direction ? direction : this.current < index ? -1 : 1, currentmedia = current.data("media"), animation = Animations[this.options.animation] ? this.options.animation : "fade", nextmedia = next.data("media"), finalize = function() {
                if (!$this.animating) return;
                if (currentmedia && currentmedia.is("video,iframe")) {
                    $this.pausemedia(currentmedia);
                }
                if (nextmedia && nextmedia.is("video,iframe")) {
                    $this.playmedia(nextmedia);
                }
                next.addClass("uk-active").attr("aria-hidden", "false");
                current.removeClass("uk-active").attr("aria-hidden", "true");
                $this.animating = false;
                $this.current = index;
                UI.Utils.checkDisplay(next, '[class*="uk-animation-"]:not(.uk-cover-background.uk-position-cover)');
                $this.trigger("show.uk.slideshow", [ next ]);
            };
            $this.applyKenBurns(next);
            // animation fallback
            if (!UI.support.animation) {
                animation = "none";
            }
            current = UI.$(current);
            next = UI.$(next);
            Animations[animation].apply(this, [ current, next, dir ]).then(finalize);
            $this.triggers.removeClass("uk-active");
            $this.triggers.filter('[data-uk-slideshow-item="' + index + '"]').addClass("uk-active");
        },
        applyKenBurns: function(slide) {
            if (!this.hasKenBurns(slide)) {
                return;
            }
            var animations = this.options.kenburnsanimations, index = this.kbindex || 0;
            slide.data("cover").attr("class", "uk-cover-background uk-position-cover").width();
            slide.data("cover").addClass([ "uk-animation-scale", "uk-animation-reverse", animations[index].trim() ].join(" "));
            this.kbindex = animations[index + 1] ? index + 1 : 0;
        },
        hasKenBurns: function(slide) {
            return this.options.kenburns && slide.data("cover");
        },
        next: function() {
            this.show(this.slides[this.current + 1] ? this.current + 1 : 0);
        },
        previous: function() {
            this.show(this.slides[this.current - 1] ? this.current - 1 : this.slides.length - 1);
        },
        start: function() {
            this.stop();
            var $this = this;
            this.interval = setInterval(function() {
                if (!$this.hovering) $this.next();
            }, this.options.autoplayInterval);
        },
        stop: function() {
            if (this.interval) clearInterval(this.interval);
        },
        playmedia: function(media) {
            if (!(media && media[0])) return;
            switch (media[0].nodeName) {
              case "VIDEO":
                if (!this.options.videomute) {
                    media[0].muted = false;
                }
                media[0].play();
                break;

              case "IFRAME":
                if (!this.options.videomute) {
                    media[0].contentWindow.postMessage('{ "event": "command", "func": "unmute", "method":"setVolume", "value":1}', "*");
                }
                media[0].contentWindow.postMessage('{ "event": "command", "func": "playVideo", "method":"play"}', "*");
                break;
            }
        },
        pausemedia: function(media) {
            switch (media[0].nodeName) {
              case "VIDEO":
                media[0].pause();
                break;

              case "IFRAME":
                media[0].contentWindow.postMessage('{ "event": "command", "func": "pauseVideo", "method":"pause"}', "*");
                break;
            }
        },
        mutemedia: function(media) {
            switch (media[0].nodeName) {
              case "VIDEO":
                media[0].muted = true;
                break;

              case "IFRAME":
                media[0].contentWindow.postMessage('{ "event": "command", "func": "mute", "method":"setVolume", "value":0}', "*");
                break;
            }
        }
    });
    Animations = {
        none: function() {
            var d = UI.$.Deferred();
            d.resolve();
            return d.promise();
        },
        scroll: function(current, next, dir) {
            var d = UI.$.Deferred();
            current.css("animation-duration", this.options.duration + "ms");
            next.css("animation-duration", this.options.duration + "ms");
            next.css("opacity", 1).one(UI.support.animation.end, function() {
                current.removeClass(dir === 1 ? "uk-slideshow-scroll-backward-out" : "uk-slideshow-scroll-forward-out");
                next.css("opacity", "").removeClass(dir === 1 ? "uk-slideshow-scroll-backward-in" : "uk-slideshow-scroll-forward-in");
                d.resolve();
            }.bind(this));
            current.addClass(dir == 1 ? "uk-slideshow-scroll-backward-out" : "uk-slideshow-scroll-forward-out");
            next.addClass(dir == 1 ? "uk-slideshow-scroll-backward-in" : "uk-slideshow-scroll-forward-in");
            next.width();
            // force redraw
            return d.promise();
        },
        swipe: function(current, next, dir) {
            var d = UI.$.Deferred();
            current.css("animation-duration", this.options.duration + "ms");
            next.css("animation-duration", this.options.duration + "ms");
            next.css("opacity", 1).one(UI.support.animation.end, function() {
                current.removeClass(dir === 1 ? "uk-slideshow-swipe-backward-out" : "uk-slideshow-swipe-forward-out");
                next.css("opacity", "").removeClass(dir === 1 ? "uk-slideshow-swipe-backward-in" : "uk-slideshow-swipe-forward-in");
                d.resolve();
            }.bind(this));
            current.addClass(dir == 1 ? "uk-slideshow-swipe-backward-out" : "uk-slideshow-swipe-forward-out");
            next.addClass(dir == 1 ? "uk-slideshow-swipe-backward-in" : "uk-slideshow-swipe-forward-in");
            next.width();
            // force redraw
            return d.promise();
        },
        scale: function(current, next, dir) {
            var d = UI.$.Deferred();
            current.css("animation-duration", this.options.duration + "ms");
            next.css("animation-duration", this.options.duration + "ms");
            next.css("opacity", 1);
            current.one(UI.support.animation.end, function() {
                current.removeClass("uk-slideshow-scale-out");
                next.css("opacity", "");
                d.resolve();
            }.bind(this));
            current.addClass("uk-slideshow-scale-out");
            current.width();
            // force redraw
            return d.promise();
        },
        fade: function(current, next, dir) {
            var d = UI.$.Deferred();
            current.css("animation-duration", this.options.duration + "ms");
            next.css("animation-duration", this.options.duration + "ms");
            next.css("opacity", 1);
            current.one(UI.support.animation.end, function() {
                current.removeClass("uk-slideshow-fade-out");
                next.css("opacity", "");
                d.resolve();
            }.bind(this));
            current.addClass("uk-slideshow-fade-out");
            current.width();
            // force redraw
            return d.promise();
        }
    };
    UI.slideshow.animations = Animations;
    // Listen for messages from the vimeo player
    window.addEventListener("message", function onMessageReceived(e) {
        var data = e.data, iframe;
        if (typeof data == "string") {
            try {
                data = JSON.parse(data);
            } catch (err) {
                data = {};
            }
        }
        if (e.origin && e.origin.indexOf("vimeo") > -1 && data.event == "ready" && data.player_id) {
            iframe = UI.$('[data-player-id="' + data.player_id + '"]');
            if (iframe.length) {
                iframe.data("slideshow").mutemedia(iframe);
            }
        }
    }, false);
});

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-slideshow-fx", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    var Animations = UI.slideshow.animations;
    UI.$.extend(UI.slideshow.animations, {
        slice: function(current, next, dir, fromfx) {
            if (!current.data("cover")) {
                return Animations.fade.apply(this, arguments);
            }
            var d = UI.$.Deferred();
            var sliceWidth = Math.ceil(this.element.width() / this.options.slices), bgimage = next.data("cover").css("background-image"), ghost = UI.$("<li></li>").css({
                top: 0,
                left: 0,
                width: this.container.width(),
                height: this.container.height(),
                opacity: 1,
                zIndex: 15
            }), ghostWidth = ghost.width(), ghostHeight = ghost.height(), pos = fromfx == "slice-up" ? ghostHeight : "0", bar;
            for (var i = 0; i < this.options.slices; i++) {
                if (fromfx == "slice-up-down") {
                    pos = (i % 2 + 2) % 2 == 0 ? "0" : ghostHeight;
                }
                var width = i == this.options.slices - 1 ? sliceWidth : sliceWidth, clipto = "rect(0px, " + width * (i + 1) + "px, " + ghostHeight + "px, " + sliceWidth * i + "px)", clipfrom;
                //slice-down - default
                clipfrom = "rect(0px, " + width * (i + 1) + "px, 0px, " + sliceWidth * i + "px)";
                if (fromfx == "slice-up" || fromfx == "slice-up-down" && (i % 2 + 2) % 2 == 0) {
                    clipfrom = "rect(" + ghostHeight + "px, " + width * (i + 1) + "px, " + ghostHeight + "px, " + sliceWidth * i + "px)";
                }
                bar = UI.$('<div class="uk-cover-background"></div>').css({
                    position: "absolute",
                    top: 0,
                    left: 0,
                    width: ghostWidth,
                    height: ghostHeight,
                    "background-image": bgimage,
                    clip: clipfrom,
                    opacity: 0,
                    transition: "all " + this.options.duration + "ms ease-in-out " + i * 60 + "ms",
                    "-webkit-transition": "all " + this.options.duration + "ms ease-in-out " + i * 60 + "ms"
                }).data("clip", clipto);
                ghost.append(bar);
            }
            this.container.append(ghost);
            ghost.children().last().on(UI.support.transition.end, function() {
                ghost.remove();
                d.resolve();
            });
            ghost.width();
            ghost.children().each(function() {
                var bar = UI.$(this);
                bar.css({
                    clip: bar.data("clip"),
                    opacity: 1
                });
            });
            return d.promise();
        },
        "slice-up": function(current, next, dir) {
            return Animations.slice.apply(this, [ current, next, dir, "slice-up" ]);
        },
        "slice-down": function(current, next, dir) {
            return Animations.slice.apply(this, [ current, next, dir, "slice-down" ]);
        },
        "slice-up-down": function(current, next, dir) {
            return Animations.slice.apply(this, [ current, next, dir, "slice-up-down" ]);
        },
        fold: function(current, next, dir) {
            if (!next.data("cover")) {
                return Animations.fade.apply(this, arguments);
            }
            var d = UI.$.Deferred();
            var sliceWidth = Math.ceil(this.element.width() / this.options.slices), bgimage = next.data("cover").css("background-image"), ghost = UI.$("<li></li>").css({
                width: next.width(),
                height: next.height(),
                opacity: 1,
                zIndex: 15
            }), ghostWidth = next.width(), ghostHeight = next.height(), bar;
            for (var i = 0; i < this.options.slices; i++) {
                var width = i == this.options.slices - 1 ? ghostWidth - sliceWidth * i : sliceWidth;
                bar = UI.$('<div class="uk-cover-background"></div>').css({
                    position: "absolute",
                    top: 0,
                    left: 0,
                    width: ghostWidth,
                    height: ghostHeight,
                    "background-image": bgimage,
                    "transform-origin": sliceWidth * i + "px 0 0",
                    clip: "rect(0px, " + sliceWidth * (i + 1) + "px, " + ghostHeight + "px, " + sliceWidth * i + "px)",
                    opacity: 0,
                    transform: "scaleX(0.000001)",
                    transition: "all " + this.options.duration + "ms ease-in-out " + (100 + i * 60) + "ms",
                    "-webkit-transition": "all " + this.options.duration + "ms ease-in-out " + (100 + i * 60) + "ms"
                });
                ghost.prepend(bar);
            }
            this.container.append(ghost);
            ghost.width();
            ghost.children().first().on(UI.support.transition.end, function() {
                ghost.remove();
                d.resolve();
            }).end().css({
                transform: "scaleX(1)",
                opacity: 1
            });
            return d.promise();
        },
        puzzle: function(current, next, dir) {
            if (!next.data("cover")) {
                return Animations.fade.apply(this, arguments);
            }
            var d = UI.$.Deferred(), $this = this;
            var boxCols = Math.round(this.options.slices / 2), boxWidth = Math.round(next.width() / boxCols), boxRows = Math.round(next.height() / boxWidth), boxHeight = Math.round(next.height() / boxRows) + 1, bgimage = next.data("cover").css("background-image"), ghost = UI.$("<li></li>").css({
                width: this.container.width(),
                height: this.container.height(),
                opacity: 1,
                zIndex: 15
            }), ghostWidth = this.container.width(), ghostHeight = this.container.height(), box, rect, width;
            for (var rows = 0; rows < boxRows; rows++) {
                for (var cols = 0; cols < boxCols; cols++) {
                    width = cols == boxCols - 1 ? boxWidth + 2 : boxWidth;
                    rect = [ boxHeight * rows + "px", // top
                    width * (cols + 1) + "px", // right
                    boxHeight * (rows + 1) + "px", // bottom
                    boxWidth * cols + "px" ];
                    box = UI.$('<div class="uk-cover-background"></div>').css({
                        position: "absolute",
                        top: 0,
                        left: 0,
                        opacity: 0,
                        width: ghostWidth,
                        height: ghostHeight,
                        "background-image": bgimage,
                        clip: "rect(" + rect.join(",") + ")",
                        "-webkit-transform": "translateZ(0)",
                        // fixes webkit opacity flickering bug
                        transform: "translateZ(0)"
                    });
                    ghost.append(box);
                }
            }
            this.container.append(ghost);
            var boxes = shuffle(ghost.children());
            boxes.each(function(i) {
                UI.$(this).css({
                    transition: "all " + $this.options.duration + "ms ease-in-out " + (50 + i * 25) + "ms",
                    "-webkit-transition": "all " + $this.options.duration + "ms ease-in-out " + (50 + i * 25) + "ms"
                });
            }).last().on(UI.support.transition.end, function() {
                ghost.remove();
                d.resolve();
            });
            ghost.width();
            boxes.css({
                opacity: 1
            });
            return d.promise();
        },
        boxes: function(current, next, dir, fromfx) {
            if (!next.data("cover")) {
                return Animations.fade.apply(this, arguments);
            }
            var d = UI.$.Deferred();
            var boxCols = Math.round(this.options.slices / 2), boxWidth = Math.round(next.width() / boxCols), boxRows = Math.round(next.height() / boxWidth), boxHeight = Math.round(next.height() / boxRows) + 1, bgimage = next.data("cover").css("background-image"), ghost = UI.$("<li></li>").css({
                width: next.width(),
                height: next.height(),
                opacity: 1,
                zIndex: 15
            }), ghostWidth = next.width(), ghostHeight = next.height(), box, rect, width, cols;
            for (var rows = 0; rows < boxRows; rows++) {
                for (cols = 0; cols < boxCols; cols++) {
                    width = cols == boxCols - 1 ? boxWidth + 2 : boxWidth;
                    rect = [ boxHeight * rows + "px", // top
                    width * (cols + 1) + "px", // right
                    boxHeight * (rows + 1) + "px", // bottom
                    boxWidth * cols + "px" ];
                    box = UI.$('<div class="uk-cover-background"></div>').css({
                        position: "absolute",
                        top: 0,
                        left: 0,
                        opacity: 1,
                        width: ghostWidth,
                        height: ghostHeight,
                        "background-image": bgimage,
                        "transform-origin": rect[3] + " " + rect[0] + " 0",
                        clip: "rect(" + rect.join(",") + ")",
                        "-webkit-transform": "scale(0.0000000000000001)",
                        transform: "scale(0.0000000000000001)"
                    });
                    ghost.append(box);
                }
            }
            this.container.append(ghost);
            var rowIndex = 0, colIndex = 0, timeBuff = 0, box2Darr = [ [] ], boxes = ghost.children(), prevCol;
            if (fromfx == "boxes-reverse") {
                boxes = [].reverse.apply(boxes);
            }
            boxes.each(function() {
                box2Darr[rowIndex][colIndex] = UI.$(this);
                colIndex++;
                if (colIndex == boxCols) {
                    rowIndex++;
                    colIndex = 0;
                    box2Darr[rowIndex] = [];
                }
            });
            for (cols = 0, prevCol = 0; cols < boxCols * boxRows; cols++) {
                prevCol = cols;
                for (var row = 0; row < boxRows; row++) {
                    if (prevCol >= 0 && prevCol < boxCols) {
                        box2Darr[row][prevCol].css({
                            transition: "all " + this.options.duration + "ms linear " + (50 + timeBuff) + "ms",
                            "-webkit-transition": "all " + this.options.duration + "ms linear " + (50 + timeBuff) + "ms"
                        });
                    }
                    prevCol--;
                }
                timeBuff += 100;
            }
            boxes.last().on(UI.support.transition.end, function() {
                ghost.remove();
                d.resolve();
            });
            ghost.width();
            boxes.css({
                "-webkit-transform": "scale(1)",
                transform: "scale(1)"
            });
            return d.promise();
        },
        "boxes-reverse": function(current, next, dir) {
            return Animations.boxes.apply(this, [ current, next, dir, "boxes-reverse" ]);
        },
        "random-fx": function() {
            var animations = [ "slice-up", "fold", "puzzle", "slice-down", "boxes", "slice-up-down", "boxes-reverse" ];
            this.fxIndex = (this.fxIndex === undefined ? -1 : this.fxIndex) + 1;
            if (!animations[this.fxIndex]) this.fxIndex = 0;
            return Animations[animations[this.fxIndex]].apply(this, arguments);
        }
    });
    // helper functions
    // Shuffle an array
    var shuffle = function(arr) {
        for (var j, x, i = arr.length; i; j = parseInt(Math.random() * i), x = arr[--i], 
        arr[i] = arr[j], arr[j] = x) {}
        return arr;
    };
    return UI.slideshow.animations;
});

/*
  * Based on nativesortable - Copyright (c) Brian Grinstead - https://github.com/bgrins/nativesortable
  */
(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-sortable", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    var supportsTouch = "ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch, draggingPlaceholder, currentlyDraggingElement, currentlyDraggingTarget, dragging, moving, clickedlink, delayIdle, touchedlists, moved;
    function closestSortable(ele) {
        ele = UI.$(ele);
        do {
            if (ele.data("sortable")) {
                return ele;
            }
            ele = UI.$(ele).parent();
        } while (ele.length);
        return ele;
    }
    UI.component("sortable", {
        defaults: {
            animation: 150,
            threshold: 10,
            childClass: "uk-sortable-item",
            placeholderClass: "uk-sortable-placeholder",
            overClass: "uk-sortable-over",
            draggingClass: "uk-sortable-dragged",
            dragMovingClass: "uk-sortable-moving",
            baseClass: "uk-sortable",
            noDragClass: "uk-sortable-nodrag",
            dragCustomClass: "",
            handleClass: false,
            group: false,
            stop: function() {},
            start: function() {},
            change: function() {}
        },
        boot: function() {
            // auto init
            UI.ready(function(context) {
                UI.$("[data-uk-sortable]", context).each(function() {
                    var ele = UI.$(this);
                    if (!ele.data("sortable")) {
                        var plugin = UI.sortable(ele, UI.Utils.options(ele.attr("data-uk-sortable")));
                    }
                });
            });
            UI.$html.on("mousemove touchmove", function(e) {
                if (delayIdle) {
                    var src = e.originalEvent.targetTouches ? e.originalEvent.targetTouches[0] : e;
                    if (Math.abs(src.pageX - delayIdle.pos.x) > delayIdle.threshold || Math.abs(src.pageY - delayIdle.pos.y) > delayIdle.threshold) {
                        delayIdle.apply(src);
                    }
                }
                if (draggingPlaceholder) {
                    if (!moving) {
                        moving = true;
                        draggingPlaceholder.show();
                        draggingPlaceholder.$current.addClass(draggingPlaceholder.$sortable.options.placeholderClass);
                        draggingPlaceholder.$sortable.element.children().addClass(draggingPlaceholder.$sortable.options.childClass);
                        UI.$html.addClass(draggingPlaceholder.$sortable.options.dragMovingClass);
                    }
                    var offset = draggingPlaceholder.data("mouse-offset"), left = parseInt(e.originalEvent.pageX, 10) + offset.left, top = parseInt(e.originalEvent.pageY, 10) + offset.top;
                    draggingPlaceholder.css({
                        left: left,
                        top: top
                    });
                    // adjust document scrolling
                    if (top < UI.$win.scrollTop()) {
                        UI.$win.scrollTop(UI.$win.scrollTop() - Math.ceil(draggingPlaceholder.height() / 2));
                    } else if (top + draggingPlaceholder.height() > window.innerHeight + UI.$win.scrollTop()) {
                        UI.$win.scrollTop(UI.$win.scrollTop() + Math.ceil(draggingPlaceholder.height() / 2));
                    }
                }
            });
            UI.$html.on("mouseup touchend", function(e) {
                delayIdle = clickedlink = false;
                // dragging?
                if (!currentlyDraggingElement || !draggingPlaceholder) {
                    // completely reset dragging attempt. will cause weird delay behavior elsewise
                    currentlyDraggingElement = draggingPlaceholder = null;
                    return;
                }
                // inside or outside of sortable?
                var sortable = closestSortable(e.target), component = draggingPlaceholder.$sortable, ev = {
                    type: e.type
                };
                if (sortable[0]) {
                    component.dragDrop(ev, component.element);
                }
                component.dragEnd(ev, component.element);
            });
        },
        init: function() {
            var $this = this, element = this.element[0], children;
            touchedlists = [];
            // make sure :empty selector works on empty lists
            if (this.element.children().length === 0) {
                this.element.html("");
            }
            this.element.data("sortable-group", this.options.group ? this.options.group : UI.Utils.uid("sortable-group"));
            var handleDragStart = delegate(function(e) {
                var $target = UI.$(e.target), $link = $target.is("a[href]") ? $target : $target.parents("a[href]");
                if ($target.is(":input")) {
                    return;
                }
                e.preventDefault();
                if (!supportsTouch && $link.length) {
                    $link.one("click", function(e) {
                        e.preventDefault();
                    }).one("mouseup", function() {
                        if (!moved) $link.trigger("click");
                    });
                }
                return $this.dragStart(e, this);
            });
            var handleDragOver = delegate(function(e) {
                if (!currentlyDraggingElement) {
                    return true;
                }
                if (e.preventDefault) {
                    e.preventDefault();
                }
                return false;
            });
            var handleDragEnter = delegate(UI.Utils.debounce(function(e) {
                return $this.dragEnter(e, this);
            }), 40);
            var handleDragLeave = delegate(function(e) {
                // Prevent dragenter on a child from allowing a dragleave on the container
                var previousCounter = $this.dragenterData(this);
                $this.dragenterData(this, previousCounter - 1);
                // This is a fix for child elements firing dragenter before the parent fires dragleave
                if (!$this.dragenterData(this)) {
                    UI.$(this).removeClass($this.options.overClass);
                    $this.dragenterData(this, false);
                }
            });
            var handleTouchMove = delegate(function(e) {
                if (!currentlyDraggingElement || currentlyDraggingElement === this || currentlyDraggingTarget === this) {
                    return true;
                }
                $this.element.children().removeClass($this.options.overClass);
                currentlyDraggingTarget = this;
                $this.moveElementNextTo(currentlyDraggingElement, this);
                return prevent(e);
            });
            // Bind/unbind standard mouse/touch events as a polyfill.
            function addDragHandlers() {
                if (supportsTouch) {
                    element.addEventListener("touchmove", handleTouchMove, false);
                } else {
                    element.addEventListener("mouseover", handleDragEnter, false);
                    element.addEventListener("mouseout", handleDragLeave, false);
                }
            }
            function removeDragHandlers() {
                if (supportsTouch) {
                    element.removeEventListener("touchmove", handleTouchMove, false);
                } else {
                    element.removeEventListener("mouseover", handleDragEnter, false);
                    element.removeEventListener("mouseout", handleDragLeave, false);
                }
            }
            this.addDragHandlers = addDragHandlers;
            this.removeDragHandlers = removeDragHandlers;
            function handleDragMove(e) {
                if (!currentlyDraggingElement) {
                    return;
                }
                $this.dragMove(e, $this);
            }
            function delegate(fn) {
                return function(e) {
                    var touch, target, context;
                    if (e) {
                        touch = supportsTouch && e.touches && e.touches[0] || {};
                        target = touch.target || e.target;
                        // Fix event.target for a touch event
                        if (supportsTouch && document.elementFromPoint) {
                            target = document.elementFromPoint(e.pageX - document.body.scrollLeft, e.pageY - document.body.scrollTop);
                        }
                    }
                    if (UI.$(target).hasClass($this.options.childClass)) {
                        fn.apply(target, [ e ]);
                    } else if (target !== element) {
                        // If a child is initiating the event or ending it, then use the container as context for the callback.
                        context = moveUpToChildNode(element, target);
                        if (context) {
                            fn.apply(context, [ e ]);
                        }
                    }
                };
            }
            window.addEventListener(supportsTouch ? "touchmove" : "mousemove", handleDragMove, false);
            element.addEventListener(supportsTouch ? "touchstart" : "mousedown", handleDragStart, false);
        },
        dragStart: function(e, elem) {
            moved = false;
            moving = false;
            dragging = false;
            var $this = this, target = UI.$(e.target), children = $this.element.children();
            if (!supportsTouch && e.button == 2) {
                return;
            }
            if ($this.options.handleClass) {
                var handle = target.hasClass($this.options.handleClass) ? target : target.closest("." + $this.options.handleClass, $this.element);
                if (!handle.length) {
                    //e.preventDefault();
                    return;
                }
            }
            if (target.is("." + $this.options.noDragClass) || target.closest("." + $this.options._noDragClass).length) {
                return;
            }
            // prevent dragging if taget is a form field
            if (target.is(":input")) {
                return;
            }
            currentlyDraggingElement = elem;
            // init drag placeholder
            if (draggingPlaceholder) {
                draggingPlaceholder.remove();
            }
            var $current = UI.$(currentlyDraggingElement), offset = $current.offset();
            delayIdle = {
                pos: {
                    x: e.pageX,
                    y: e.pageY
                },
                threshold: $this.options.threshold,
                apply: function(evt) {
                    draggingPlaceholder = UI.$('<div class="' + [ $this.options.draggingClass, $this.options.dragCustomClass ].join(" ") + '"></div>').css({
                        display: "none",
                        top: offset.top,
                        left: offset.left,
                        width: $current.width(),
                        height: $current.height(),
                        padding: $current.css("padding")
                    }).data({
                        "mouse-offset": {
                            left: offset.left - parseInt(evt.pageX, 10),
                            top: offset.top - parseInt(evt.pageY, 10)
                        },
                        origin: $this.element,
                        index: $current.index()
                    }).append($current.html()).appendTo("body");
                    draggingPlaceholder.$current = $current;
                    draggingPlaceholder.$sortable = $this;
                    $current.data("sortable-group", $this.options.group);
                    $this.addDragHandlers();
                    $this.options.start(this, currentlyDraggingElement);
                    $this.trigger("start.uk.sortable", [ $this, currentlyDraggingElement ]);
                    moved = true;
                    delayIdle = false;
                }
            };
        },
        dragMove: function(e, elem) {
            var overEl = UI.$(document.elementFromPoint(e.pageX - document.body.scrollLeft, e.pageY - (window.pageYOffset || document.documentElement.scrollTop))), overRoot = overEl.closest("." + this.options.baseClass), groupOver = overRoot.data("sortable-group"), $current = UI.$(currentlyDraggingElement), currentRoot = $current.parent(), groupCurrent = $current.data("sortable-group"), overChild;
            if (overRoot[0] !== currentRoot[0] && groupCurrent !== undefined && groupOver === groupCurrent) {
                overRoot.data("sortable").addDragHandlers();
                touchedlists.push(overRoot);
                overRoot.children().addClass(this.options.childClass);
                // swap root
                if (overRoot.children().length > 0) {
                    overChild = overEl.closest("." + this.options.childClass);
                    overChild.before($current);
                } else {
                    // empty list
                    overEl.append($current);
                }
                // list empty? remove inner whitespace to make sure :empty selector works
                if (currentRoot.children().length === 0) {
                    currentRoot.html("");
                }
                UIkit.$doc.trigger("mouseover");
            }
        },
        dragEnter: function(e, elem) {
            if (!currentlyDraggingElement || currentlyDraggingElement === elem) {
                return true;
            }
            // Prevent dragenter on a child from allowing a dragleave on the container
            var previousCounter = this.dragenterData(elem);
            this.dragenterData(elem, previousCounter + 1);
            if (previousCounter === 0) {
                UI.$(elem).addClass(this.options.overClass);
                this.moveElementNextTo(currentlyDraggingElement, elem);
            }
            return false;
        },
        dragEnd: function(e, elem) {
            var $this = this;
            // avoid triggering event twice
            if (currentlyDraggingElement) {
                // TODO: trigger on right element?
                this.options.stop(elem);
                this.trigger("stop.uk.sortable", [ this ]);
            }
            currentlyDraggingElement = null;
            currentlyDraggingTarget = null;
            touchedlists.push(this.element);
            touchedlists.forEach(function(el, i) {
                UI.$(el).children().each(function() {
                    if (this.nodeType === 1) {
                        UI.$(this).removeClass($this.options.overClass).removeClass($this.options.placeholderClass).removeClass($this.options.childClass);
                        $this.dragenterData(this, false);
                    }
                });
            });
            touchedlists = [];
            UI.$html.removeClass(this.options.dragMovingClass);
            this.removeDragHandlers();
            if (draggingPlaceholder) {
                draggingPlaceholder.remove();
                draggingPlaceholder = null;
            }
        },
        dragDrop: function(e, elem) {
            if (e.type === "drop") {
                if (e.stopPropagation) {
                    e.stopPropagation();
                }
                if (e.preventDefault) {
                    e.preventDefault();
                }
            }
            this.triggerChangeEvents();
        },
        triggerChangeEvents: function() {
            // trigger events once
            if (!currentlyDraggingElement) return;
            var $current = UI.$(currentlyDraggingElement), oldRoot = draggingPlaceholder.data("origin"), newRoot = $current.closest("." + this.options.baseClass), triggers = [];
            // events depending on move inside lists or across lists
            if (oldRoot[0] === newRoot[0] && draggingPlaceholder.data("index") != $current.index()) {
                triggers.push({
                    el: this,
                    mode: "moved"
                });
            } else if (oldRoot[0] != newRoot[0]) {
                triggers.push({
                    el: newRoot,
                    mode: "added"
                }, {
                    el: oldRoot,
                    mode: "removed"
                });
            }
            triggers.forEach(function(trigger, i) {
                trigger.el.trigger("change.uk.sortable", [ trigger.el, currentlyDraggingElement, trigger.mode ]);
            });
        },
        dragenterData: function(element, val) {
            element = UI.$(element);
            if (arguments.length == 1) {
                return parseInt(element.data("child-dragenter"), 10) || 0;
            } else if (!val) {
                element.removeData("child-dragenter");
            } else {
                element.data("child-dragenter", Math.max(0, val));
            }
        },
        moveElementNextTo: function(element, elementToMoveNextTo) {
            dragging = true;
            var $this = this, list = UI.$(element).parent().css("min-height", ""), next = isBelow(element, elementToMoveNextTo) ? elementToMoveNextTo : elementToMoveNextTo.nextSibling, children = list.children(), count = children.length;
            if (!$this.options.animation) {
                elementToMoveNextTo.parentNode.insertBefore(element, next);
                UI.Utils.checkDisplay($this.element.parent());
                return;
            }
            list.css("min-height", list.height());
            children.stop().each(function() {
                var ele = UI.$(this), offset = ele.position();
                offset.width = ele.width();
                ele.data("offset-before", offset);
            });
            elementToMoveNextTo.parentNode.insertBefore(element, next);
            UI.Utils.checkDisplay($this.element.parent());
            children = list.children().each(function() {
                var ele = UI.$(this);
                ele.data("offset-after", ele.position());
            }).each(function() {
                var ele = UI.$(this), before = ele.data("offset-before");
                ele.css({
                    position: "absolute",
                    top: before.top,
                    left: before.left,
                    "min-width": before.width
                });
            });
            children.each(function() {
                var ele = UI.$(this), before = ele.data("offset-before"), offset = ele.data("offset-after");
                ele.css("pointer-events", "none").width();
                setTimeout(function() {
                    ele.animate({
                        top: offset.top,
                        left: offset.left
                    }, $this.options.animation, function() {
                        ele.css({
                            position: "",
                            top: "",
                            left: "",
                            "min-width": "",
                            "pointer-events": ""
                        }).removeClass($this.options.overClass).removeData("child-dragenter");
                        count--;
                        if (!count) {
                            list.css("min-height", "");
                            UI.Utils.checkDisplay($this.element.parent());
                        }
                    });
                }, 0);
            });
        },
        serialize: function() {
            var data = [], item, attribute;
            this.element.children().each(function(j, child) {
                item = {};
                for (var i = 0; i < child.attributes.length; i++) {
                    attribute = child.attributes[i];
                    if (attribute.name.indexOf("data-") === 0) {
                        item[attribute.name.substr(5)] = UI.Utils.str2json(attribute.value);
                    }
                }
                data.push(item);
            });
            return data;
        }
    });
    // helpers
    function isBelow(el1, el2) {
        var parent = el1.parentNode;
        if (el2.parentNode != parent) {
            return false;
        }
        var cur = el1.previousSibling;
        while (cur && cur.nodeType !== 9) {
            if (cur === el2) {
                return true;
            }
            cur = cur.previousSibling;
        }
        return false;
    }
    function moveUpToChildNode(parent, child) {
        var cur = child;
        if (cur == parent) {
            return null;
        }
        while (cur) {
            if (cur.parentNode === parent) {
                return cur;
            }
            cur = cur.parentNode;
            if (!cur || !cur.ownerDocument || cur.nodeType === 11) {
                break;
            }
        }
        return null;
    }
    function prevent(e) {
        if (e.stopPropagation) {
            e.stopPropagation();
        }
        if (e.preventDefault) {
            e.preventDefault();
        }
        e.returnValue = false;
    }
    return UI.sortable;
});

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-sticky", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    var $win = UI.$win, $doc = UI.$doc, sticked = [];
    UI.component("sticky", {
        defaults: {
            top: 0,
            bottom: 0,
            animation: "",
            clsinit: "uk-sticky-init",
            clsactive: "uk-active",
            getWidthFrom: "",
            boundary: false,
            media: false,
            target: false,
            disabled: false
        },
        boot: function() {
            // should be more efficient than using $win.scroll(checkscrollposition):
            UI.$doc.on("scrolling.uk.document", function() {
                checkscrollposition();
            });
            UI.$win.on("resize orientationchange", UI.Utils.debounce(function() {
                if (!sticked.length) return;
                for (var i = 0; i < sticked.length; i++) {
                    sticked[i].reset(true);
                    sticked[i].self.computeWrapper();
                }
                checkscrollposition();
            }, 100));
            // init code
            UI.ready(function(context) {
                setTimeout(function() {
                    UI.$("[data-uk-sticky]", context).each(function() {
                        var $ele = UI.$(this);
                        if (!$ele.data("sticky")) {
                            UI.sticky($ele, UI.Utils.options($ele.attr("data-uk-sticky")));
                        }
                    });
                    checkscrollposition();
                }, 0);
            });
        },
        init: function() {
            var wrapper = UI.$('<div class="uk-sticky-placeholder"></div>'), boundary = this.options.boundary, boundtoparent;
            this.wrapper = this.element.css("margin", 0).wrap(wrapper).parent();
            this.computeWrapper();
            if (boundary) {
                if (boundary === true) {
                    boundary = this.wrapper.parent();
                    boundtoparent = true;
                } else if (typeof boundary === "string") {
                    boundary = UI.$(boundary);
                }
            }
            this.sticky = {
                self: this,
                options: this.options,
                element: this.element,
                currentTop: null,
                wrapper: this.wrapper,
                init: false,
                getWidthFrom: this.options.getWidthFrom || this.wrapper,
                boundary: boundary,
                boundtoparent: boundtoparent,
                reset: function(force) {
                    var finalize = function() {
                        this.element.css({
                            position: "",
                            top: "",
                            width: "",
                            left: "",
                            margin: "0"
                        });
                        this.element.removeClass([ this.options.animation, "uk-animation-reverse", this.options.clsactive ].join(" "));
                        this.currentTop = null;
                        this.animate = false;
                    }.bind(this);
                    if (!force && this.options.animation && UI.support.animation) {
                        this.animate = true;
                        this.element.removeClass(this.options.animation).one(UI.support.animation.end, function() {
                            finalize();
                        }).width();
                        // force redraw
                        this.element.addClass(this.options.animation + " " + "uk-animation-reverse");
                    } else {
                        finalize();
                    }
                },
                check: function() {
                    if (this.options.disabled) {
                        return false;
                    }
                    if (this.options.media) {
                        switch (typeof this.options.media) {
                          case "number":
                            if (window.innerWidth < this.options.media) {
                                return false;
                            }
                            break;

                          case "string":
                            if (window.matchMedia && !window.matchMedia(this.options.media).matches) {
                                return false;
                            }
                            break;
                        }
                    }
                    var scrollTop = $win.scrollTop(), documentHeight = $doc.height(), dwh = documentHeight - window.innerHeight, extra = scrollTop > dwh ? dwh - scrollTop : 0, elementTop = this.wrapper.offset().top, etse = elementTop - this.options.top - extra;
                    return scrollTop >= etse;
                }
            };
            sticked.push(this.sticky);
        },
        update: function() {
            checkscrollposition(this.sticky);
        },
        enable: function() {
            this.options.disabled = false;
            this.update();
        },
        disable: function(force) {
            this.options.disabled = true;
            this.sticky.reset(force);
        },
        computeWrapper: function() {
            this.wrapper.css({
                height: this.element.css("position") != "absolute" ? this.element.outerHeight() : "",
                "float": this.element.css("float") != "none" ? this.element.css("float") : "",
                margin: this.element.css("margin")
            });
        }
    });
    function checkscrollposition() {
        var stickies = arguments.length ? arguments : sticked;
        if (!stickies.length || $win.scrollTop() < 0) return;
        var scrollTop = $win.scrollTop(), documentHeight = $doc.height(), windowHeight = $win.height(), dwh = documentHeight - windowHeight, extra = scrollTop > dwh ? dwh - scrollTop : 0, newTop, containerBottom, stickyHeight, sticky;
        for (var i = 0; i < stickies.length; i++) {
            sticky = stickies[i];
            if (!sticky.element.is(":visible") || sticky.animate) {
                continue;
            }
            if (!sticky.check()) {
                if (sticky.currentTop !== null) {
                    sticky.reset();
                }
            } else {
                if (sticky.options.top < 0) {
                    newTop = 0;
                } else {
                    stickyHeight = sticky.element.outerHeight();
                    newTop = documentHeight - stickyHeight - sticky.options.top - sticky.options.bottom - scrollTop - extra;
                    newTop = newTop < 0 ? newTop + sticky.options.top : sticky.options.top;
                }
                if (sticky.boundary && sticky.boundary.length) {
                    var bTop = sticky.boundary.position().top;
                    if (sticky.boundtoparent) {
                        containerBottom = documentHeight - (bTop + sticky.boundary.outerHeight()) + parseInt(sticky.boundary.css("padding-bottom"));
                    } else {
                        containerBottom = documentHeight - bTop - parseInt(sticky.boundary.css("margin-top"));
                    }
                    newTop = scrollTop + stickyHeight > documentHeight - containerBottom - (sticky.options.top < 0 ? 0 : sticky.options.top) ? documentHeight - containerBottom - (scrollTop + stickyHeight) : newTop;
                }
                if (sticky.currentTop != newTop) {
                    sticky.element.css({
                        position: "fixed",
                        top: newTop,
                        width: typeof sticky.getWidthFrom !== "undefined" ? UI.$(sticky.getWidthFrom).width() : sticky.element.width(),
                        left: sticky.wrapper.offset().left
                    });
                    if (!sticky.init) {
                        sticky.element.addClass(sticky.options.clsinit);
                        if (location.hash && scrollTop > 0 && sticky.options.target) {
                            var $target = UI.$(location.hash);
                            if ($target.length) {
                                setTimeout(function($target, sticky) {
                                    return function() {
                                        sticky.element.width();
                                        // force redraw
                                        var offset = $target.offset(), maxoffset = offset.top + $target.outerHeight(), stickyOffset = sticky.element.offset(), stickyHeight = sticky.element.outerHeight(), stickyMaxOffset = stickyOffset.top + stickyHeight;
                                        if (stickyOffset.top < maxoffset && offset.top < stickyMaxOffset) {
                                            scrollTop = offset.top - stickyHeight - sticky.options.target;
                                            window.scrollTo(0, scrollTop);
                                        }
                                    };
                                }($target, sticky), 0);
                            }
                        }
                    }
                    sticky.element.addClass(sticky.options.clsactive);
                    sticky.element.css("margin", "");
                    if (sticky.options.animation && sticky.init) {
                        sticky.element.addClass(sticky.options.animation);
                    }
                    sticky.currentTop = newTop;
                }
            }
            sticky.init = true;
        }
    }
    return UI.sticky;
});

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-search", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    UI.component("timepicker", {
        defaults: {
            format: "24h",
            delay: 0,
            start: 0,
            end: 24
        },
        boot: function() {
            // init code
            UI.$html.on("focus.timepicker.uikit", "[data-uk-timepicker]", function(e) {
                var ele = UI.$(this);
                if (!ele.data("timepicker")) {
                    var obj = UI.timepicker(ele, UI.Utils.options(ele.attr("data-uk-timepicker")));
                    setTimeout(function() {
                        obj.autocomplete.input.focus();
                    }, 40);
                }
            });
        },
        init: function() {
            var $this = this, times = getTimeRange(this.options.start, this.options.end), container;
            this.options.minLength = 0;
            this.options.template = '<ul class="uk-nav uk-nav-autocomplete uk-autocomplete-results">{{~items}}<li data-value="{{$item.value}}"><a>{{$item.value}}</a></li>{{/items}}</ul>';
            this.options.source = function(release) {
                release(times[$this.options.format] || times["12h"]);
            };
            if (this.element.is("input")) {
                this.element.wrap('<div class="uk-autocomplete"></div>');
                container = this.element.parent();
            } else {
                container = this.element.addClass("uk-autocomplete");
            }
            this.autocomplete = UI.autocomplete(container, this.options);
            this.autocomplete.dropdown.addClass("uk-dropdown-small uk-dropdown-scrollable");
            this.autocomplete.on("show.uk.autocomplete", function() {
                var selected = $this.autocomplete.dropdown.find('[data-value="' + $this.autocomplete.input.val() + '"]');
                setTimeout(function() {
                    $this.autocomplete.pick(selected, true);
                }, 10);
            });
            this.autocomplete.input.on("focus", function() {
                $this.autocomplete.value = Math.random();
                $this.autocomplete.triggercomplete();
            }).on("blur", function() {
                $this.checkTime();
            });
            this.element.data("timepicker", this);
        },
        checkTime: function() {
            var arr, timeArray, meridian = "AM", hour, minute, time = this.autocomplete.input.val();
            if (this.options.format == "12h") {
                arr = time.split(" ");
                timeArray = arr[0].split(":");
                meridian = arr[1];
            } else {
                timeArray = time.split(":");
            }
            hour = parseInt(timeArray[0], 10);
            minute = parseInt(timeArray[1], 10);
            if (isNaN(hour)) hour = 0;
            if (isNaN(minute)) minute = 0;
            if (this.options.format == "12h") {
                if (hour > 12) {
                    hour = 12;
                } else if (hour < 0) {
                    hour = 12;
                }
                if (meridian === "am" || meridian === "a") {
                    meridian = "AM";
                } else if (meridian === "pm" || meridian === "p") {
                    meridian = "PM";
                }
                if (meridian !== "AM" && meridian !== "PM") {
                    meridian = "AM";
                }
            } else {
                if (hour >= 24) {
                    hour = 23;
                } else if (hour < 0) {
                    hour = 0;
                }
            }
            if (minute < 0) {
                minute = 0;
            } else if (minute >= 60) {
                minute = 0;
            }
            this.autocomplete.input.val(this.formatTime(hour, minute, meridian)).trigger("change");
        },
        formatTime: function(hour, minute, meridian) {
            hour = hour < 10 ? "0" + hour : hour;
            minute = minute < 10 ? "0" + minute : minute;
            return hour + ":" + minute + (this.options.format == "12h" ? " " + meridian : "");
        }
    });
    // helper
    function getTimeRange(start, end) {
        start = start || 0;
        end = end || 24;
        var times = {
            "12h": [],
            "24h": []
        }, i, h;
        for (i = start, h = ""; i < end; i++) {
            h = "" + i;
            if (i < 10) h = "0" + h;
            times["24h"].push({
                value: h + ":00"
            });
            times["24h"].push({
                value: h + ":30"
            });
            if (i === 0) {
                h = 12;
                times["12h"].push({
                    value: h + ":00 AM"
                });
                times["12h"].push({
                    value: h + ":30 AM"
                });
            }
            if (i > 0 && i < 13 && i !== 12) {
                times["12h"].push({
                    value: h + ":00 AM"
                });
                times["12h"].push({
                    value: h + ":30 AM"
                });
            }
            if (i >= 12) {
                h = h - 12;
                if (h === 0) h = 12;
                if (h < 10) h = "0" + String(h);
                times["12h"].push({
                    value: h + ":00 PM"
                });
                times["12h"].push({
                    value: h + ":30 PM"
                });
            }
        }
        return times;
    }
});

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-tooltip", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    var $tooltip, // tooltip container
    tooltipdelay, checkdelay;
    UI.component("tooltip", {
        defaults: {
            offset: 5,
            pos: "top",
            animation: false,
            delay: 0,
            // in miliseconds
            cls: "",
            activeClass: "uk-active",
            src: function(ele, title) {
                title = ele.attr("title");
                if (title) {
                    ele.data("cached-title", title).removeAttr("title");
                }
                return ele.data("cached-title");
            }
        },
        tip: "",
        boot: function() {
            // init code
            UI.$html.on("mouseenter.tooltip.uikit focus.tooltip.uikit", "[data-uk-tooltip]", function(e) {
                var ele = UI.$(this);
                if (!ele.data("tooltip")) {
                    var obj = UI.tooltip(ele, UI.Utils.options(ele.attr("data-uk-tooltip")));
                    ele.trigger("mouseenter");
                }
            });
        },
        init: function() {
            var $this = this;
            if (!$tooltip) {
                $tooltip = UI.$('<div class="uk-tooltip"></div>').appendTo("body");
            }
            this.on({
                focus: function(e) {
                    $this.show();
                },
                blur: function(e) {
                    $this.hide();
                },
                mouseenter: function(e) {
                    $this.show();
                },
                mouseleave: function(e) {
                    $this.hide();
                }
            });
        },
        show: function() {
            this.tip = typeof this.options.src === "function" ? this.options.src(this.element) : this.options.src;
            if (tooltipdelay) clearTimeout(tooltipdelay);
            if (checkdelay) clearTimeout(checkdelay);
            if (!this.tip.length) return;
            $tooltip.stop().css({
                top: -2e3,
                visibility: "hidden"
            }).removeClass(this.options.activeClass).show();
            $tooltip.html('<div class="uk-tooltip-inner">' + this.tip + "</div>");
            var $this = this, pos = UI.$.extend({}, this.element.offset(), {
                width: this.element[0].offsetWidth,
                height: this.element[0].offsetHeight
            }), width = $tooltip[0].offsetWidth, height = $tooltip[0].offsetHeight, offset = typeof this.options.offset === "function" ? this.options.offset.call(this.element) : this.options.offset, position = typeof this.options.pos === "function" ? this.options.pos.call(this.element) : this.options.pos, tmppos = position.split("-"), tcss = {
                display: "none",
                visibility: "visible",
                top: pos.top + pos.height + height,
                left: pos.left
            };
            // prevent strange position
            // when tooltip is in offcanvas etc.
            if (UI.$html.css("position") == "fixed" || UI.$body.css("position") == "fixed") {
                var bodyoffset = UI.$("body").offset(), htmloffset = UI.$("html").offset(), docoffset = {
                    top: htmloffset.top + bodyoffset.top,
                    left: htmloffset.left + bodyoffset.left
                };
                pos.left -= docoffset.left;
                pos.top -= docoffset.top;
            }
            if ((tmppos[0] == "left" || tmppos[0] == "right") && UI.langdirection == "right") {
                tmppos[0] = tmppos[0] == "left" ? "right" : "left";
            }
            var variants = {
                bottom: {
                    top: pos.top + pos.height + offset,
                    left: pos.left + pos.width / 2 - width / 2
                },
                top: {
                    top: pos.top - height - offset,
                    left: pos.left + pos.width / 2 - width / 2
                },
                left: {
                    top: pos.top + pos.height / 2 - height / 2,
                    left: pos.left - width - offset
                },
                right: {
                    top: pos.top + pos.height / 2 - height / 2,
                    left: pos.left + pos.width + offset
                }
            };
            UI.$.extend(tcss, variants[tmppos[0]]);
            if (tmppos.length == 2) tcss.left = tmppos[1] == "left" ? pos.left : pos.left + pos.width - width;
            var boundary = this.checkBoundary(tcss.left, tcss.top, width, height);
            if (boundary) {
                switch (boundary) {
                  case "x":
                    if (tmppos.length == 2) {
                        position = tmppos[0] + "-" + (tcss.left < 0 ? "left" : "right");
                    } else {
                        position = tcss.left < 0 ? "right" : "left";
                    }
                    break;

                  case "y":
                    if (tmppos.length == 2) {
                        position = (tcss.top < 0 ? "bottom" : "top") + "-" + tmppos[1];
                    } else {
                        position = tcss.top < 0 ? "bottom" : "top";
                    }
                    break;

                  case "xy":
                    if (tmppos.length == 2) {
                        position = (tcss.top < 0 ? "bottom" : "top") + "-" + (tcss.left < 0 ? "left" : "right");
                    } else {
                        position = tcss.left < 0 ? "right" : "left";
                    }
                    break;
                }
                tmppos = position.split("-");
                UI.$.extend(tcss, variants[tmppos[0]]);
                if (tmppos.length == 2) tcss.left = tmppos[1] == "left" ? pos.left : pos.left + pos.width - width;
            }
            tcss.left -= UI.$body.position().left;
            tooltipdelay = setTimeout(function() {
                $tooltip.css(tcss).attr("class", [ "uk-tooltip", "uk-tooltip-" + position, $this.options.cls ].join(" "));
                if ($this.options.animation) {
                    $tooltip.css({
                        opacity: 0,
                        display: "block"
                    }).addClass($this.options.activeClass).animate({
                        opacity: 1
                    }, parseInt($this.options.animation, 10) || 400);
                } else {
                    $tooltip.show().addClass($this.options.activeClass);
                }
                tooltipdelay = false;
                // close tooltip if element was removed or hidden
                checkdelay = setInterval(function() {
                    if (!$this.element.is(":visible")) $this.hide();
                }, 150);
            }, parseInt(this.options.delay, 10) || 0);
        },
        hide: function() {
            if (this.element.is("input") && this.element[0] === document.activeElement) return;
            if (tooltipdelay) clearTimeout(tooltipdelay);
            if (checkdelay) clearTimeout(checkdelay);
            $tooltip.stop();
            if (this.options.animation) {
                var $this = this;
                $tooltip.fadeOut(parseInt(this.options.animation, 10) || 400, function() {
                    $tooltip.removeClass($this.options.activeClass);
                });
            } else {
                $tooltip.hide().removeClass(this.options.activeClass);
            }
        },
        content: function() {
            return this.tip;
        },
        checkBoundary: function(left, top, width, height) {
            var axis = "";
            if (left < 0 || left - UI.$win.scrollLeft() + width > window.innerWidth) {
                axis += "x";
            }
            if (top < 0 || top - UI.$win.scrollTop() + height > window.innerHeight) {
                axis += "y";
            }
            return axis;
        }
    });
    return UI.tooltip;
});

(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-upload", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    UI.component("uploadSelect", {
        init: function() {
            var $this = this;
            this.on("change", function() {
                xhrupload($this.element[0].files, $this.options);
                var twin = $this.element.clone(true).data("uploadSelect", $this);
                $this.element.replaceWith(twin);
                $this.element = twin;
            });
        }
    });
    UI.component("uploadDrop", {
        defaults: {
            dragoverClass: "uk-dragover"
        },
        init: function() {
            var $this = this, hasdragCls = false;
            this.on("drop", function(e) {
                if (e.dataTransfer && e.dataTransfer.files) {
                    e.stopPropagation();
                    e.preventDefault();
                    $this.element.removeClass($this.options.dragoverClass);
                    $this.element.trigger("dropped.uk.upload", [ e.dataTransfer.files ]);
                    xhrupload(e.dataTransfer.files, $this.options);
                }
            }).on("dragenter", function(e) {
                e.stopPropagation();
                e.preventDefault();
            }).on("dragover", function(e) {
                e.stopPropagation();
                e.preventDefault();
                if (!hasdragCls) {
                    $this.element.addClass($this.options.dragoverClass);
                    hasdragCls = true;
                }
            }).on("dragleave", function(e) {
                e.stopPropagation();
                e.preventDefault();
                $this.element.removeClass($this.options.dragoverClass);
                hasdragCls = false;
            });
        }
    });
    UI.support.ajaxupload = function() {
        function supportFileAPI() {
            var fi = document.createElement("INPUT");
            fi.type = "file";
            return "files" in fi;
        }
        function supportAjaxUploadProgressEvents() {
            var xhr = new XMLHttpRequest();
            return !!(xhr && "upload" in xhr && "onprogress" in xhr.upload);
        }
        function supportFormData() {
            return !!window.FormData;
        }
        return supportFileAPI() && supportAjaxUploadProgressEvents() && supportFormData();
    }();
    if (UI.support.ajaxupload) {
        UI.$.event.props.push("dataTransfer");
    }
    function xhrupload(files, settings) {
        if (!UI.support.ajaxupload) {
            return this;
        }
        settings = UI.$.extend({}, xhrupload.defaults, settings);
        if (!files.length) {
            return;
        }
        if (settings.allow !== "*.*") {
            for (var i = 0, file; file = files[i]; i++) {
                if (!matchName(settings.allow, file.name)) {
                    if (typeof settings.notallowed == "string") {
                        alert(settings.notallowed);
                    } else {
                        settings.notallowed(file, settings);
                    }
                    return;
                }
            }
        }
        var complete = settings.complete;
        if (settings.single) {
            var count = files.length, uploaded = 0, allow = true;
            settings.beforeAll(files);
            settings.complete = function(response, xhr) {
                uploaded = uploaded + 1;
                complete(response, xhr);
                if (settings.filelimit && uploaded >= settings.filelimit) {
                    allow = false;
                }
                if (allow && uploaded < count) {
                    upload([ files[uploaded] ], settings);
                } else {
                    settings.allcomplete(response, xhr);
                }
            };
            upload([ files[0] ], settings);
        } else {
            settings.complete = function(response, xhr) {
                complete(response, xhr);
                settings.allcomplete(response, xhr);
            };
            upload(files, settings);
        }
        function upload(files, settings) {
            // upload all at once
            var formData = new FormData(), xhr = new XMLHttpRequest();
            if (settings.before(settings, files) === false) return;
            for (var i = 0, f; f = files[i]; i++) {
                formData.append(settings.param, f);
            }
            for (var p in settings.params) {
                formData.append(p, settings.params[p]);
            }
            // Add any event handlers here...
            xhr.upload.addEventListener("progress", function(e) {
                var percent = e.loaded / e.total * 100;
                settings.progress(percent, e);
            }, false);
            xhr.addEventListener("loadstart", function(e) {
                settings.loadstart(e);
            }, false);
            xhr.addEventListener("load", function(e) {
                settings.load(e);
            }, false);
            xhr.addEventListener("loadend", function(e) {
                settings.loadend(e);
            }, false);
            xhr.addEventListener("error", function(e) {
                settings.error(e);
            }, false);
            xhr.addEventListener("abort", function(e) {
                settings.abort(e);
            }, false);
            xhr.open(settings.method, settings.action, true);
            xhr.onreadystatechange = function() {
                settings.readystatechange(xhr);
                if (xhr.readyState == 4) {
                    var response = xhr.responseText;
                    if (settings.type == "json") {
                        try {
                            response = UI.$.parseJSON(response);
                        } catch (e) {
                            response = false;
                        }
                    }
                    settings.complete(response, xhr);
                }
            };
            settings.beforeSend(xhr);
            xhr.send(formData);
        }
    }
    xhrupload.defaults = {
        action: "",
        single: true,
        method: "POST",
        param: "files[]",
        params: {},
        allow: "*.*",
        type: "text",
        filelimit: false,
        // events
        before: function(o) {},
        beforeSend: function(xhr) {},
        beforeAll: function() {},
        loadstart: function() {},
        load: function() {},
        loadend: function() {},
        error: function() {},
        abort: function() {},
        progress: function() {},
        complete: function() {},
        allcomplete: function() {},
        readystatechange: function() {},
        notallowed: function(file, settings) {
            alert("Only the following file types are allowed: " + settings.allow);
        }
    };
    function matchName(pattern, path) {
        var parsedPattern = "^" + pattern.replace(/\//g, "\\/").replace(/\*\*/g, "(\\/[^\\/]+)*").replace(/\*/g, "[^\\/]+").replace(/((?!\\))\?/g, "$1.") + "$";
        parsedPattern = "^" + parsedPattern + "$";
        return path.match(new RegExp(parsedPattern, "i")) !== null;
    }
    UI.Utils.xhrupload = xhrupload;
    return xhrupload;
});

// ========================================================================
//  ___              _   _ ___   _  ___ _
// |   \ _  _ _ _   | | | |_ _| | |/ (_) |_
// | |) | || | ' \  | |_| || |  | ' <| |  _|
// |___/ \_, |_||_|  \___/|___| |_|\_\_|\__|
//       |__/
// Dyn UI Kit Core Files, Do NOT modify directly, all changes will be lost
// This file is imported via Chef and compiled via GruntJS within Portal
//
// Usage docs: https://github.corp.dyndns.com/pages/uiux/dyn_uikit/
// ========================================================================
(function() {
    // override default alert settings
    UIkit.on("beforeready.uk.dom", function() {
        $.extend(UIkit.components.alert.prototype.defaults, {
            duration: 100
        });
    });
})();

// ========================================================================
//  ___              _   _ ___   _  ___ _
// |   \ _  _ _ _   | | | |_ _| | |/ (_) |_
// | |) | || | ' \  | |_| || |  | ' <| |  _|
// |___/ \_, |_||_|  \___/|___| |_|\_\_|\__|
//       |__/
// Dyn UI Kit Core Files, Do NOT modify directly, all changes will be lost
// This file is imported via Chef and compiled via GruntJS within Portal
//
// Usage docs: https://github.corp.dyndns.com/pages/uiux/dyn_uikit/
// ========================================================================
(function() {
    // override default tooltip settings
    UIkit.on("beforeready.uk.dom", function() {
        $.extend(UIkit.components.tooltip.prototype.defaults, {
            animation: 100,
            delay: 100,
            src: function(ele, header, body) {
                var compiledTip = "";
                header = ele.data("ukTooltipHeader");
                if (header) {
                    ele.data("cached-uk-tooltip-header", header).removeData("ukTooltipHeader");
                }
                body = ele.data("ukTooltipBody");
                if (body) {
                    ele.data("cached-uk-tooltip-body", body).removeData("ukTooltipBody");
                }
                if (ele.data("cached-uk-tooltip-header")) {
                    compiledTip += '<div class="uk-tooltip-header">' + ele.data("cached-uk-tooltip-header") + "</div>";
                }
                if (ele.data("cached-uk-tooltip-body")) {
                    compiledTip += ele.data("cached-uk-tooltip-body");
                }
                return compiledTip;
            }
        });
    });
})();

// ========================================================================
//  ___              _   _ ___   _  ___ _
// |   \ _  _ _ _   | | | |_ _| | |/ (_) |_
// | |) | || | ' \  | |_| || |  | ' <| |  _|
// |___/ \_, |_||_|  \___/|___| |_|\_\_|\__|
//       |__/
// Dyn UI Kit Core Files, Do NOT modify directly, all changes will be lost
// This file is imported via Chef and compiled via GruntJS within Portal
//
// Usage docs: https://github.corp.dyndns.com/pages/uiux/dyn_uikit/
// ========================================================================
(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-form-chosen", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    UI.component("formChosen", {
        defaults: {},
        boot: function() {
            // init code
            UI.ready(function(context) {
                UI.$("[data-uk-chosen]", context).each(function() {
                    var ele = UI.$(this);
                    if (!ele.data("formChosen")) {
                        var obj = UI.formChosen(ele, UI.Utils.options(ele.attr("data-uk-chosen")));
                    }
                });
            });
        },
        init: function() {
            var $this = this;
            UI.$(this.element).chosen(this.options);
            this.element.data("formChosen", $this);
        }
    });
    return UI.formRange;
});

// ========================================================================
//  ___              _   _ ___   _  ___ _
// |   \ _  _ _ _   | | | |_ _| | |/ (_) |_
// | |) | || | ' \  | |_| || |  | ' <| |  _|
// |___/ \_, |_||_|  \___/|___| |_|\_\_|\__|
//       |__/
// Dyn UI Kit Core Files, Do NOT modify directly, all changes will be lost
// This file is imported via Chef and compiled via GruntJS within Portal
//
// Usage docs: https://github.corp.dyndns.com/pages/uiux/dyn_uikit/
// ========================================================================
(function(addon) {
    var component;
    if (window.UIkit) {
        component = addon(UIkit);
    }
    if (typeof define == "function" && define.amd) {
        define("uikit-form-range", [ "uikit" ], function() {
            return component || addon(UIkit);
        });
    }
})(function(UI) {
    "use strict";
    UI.component("formRange", {
        defaults: {},
        boot: function() {
            // init code
            UI.ready(function(context) {
                UI.$("[data-uk-range]", context).each(function() {
                    var ele = UI.$(this);
                    if (!ele.data("formRange")) {
                        var obj = UI.formRange(ele, UI.Utils.options(ele.attr("data-uk-range")));
                    }
                });
            });
        },
        init: function() {
            var $this = this;
            // init + on change event
            this.on("change mousemove keydown focus blur", function() {
                var fn = function(event) {
                    if (!event || (event.type !== "mousemove" || event.type === "mousemove" && $this.element.is(":active"))) {
                        var val = ($this.element.val() - ($this.element.attr("min") || 0)) / (($this.element.attr("max") || 100) - ($this.element.attr("min") || 0));
                        val = val || .001;
                        // @range-track-fill-color;
                        // @range-track-empty-color;
                        var fillColor = "#637582", bgColor = "#d7d7d7";
                        if ($this.element.is(":focus") || event && event.type === "focus") {
                            // @range-track-fill-focus-color;
                            // @range-track-empty-focus-color;
                            fillColor = "#758896";
                            bgColor = "#e0e0e0";
                        }
                        $this.element.css("background-image", "-webkit-gradient(linear, left top, right top, " + "color-stop(" + val + ", " + fillColor + "), " + "color-stop(" + val + ", " + bgColor + ")" + ")");
                        $this.element.css("background-image", "-moz-linear-gradient(left, " + fillColor + " " + val * 100 + "% , " + bgColor + " " + val * 100 + "%)");
                    }
                    return fn;
                };
                return fn();
            }());
            this.element.data("formRange", $this);
        }
    });
    return UI.formRange;
});

// ========================================================================
//  ___              _   _ ___   _  ___ _
// |   \ _  _ _ _   | | | |_ _| | |/ (_) |_
// | |) | || | ' \  | |_| || |  | ' <| |  _|
// |___/ \_, |_||_|  \___/|___| |_|\_\_|\__|
//       |__/
// Dyn UI Kit Core Files, Do NOT modify directly, all changes will be lost
// This file is imported via Chef and compiled via GruntJS within Portal
//
// Usage docs: https://github.corp.dyndns.com/pages/uiux/dyn_uikit/
// ========================================================================
(function() {
    // Handler that makes header menus at least as wide as their opener,
    // and positions them correctly under the opener
    $(document).on("click", ".dh-menu-control", function() {
        var $this = $(this), $menu = $this.find(".dh-menu-wrapper"), $next = $this.next(".dh-menu-control"), $container = $("#dh-menu-controls"), $wrapper = $("#dh-wrapper");
        // Make the submenu at least as wide as the menu control
        if ($menu.width() < $this.width()) {
            $menu.css({
                maxWidth: "none",
                width: $this.width() - ($menu.outerWidth() - $menu.width()) + "px"
            });
        }
        if ($next.length) {
            $menu.css({
                right: $wrapper.width() - $container.position().left - ($next.position().left - parseInt($this.css("borderRightWidth"), 10)) + "px"
            });
        }
    });
    // Handler that makes header menus open and close
    var menuTransitionTime = 100;
    // in milliseconds
    $(document).on("click", function(event) {
        var $clicked = $(event.target), clickedWasActive = $clicked.hasClass("dh-menu-control-active");
        // If the parent(s) of the clicked item (not including the clicked item) are the active menu control,
        // then don't do anything. The user clicked somewhere in the menu or on a menu item.
        if ($clicked.parents(".dh-menu-control").hasClass("dh-menu-control-active")) {
            return true;
        }
        // Menu closing logic
        $("#dh-menu-controls .dh-menu-control-active").not(".dh-menu-control-transition").addClass("dh-menu-control-transition").removeClass("dh-menu-control-active").delay(menuTransitionTime).queue(function() {
            // wait for the closing transition to complete, then remove the transition class
            $(this).removeClass("dh-menu-control-transition").dequeue();
        });
        // Menu opening logic
        if ($clicked.is(".dh-menu-control")) {
            $clicked.not(".dh-menu-control-transition").filter(function() {
                return !clickedWasActive;
            }).addClass("dh-menu-control-transition").delay(1).queue(function() {
                $(this).addClass("dh-menu-control-active").dequeue();
            }).delay(menuTransitionTime).queue(function() {
                // wait for the opening transition to complete, then remove the transition class
                $(this).removeClass("dh-menu-control-transition").dequeue();
            });
        }
        return true;
    });
    $(document).on("focusin", "#dh-search-box", function() {
        var $this = $(this);
        $this.data("origWidth", $this.data("origWidth") || $this.css("width")).stop(true).animate({
            width: "+=100px"
        }, 200);
    }).on("focusout", "#dh-search-box", function() {
        var $this = $(this);
        $this.stop(true).animate({
            width: $this.data("origWidth")
        }, 200);
    });
})();